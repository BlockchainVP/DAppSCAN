{"contracts":{"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/bilateralSwap/BilateralSwap.sol:BilateralSwap":{"abi":"[{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","bin":"608060405234801561001057600080fd5b50610680806100206000396000f3fe608060405234801561001057600080fd5b50610019610023565b60606040526101a5565b60443560805260643560a0526101443561010401803560048114151561004f5761019060005260206000fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061012435066024356102e0526100878385610259565b608083026103000160005b8481101561017c5760c081026020870101600060208201358560018511600181146100c457600081146100d1576100d6565b61018085033593506100d6565b843593505b506100e28284866101aa565b60406080850160e037604080850160203780880361012052826060528160c05260406101a0606060e060075afa60406101206060602060075afa8116905060406101606060608060075afa811690506040610160608061012060065afa81169050604087608061016060065afa811690508015156101665761019060005260206000fd5b6040870196505050505050600181019050610092565b50826102e082036102e02006828114151561019d5761019460005260206000fd5b505050505050565b610254565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408301356060840135608085013560a086013584838409856003878789898a090908148582830986600388868a888909090814166001891189888b06141660018b118b898d061416161615156102495761019060005260206000fd5b505050505050505050565b610295565b60005b8281101561028557606060c082028301016080816080840261030001375060018101905061025c565b5060808202610300206000525050565b61029d61029f565b005b610144356101040161016435610124016101843561014401602082033560041460208203356002141615156102d357600080fd5b60206101605260026101a05260806101c05260c06102205261020061024052600061026052600061028052610124356102a0526101206102c05260016102e052606061030052600160005260806060840160203760c06103205260016103405281356103605260a06000206103805260406103a0527f800000000000000000000000000000000000000000000000000000000000000060016040511602602051176103c0527f800000000000000000000000000000000000000000000000000000000000000060016080511602606051176103e05260016104205260606104405260806101e0840160203760016104805260408201356104a05260a06000206104c052803580604083030135806040016104e0527f80000000000000000000000000000000000000000000000000000000000000006001604051160260205117610500527f800000000000000000000000000000000000000000000000000000000000000060016080511602606051176105205280602084038301610540378060c00161046052806101200161040052806103200161020052806103c0016101e052806105400160c06020820152610200604082015260006060820152600060808201526101243560e052602060e02060a082015261012060c0820152600160e0820152606061010082015260806102a0870160203760c06101208201526001610140820152606085013561016082015260a060002061018082015260406101a08201527f800000000000000000000000000000000000000000000000000000000000000060016040511602602051176101c08201527f800000000000000000000000000000000000000000000000000000000000000060016080511602606051176101e08201526001610220820152606061024082015260806101208701602037600161028082015260208501356102a082015260a06000206102c082015260208401359250826040850301359150816040016102e08201527f800000000000000000000000000000000000000000000000000000000000000060016040511602602051176103008201527f80000000000000000000000000000000000000000000000000000000000000006001608051160260605117610320820152816020850384016103408301378160c00161026082015281610120016102008201528161032001815261020051826103c001016101805260406101805101610160f3fea165627a7a72305820464235321b0c26ce4d8ca6d8376fcf30ce39ad0d2f0798f97c083f74d25320330029","bin-runtime":"608060405234801561001057600080fd5b50610019610023565b60606040526101a5565b60443560805260643560a0526101443561010401803560048114151561004f5761019060005260206000fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018061012435066024356102e0526100878385610259565b608083026103000160005b8481101561017c5760c081026020870101600060208201358560018511600181146100c457600081146100d1576100d6565b61018085033593506100d6565b843593505b506100e28284866101aa565b60406080850160e037604080850160203780880361012052826060528160c05260406101a0606060e060075afa60406101206060602060075afa8116905060406101606060608060075afa811690506040610160608061012060065afa81169050604087608061016060065afa811690508015156101665761019060005260206000fd5b6040870196505050505050600181019050610092565b50826102e082036102e02006828114151561019d5761019460005260206000fd5b505050505050565b610254565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408301356060840135608085013560a086013584838409856003878789898a090908148582830986600388868a888909090814166001891189888b06141660018b118b898d061416161615156102495761019060005260206000fd5b505050505050505050565b610295565b60005b8281101561028557606060c082028301016080816080840261030001375060018101905061025c565b5060808202610300206000525050565b61029d61029f565b005b610144356101040161016435610124016101843561014401602082033560041460208203356002141615156102d357600080fd5b60206101605260026101a05260806101c05260c06102205261020061024052600061026052600061028052610124356102a0526101206102c05260016102e052606061030052600160005260806060840160203760c06103205260016103405281356103605260a06000206103805260406103a0527f800000000000000000000000000000000000000000000000000000000000000060016040511602602051176103c0527f800000000000000000000000000000000000000000000000000000000000000060016080511602606051176103e05260016104205260606104405260806101e0840160203760016104805260408201356104a05260a06000206104c052803580604083030135806040016104e0527f80000000000000000000000000000000000000000000000000000000000000006001604051160260205117610500527f800000000000000000000000000000000000000000000000000000000000000060016080511602606051176105205280602084038301610540378060c00161046052806101200161040052806103200161020052806103c0016101e052806105400160c06020820152610200604082015260006060820152600060808201526101243560e052602060e02060a082015261012060c0820152600160e0820152606061010082015260806102a0870160203760c06101208201526001610140820152606085013561016082015260a060002061018082015260406101a08201527f800000000000000000000000000000000000000000000000000000000000000060016040511602602051176101c08201527f800000000000000000000000000000000000000000000000000000000000000060016080511602606051176101e08201526001610220820152606061024082015260806101208701602037600161028082015260208501356102a082015260a06000206102c082015260208401359250826040850301359150816040016102e08201527f800000000000000000000000000000000000000000000000000000000000000060016040511602602051176103008201527f80000000000000000000000000000000000000000000000000000000000000006001608051160260605117610320820152816020850384016103408301378160c00161026082015281610120016102008201528161032001815261020051826103c001016101805260406101805101610160f3fea165627a7a72305820464235321b0c26ce4d8ca6d8376fcf30ce39ad0d2f0798f97c083f74d25320330029","srcmap":"722:12681:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;722:12681:0;;;;;;;","srcmap-runtime":"722:12681:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;722:12681:0;1526:23;;;;1816:4;1810;1803:18;4203:5473;;;4434:4;4421:18;4415:4;4408:32;4490:4;4477:18;4471:4;4464:32;4557:5;4544:19;4537:5;4533:31;4630:5;4617:19;4721:4;4718:1;4715:11;4708:19;4705:2;;;4804:3;4798:4;4791:17;4904:4;4898;4891:18;4705:2;4963:66;5088:9;5080:5;5067:19;5063:35;5143:4;5130:18;5123:5;5116:33;5211:25;5234:1;5227:5;5211:25;;;5280:4;5277:1;5273:12;5266:5;5262:24;5661:1;5646:3060;5671:1;5668;5665:8;5646:3060;;;5850:4;5847:1;5843:12;5836:4;5829:5;5825:16;5821:35;;5940:4;5929:9;5925:20;5912:34;5976:9;6020:1;6017;6014:8;6091:1;6086:222;;;;6360:1;6355:107;;;;6007:455;;6086:222;6279:5;6268:9;6264:21;6251:35;6246:40;;6086:222;;6355:107;6430:9;6417:23;6412:28;;6007:455;;6545:35;6578:1;6575;6564:9;6545:35;;;7147:4;7140;7129:9;7125:20;7119:4;7106:46;7214:4;7207;7196:9;7192:20;7186:4;7173:46;7269:1;7258:9;7254:17;7247:5;7240:32;7307:1;7301:4;7294:15;7343:1;7337:4;7330:15;7749:4;7742:5;7736:4;7730;7727:1;7722:3;7711:43;7835:4;7828:5;7822:4;7816;7813:1;7808:3;7797:43;7789:6;7785:56;7775:66;;7922:4;7915:5;7909:4;7903;7900:1;7895:3;7884:43;7876:6;7872:56;7862:66;;8209:4;8202:5;8196:4;8189:5;8186:1;8181:3;8170:44;8162:6;8158:57;8148:67;;8444:4;8441:1;8435:4;8428:5;8425:1;8420:3;8409:40;8401:6;8397:53;8387:63;;8569:6;8562:14;8559:2;;;8592:3;8586:4;8579:17;8610:4;8604;8597:18;8559:2;8650:4;8647:1;8643:12;8638:17;;5696:3010;;;;;5688:4;5685:1;5681:12;5676:17;;5646:3060;;;5650:14;9453:9;9444:5;9441:1;9437:13;9430:5;9420:31;9416:47;9504:9;9494:8;9491:23;9484:31;9481:2;;;9601:3;9595:4;9588:17;9639:4;9633;9626:18;9481:2;4236:5440;;;;;;;;10019:2065;;;10094:66;10196;10316:4;10310;10306:15;10293:29;10376:4;10370;10366:15;10353:29;10436:4;10430;10426:15;10413:29;10496:4;10490;10486:15;10473:29;11865:11;11857:6;11849;11842:35;11796:11;11793:1;11742:11;11697:6;11646:11;11638:6;11630;11623:35;11579:175;11572:236;11518:389;11446:11;11438:6;11430;11423:35;11377:11;11337:1;11286:11;11278:6;11264:11;11256:6;11248;11241:35;11197:101;11190:199;11136:352;11103:830;10984:1;10981;10978:8;10910:1;10898:9;10895:1;10891:17;10888:24;10851:200;10745:1;10742;10739:8;10671:1;10659:9;10656:1;10652:17;10649:24;10612:209;10579:498;10550:1405;10522:1451;10519:2;;;12009:3;12003:4;11996:17;12047:4;12041;12034:18;10519:2;10059:2025;;;;;;;;;;;12694:475;;;12762:1;12747:202;12772:1;12769;12766:8;12747:202;;;12858:4;12850;12847:1;12843:12;12836:5;12832:24;12828:35;12926:4;12919:5;12911:4;12908:1;12904:12;12897:5;12893:24;12880:51;12797:152;12789:4;12786:1;12782:12;12777:17;;12747:202;;;12751:14;13148:4;13145:1;13141:12;13134:5;13124:30;13118:4;13111:44;12729:440;;;;13355:39;:37;:39::i;:::-;722:12681;1484:26104:1;1633:5;1620:19;1613:5;1609:31;1695:5;1682:19;1675:5;1671:31;1797:5;1784:19;1777:5;1773:31;2276:4;2264:10;2260:21;2247:35;2241:4;2238:45;2213:4;2200:11;2196:22;2183:36;2177:4;2174:46;2153:144;2146:152;2143:2;;;2330:4;2324;2317:18;2143:2;5584:4;5577:5;5570:19;6365:4;6358:5;6351:19;6513:4;6506:5;6499:19;7334:4;7327:5;7320:19;7718:5;7711;7704:20;7907:4;7900:5;7893:19;7982:4;7975:5;7968:19;8070:5;8057:19;8050:5;8043:34;8958:5;8951;8944:20;9035:4;9028:5;9021:19;9144:4;9137:5;9130:19;9966:4;9960;9953:18;10438:4;10431;10424:5;10420:16;10414:4;10401:42;10554:4;10547:5;10540:19;10638:4;10631:5;10624:19;10798:10;10785:24;10778:5;10771:39;10947:4;10941;10931:21;10924:5;10917:36;11053:4;11046:5;11039:19;12005:66;11974:4;11967;11961:11;11957:22;11885:208;11837:4;11831:11;11807:304;11784:5;11760:365;12353:66;12326:4;12319;12313:11;12309:22;12284:157;12257:4;12251:11;12227:232;12204:5;12180:293;13195:4;13188:5;13181:19;13294:4;13287:5;13280:19;14586:4;14578:5;14571;14567:17;14561:4;14548:43;14751:4;14744:5;14737:19;14990:4;14978:10;14974:21;14961:35;14954:5;14947:50;15088:4;15082;15072:21;15065:5;15058:36;15516:11;15503:25;16658:13;16651:4;16638:11;16634:22;16630:42;16617:56;16775:14;16769:4;16765:25;16758:5;16751:40;17042:66;17011:4;17004;16998:11;16994:22;16965:165;16938:4;16932:11;16908:240;16885:5;16861:301;17413:66;17382:4;17375;17369:11;17365:22;17336:165;17309:4;17303:11;17279:240;17256:5;17232:301;18153:14;18145:4;18132:11;18128:22;18113:13;18109:42;18102:5;18089:79;18643:14;18637:4;18633:25;18626:5;18619:40;18861:14;18854:5;18850:26;18843:5;18836:41;19084:14;19077:5;19073:26;19066:5;19059:41;19645:14;19638:5;19634:26;19627:5;19620:41;19984:14;19977:5;19973:26;20175:4;20168;20158:8;20154:19;20147:33;20287:5;20280:4;20270:8;20266:19;20259:34;20386:4;20379;20369:8;20365:19;20358:33;20499:4;20492;20482:8;20478:19;20471:33;20709:5;20696:19;20690:4;20683:33;20773:4;20767;20757:21;20750:4;20740:8;20736:19;20729:50;21031:5;21024:4;21014:8;21010:19;21003:34;21143:4;21136;21126:8;21122:19;21115:33;21269:4;21261:5;21251:8;21247:20;21240:34;21624:4;21616:5;21609;21605:17;21599:4;21586:43;21741:4;21733:5;21723:8;21719:20;21712:34;21877:4;21869:5;21859:8;21855:20;21848:34;22030:4;22018:10;22014:21;22001:35;21993:5;21983:8;21979:20;21972:65;22156:4;22150;22140:21;22132:5;22122:8;22118:20;22111:51;22283:4;22275:5;22265:8;22261:20;22254:34;22564:66;22533:4;22526;22520:11;22516:22;22487:165;22460:4;22454:11;22430:240;22406:5;22396:8;22392:20;22368:316;22960:66;22929:4;22922;22916:11;22912:22;22883:165;22856:4;22850:11;22826:240;22802:5;22792:8;22788:20;22764:316;23407:4;23399:5;23389:8;23385:20;23378:34;23521:4;23513:5;23503:8;23499:20;23492:34;23871:4;23863:5;23856;23852:17;23846:4;23833:43;24056:4;24048:5;24038:8;24034:20;24027:34;24209:4;24197:10;24193:21;24180:35;24172:5;24162:8;24158:20;24151:65;24321:4;24315;24305:21;24297:5;24287:8;24283:20;24276:51;24528:4;24515:11;24511:22;24498:36;24481:53;;24606:13;24599:4;24586:11;24582:22;24578:42;24565:56;24547:74;;24750:14;24744:4;24740:25;24732:5;24722:8;24718:20;24711:55;25042:66;25011:4;25004;24998:11;24994:22;24965:165;24938:4;24932:11;24908:240;24884:5;24874:8;24870:20;24846:316;25438:66;25407:4;25400;25394:11;25390:22;25361:165;25334:4;25328:11;25304:240;25280:5;25270:8;25266:20;25242:316;25710:14;25702:4;25689:11;25685:22;25670:13;25666:42;25658:5;25648:8;25644:20;25631:94;25943:14;25937:4;25933:25;25925:5;25915:8;25911:20;25904:55;26109:14;26102:5;26098:26;26090:5;26080:8;26076:20;26069:56;26245:14;26238:5;26234:26;26224:8;26217:44;27071:5;27065:12;27048:14;27041:5;27037:26;27033:45;27026:5;27019:60;27548:4;27540:5;27534:12;27530:23;27523:5;27516:38"},"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/bilateralSwap/BilateralSwapABIEncoder.sol:BilateralSwapABIEncoder":{"abi":"[]","bin":"604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820a285a098b80b70228600292abc69564e2af1bd1a47608e9d7238c0a47922a9a20029","bin-runtime":"73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820a285a098b80b70228600292abc69564e2af1bd1a47608e9d7238c0a47922a9a20029","srcmap":"685:26905:1:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24","srcmap-runtime":"685:26905:1:-;;;;;;;;"}},"sourceList":["/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/bilateralSwap/BilateralSwap.sol","/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/bilateralSwap/BilateralSwapABIEncoder.sol"],"sources":{"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/bilateralSwap/BilateralSwap.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/bilateralSwap/BilateralSwap.sol","exportedSymbols":{"BilateralSwap":[13]}},"children":[{"attributes":{"literals":["solidity",">=","0.5",".0","<","0.6",".0"]},"id":1,"name":"PragmaDirective","src":"0:31:0"},{"attributes":{"SourceUnit":22,"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/bilateralSwap/BilateralSwapABIEncoder.sol","file":"./BilateralSwapABIEncoder.sol","scope":14,"symbolAliases":[null],"unitAlias":""},"id":2,"name":"ImportDirective","src":"33:39:0"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"contract","documentation":"@title Library to validate AZTEC Bilateral Swap zero-knowledge proofs\n@author AZTEC\n@dev Don't include this as an internal library. This contract uses \na static memory table to cache elliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory \nmutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`. External \ncalls to OptimizedAZTEC can be treated as pure functions as this contract \ncontains no storage and makes no external calls (other than to precompiles)\nCopyright Spilbury Holdings Ltd 2019. All rights reserved.*","fullyImplemented":true,"linearizedBaseContracts":[13],"name":"BilateralSwap","scope":14},"children":[{"attributes":{"documentation":"@dev AZTECBilateralSwap will take any transaction sent to it and attempt to validate a zero knowledge proof.\nIf the proof is not valid, the transaction will throw.\n@notice See BilateralSwapInterface for how method calls should be constructed.\nAZTECBilateralSwap is written in YUL to enable manual memory management and for other efficiency savings.*","implemented":true,"isConstructor":false,"kind":"fallback","modifiers":[null],"name":"","scope":13,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":3,"name":"ParameterList","src":"1194:2:0"},{"attributes":{"parameters":[null]},"children":[],"id":4,"name":"ParameterList","src":"1206:0:0"},{"children":[{"attributes":{"externalReferences":[null],"operations":"{\n    validateBilateralSwap()\n    mstore(0x40, 0x60)\n    function validateBilateralSwap()\n    {\n        mstore(0x80, calldataload(0x44))\n        mstore(0xa0, calldataload(0x64))\n        let notes := add(0x104, calldataload(0x144))\n        let n := calldataload(notes)\n        if iszero(eq(n, 0x04))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let challenge := mod(calldataload(0x124), gen_order)\n        mstore(0x2e0, calldataload(0x24))\n        hashCommitments(notes, n)\n        let b := add(0x300, mul(n, 0x80))\n        for {\n            let i := 0\n        }\n        lt(i, n)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n            let k\n            let a := calldataload(add(noteIndex, 0x20))\n            let c := challenge\n            switch gt(i, 1)\n            case 1 {\n                k := calldataload(sub(noteIndex, 0x180))\n            }\n            case 0 {\n                k := calldataload(noteIndex)\n            }\n            validateCommitment(noteIndex, k, a)\n            calldatacopy(0xe0, add(noteIndex, 0x80), 0x40)\n            calldatacopy(0x20, add(noteIndex, 0x40), 0x40)\n            mstore(0x120, sub(gen_order, c))\n            mstore(0x60, k)\n            mstore(0xc0, a)\n            let result := staticcall(gas(), 7, 0xe0, 0x60, 0x1a0, 0x40)\n            result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x120, 0x40))\n            result := and(result, staticcall(gas(), 7, 0x80, 0x60, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x120, 0x80, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x160, 0x80, b, 0x40))\n            if iszero(result)\n            {\n                mstore(0x00, 400)\n                revert(0x00, 0x20)\n            }\n            b := add(b, 0x40)\n        }\n        let expected := mod(keccak256(0x2e0, sub(b, 0x2e0)), gen_order)\n        if iszero(eq(expected, challenge))\n        {\n            mstore(0x00, 404)\n            revert(0x00, 0x20)\n        }\n    }\n    function validateCommitment(note, k, a)\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let gammaX := calldataload(add(note, 0x40))\n        let gammaY := calldataload(add(note, 0x60))\n        let sigmaX := calldataload(add(note, 0x80))\n        let sigmaY := calldataload(add(note, 0xa0))\n        if iszero(and(and(and(eq(mod(a, gen_order), a), gt(a, 1)), and(eq(mod(k, gen_order), k), gt(k, 1))), and(eq(addmod(mulmod(mulmod(sigmaX, sigmaX, field_order), sigmaX, field_order), 3, field_order), mulmod(sigmaY, sigmaY, field_order)), eq(addmod(mulmod(mulmod(gammaX, gammaX, field_order), gammaX, field_order), 3, field_order), mulmod(gammaY, gammaY, field_order)))))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function hashCommitments(notes, n)\n    {\n        for {\n            let i := 0\n        }\n        lt(i, n)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let index := add(add(notes, mul(i, 0xc0)), 0x60)\n            calldatacopy(add(0x300, mul(i, 0x80)), index, 0x80)\n        }\n        mstore(0x00, keccak256(0x300, mul(n, 0x80)))\n    }\n}"},"children":[],"id":5,"name":"InlineAssembly","src":"1216:12162:0"},{"children":[{"attributes":{"argumentTypes":null,"arguments":[null],"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[null],"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"member_name":"encodeAndExit","referencedDeclaration":20,"type":"function () pure"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":21,"type":"type(library BilateralSwapABIEncoder)","value":"BilateralSwapABIEncoder"},"id":6,"name":"Identifier","src":"13355:23:0"}],"id":8,"name":"MemberAccess","src":"13355:37:0"}],"id":9,"name":"FunctionCall","src":"13355:39:0"}],"id":10,"name":"ExpressionStatement","src":"13355:39:0"}],"id":11,"name":"Block","src":"1206:12195:0"}],"id":12,"name":"FunctionDefinition","src":"1186:12215:0"}],"id":13,"name":"ContractDefinition","src":"722:12681:0"}],"id":14,"name":"SourceUnit","src":"0:13404:0"}},"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/bilateralSwap/BilateralSwapABIEncoder.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/bilateralSwap/BilateralSwapABIEncoder.sol","exportedSymbols":{"BilateralSwapABIEncoder":[21]}},"children":[{"attributes":{"literals":["solidity",">=","0.5",".0","<","0.6",".0"]},"id":15,"name":"PragmaDirective","src":"0:31:1"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":"@title Library to ABI encode the output of a bilateral swap proof verification\n@author AZTEC\n@dev Don't include this as an internal library. This contract uses a static memory table to cache\nelliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`.\nExternal calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\nstorage and makes no external calls (other than to precompiles)\nCopyright Spilsbury Holdings Ltd 2019. All rights reserved.*","fullyImplemented":true,"linearizedBaseContracts":[21],"name":"BilateralSwapABIEncoder","scope":22},"children":[{"attributes":{"documentation":"Calldata map\n0x04:0x24      = calldata location of proofData byte array - pointer to the proofData. \n0x24:0x44      = message sender // sender\n0x44:0x64      = h_x     // crs\n0x64:0x84      = h_y     // crs\n0x84:0xa4      = t2_x0   // crs\n0xa4:0xc4      = t2_x1   // crs\n0xa4:0xc4      = t2_x1   // crs\n0xc4:0xe4      = t2_y0   // crs\n0xe4:0x104     = t2_y1   // crs\n0x104:0x124    = length of proofData byte array \n0x124:0x144    = challenge\n0x144:0x164    = offset in byte array to notes\n0x164:0x184    = offset in byte array to inputOwners\n0x184:0x1a4    = offset in byte array to outputOwners\n0x1a4:0x1c4    = offset in byte array to metadata*","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"encodeAndExit","scope":21,"stateMutability":"pure","superFunction":null,"visibility":"internal"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":16,"name":"ParameterList","src":"1506:2:1"},{"attributes":{"parameters":[null]},"children":[],"id":17,"name":"ParameterList","src":"1523:0:1"},{"children":[{"attributes":{"externalReferences":[null],"operations":"{\n    let notes := add(0x104, calldataload(0x144))\n    let noteOwners := add(0x124, calldataload(0x164))\n    let metadataPtr := add(0x144, calldataload(0x184))\n    if iszero(and(eq(0x02, calldataload(sub(metadataPtr, 0x20))), eq(0x04, calldataload(sub(noteOwners, 0x20)))))\n    {\n        revert(0x00, 0x00)\n    }\n    mstore(0x160, 0x20)\n    mstore(0x1a0, 0x02)\n    mstore(0x1c0, 0x80)\n    mstore(0x220, 0xc0)\n    mstore(0x240, 0x200)\n    mstore(0x260, 0x00)\n    mstore(0x280, 0x00)\n    mstore(0x2a0, calldataload(0x124))\n    mstore(0x2c0, 0x120)\n    mstore(0x2e0, 0x01)\n    mstore(0x300, 0x60)\n    mstore(0x00, 0x01)\n    calldatacopy(0x20, add(notes, 0x60), 0x80)\n    mstore(0x320, 0xc0)\n    mstore(0x340, 0x01)\n    mstore(0x360, calldataload(noteOwners))\n    mstore(0x380, keccak256(0x00, 0xa0))\n    mstore(0x3a0, 0x40)\n    mstore(0x3c0, or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(0x3e0, or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(0x420, 0x01)\n    mstore(0x440, 0x60)\n    calldatacopy(0x20, add(notes, 0x1e0), 0x80)\n    mstore(0x480, 0x01)\n    mstore(0x4a0, calldataload(add(noteOwners, 0x40)))\n    mstore(0x4c0, keccak256(0x00, 0xa0))\n    let metadataIndex := calldataload(metadataPtr)\n    let metadataLength := calldataload(add(sub(metadataPtr, 0x40), metadataIndex))\n    mstore(0x4e0, add(0x40, metadataLength))\n    mstore(0x500, or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(0x520, or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    calldatacopy(0x540, add(metadataIndex, sub(metadataPtr, 0x20)), metadataLength)\n    mstore(0x460, add(0xc0, metadataLength))\n    mstore(0x400, add(0x120, metadataLength))\n    mstore(0x200, add(0x320, metadataLength))\n    mstore(0x1e0, add(0x3c0, metadataLength))\n    let proofPtr := add(0x540, metadataLength)\n    mstore(add(proofPtr, 0x20), 0xc0)\n    mstore(add(proofPtr, 0x40), 0x200)\n    mstore(add(proofPtr, 0x60), 0x00)\n    mstore(add(proofPtr, 0x80), 0x00)\n    mstore(0xe0, calldataload(0x124))\n    mstore(add(proofPtr, 0xa0), keccak256(0xe0, 0x20))\n    mstore(add(proofPtr, 0xc0), 0x120)\n    mstore(add(proofPtr, 0xe0), 0x01)\n    mstore(add(proofPtr, 0x100), 0x60)\n    calldatacopy(0x20, add(notes, 0x2a0), 0x80)\n    mstore(add(proofPtr, 0x120), 0xc0)\n    mstore(add(proofPtr, 0x140), 0x01)\n    mstore(add(proofPtr, 0x160), calldataload(add(noteOwners, 0x60)))\n    mstore(add(proofPtr, 0x180), keccak256(0x00, 0xa0))\n    mstore(add(proofPtr, 0x1a0), 0x40)\n    mstore(add(proofPtr, 0x1c0), or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(add(proofPtr, 0x1e0), or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(add(proofPtr, 0x220), 0x01)\n    mstore(add(proofPtr, 0x240), 0x60)\n    calldatacopy(0x20, add(notes, 0x120), 0x80)\n    mstore(add(proofPtr, 0x280), 0x01)\n    mstore(add(proofPtr, 0x2a0), calldataload(add(noteOwners, 0x20)))\n    mstore(add(proofPtr, 0x2c0), keccak256(0x00, 0xa0))\n    metadataIndex := calldataload(add(metadataPtr, 0x20))\n    metadataLength := calldataload(add(sub(metadataPtr, 0x40), metadataIndex))\n    mstore(add(proofPtr, 0x2e0), add(0x40, metadataLength))\n    mstore(add(proofPtr, 0x300), or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    mstore(add(proofPtr, 0x320), or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n    calldatacopy(add(proofPtr, 0x340), add(metadataIndex, sub(metadataPtr, 0x20)), metadataLength)\n    mstore(add(proofPtr, 0x260), add(0xc0, metadataLength))\n    mstore(add(proofPtr, 0x200), add(0x120, metadataLength))\n    mstore(proofPtr, add(0x320, metadataLength))\n    mstore(0x180, add(add(0x3c0, metadataLength), mload(0x200)))\n    return(0x160, add(mload(0x180), 0x40))\n}"},"children":[],"id":18,"name":"InlineAssembly","src":"1533:26055:1"}],"id":19,"name":"Block","src":"1523:26065:1"}],"id":20,"name":"FunctionDefinition","src":"1484:26104:1"}],"id":21,"name":"ContractDefinition","src":"685:26905:1"}],"id":22,"name":"SourceUnit","src":"0:27591:1"}}},"version":"0.5.0+commit.1d4f565a.Linux.g++"}
