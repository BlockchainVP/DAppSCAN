{"contracts":{"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/dividendComputation/DividendComputation.sol:DividendComputation":{"abi":"[{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","bin":"608060405234801561001057600080fd5b5061080a806100206000396000f3fe608060405234801561001057600080fd5b50610019610023565b606060405261029c565b60443560805260643560a052610184356101040180357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101243506816101443506826101643506621000008211156100835761019060005260206000fd5b6210000081111561009a5761019060005260206000fd5b6024356102a052816102c052806102e0526100b58587610521565b608085026103000160005b60038110156102675760c081026020890101600060208201358760018511600181146100f3576000811461011057610115565b8a8b8a60c08803358e03098c8a60c0800189033509089350610115565b843593505b5089600051068a81850993508a81840992508a818b0991506020600020600052610140838587610472565b60406080860160e0376040808601602037818b0361012052836060528260c05260406101a0606060e060075afa60406101206060602060075afa8116905060406101606060608060075afa811690506040610160608061012060065afa81169050604088608061016060065afa8116905060008714156101fa57602051610260526040516102805260e0516101e052610100517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703610200525b600087111561023d578260605260406102206060602060075afa811690506040610260608061022060065afa8116905060406101e060806101a060065afa811690505b8015156102505761019060005260206000fd5b6040880197505050505050506001810190506100c0565b5061027260846102a1565b846102a082036102a0200684811415156102925761019460005260206000fd5b5050505050505050565b61046d565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781356020830135604084013560608501357f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81147f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83147f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c285147f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed87148415861588158a15171717171717171561037f5761019060005260206000fd5b6101e051602052610200516040527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6080527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26060527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c0527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a0526102605160e05261028051610100528361014052826101205281610180528061016052602080610180602060085afa60205115811517156104645761019060005260206000fd5b50505050505050565b61051c565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408301356060840135608085013560a086013584838409856003878789898a090908148582830986600388868a888909090814166001891189888b06141660018b118b898d061416161615156105115761019060005260206000fd5b505050505050505050565b61055d565b60005b8281101561054d57606060c0820283010160808160808402610300013750600181019050610524565b5060808202610300206000525050565b610565610567565b005b6101843561010401803560016101a435610124016101c435610124016101e4356101440160016101a05260606101c05260c0610200526000610240526000806102605261012435610280526102a0856020820152602086026102e00160005b878110156106915760c0810260208b0101600160005260806040820160203760c08352600160208401528735604084015260a06000206060840152604060808401527f800000000000000000000000000000000000000000000000000000000000000060016060830135160260408201351760a08401527f8000000000000000000000000000000000000000000000000000000000000000600160a0830135160260808201351760c08401528383036020830260408601015260e083019250506001810190506105c6565b50602082820303825281810360c00161022052809150868803602083015260208789030260400181019050865b888110156107af5760c0810260208b01016020898303028601358060408803013560016000526080604084016020378060c00185526001602086015260208b850302890135604086015260a060002060608601528060400160808601527f8000000000000000000000000000000000000000000000000000000000000000600160405116026020511760a08601527f8000000000000000000000000000000000000000000000000000000000000000600160805116026060511760c08601528060208903830160e087013785850360208c8603026040880101526020855101850194505050506001810190506106be565b5060208282030382526102a081038060a0016101e0528061010001610180526020610160528061014001610160f3fea165627a7a72305820f652371211f0a5638565040808af090dd79987903f86c8a3f2da3776913061fd0029","bin-runtime":"608060405234801561001057600080fd5b50610019610023565b606060405261029c565b60443560805260643560a052610184356101040180357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101243506816101443506826101643506621000008211156100835761019060005260206000fd5b6210000081111561009a5761019060005260206000fd5b6024356102a052816102c052806102e0526100b58587610521565b608085026103000160005b60038110156102675760c081026020890101600060208201358760018511600181146100f3576000811461011057610115565b8a8b8a60c08803358e03098c8a60c0800189033509089350610115565b843593505b5089600051068a81850993508a81840992508a818b0991506020600020600052610140838587610472565b60406080860160e0376040808601602037818b0361012052836060528260c05260406101a0606060e060075afa60406101206060602060075afa8116905060406101606060608060075afa811690506040610160608061012060065afa81169050604088608061016060065afa8116905060008714156101fa57602051610260526040516102805260e0516101e052610100517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703610200525b600087111561023d578260605260406102206060602060075afa811690506040610260608061022060065afa8116905060406101e060806101a060065afa811690505b8015156102505761019060005260206000fd5b6040880197505050505050506001810190506100c0565b5061027260846102a1565b846102a082036102a0200684811415156102925761019460005260206000fd5b5050505050505050565b61046d565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781356020830135604084013560608501357f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81147f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83147f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c285147f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed87148415861588158a15171717171717171561037f5761019060005260206000fd5b6101e051602052610200516040527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6080527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26060527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c0527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a0526102605160e05261028051610100528361014052826101205281610180528061016052602080610180602060085afa60205115811517156104645761019060005260206000fd5b50505050505050565b61051c565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408301356060840135608085013560a086013584838409856003878789898a090908148582830986600388868a888909090814166001891189888b06141660018b118b898d061416161615156105115761019060005260206000fd5b505050505050505050565b61055d565b60005b8281101561054d57606060c0820283010160808160808402610300013750600181019050610524565b5060808202610300206000525050565b610565610567565b005b6101843561010401803560016101a435610124016101c435610124016101e4356101440160016101a05260606101c05260c0610200526000610240526000806102605261012435610280526102a0856020820152602086026102e00160005b878110156106915760c0810260208b0101600160005260806040820160203760c08352600160208401528735604084015260a06000206060840152604060808401527f800000000000000000000000000000000000000000000000000000000000000060016060830135160260408201351760a08401527f8000000000000000000000000000000000000000000000000000000000000000600160a0830135160260808201351760c08401528383036020830260408601015260e083019250506001810190506105c6565b50602082820303825281810360c00161022052809150868803602083015260208789030260400181019050865b888110156107af5760c0810260208b01016020898303028601358060408803013560016000526080604084016020378060c00185526001602086015260208b850302890135604086015260a060002060608601528060400160808601527f8000000000000000000000000000000000000000000000000000000000000000600160405116026020511760a08601527f8000000000000000000000000000000000000000000000000000000000000000600160805116026060511760c08601528060208903830160e087013785850360208c8603026040880101526020855101850194505050506001810190506106be565b5060208282030382526102a081038060a0016101e0528061010001610180526020610160528061014001610160f3fea165627a7a72305820f652371211f0a5638565040808af090dd79987903f86c8a3f2da3776913061fd0029","srcmap":"779:18557:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;779:18557:0;;;;;;;","srcmap-runtime":"779:18557:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;779:18557:0;1590:29;;;;1899:4;1893;1886:18;2863:10328;;;3116:4;3103:18;3097:4;3090:32;3165:4;3152:18;3146:4;3139:32;3225:5;3212:19;3205:5;3201:31;3271:5;3258:19;3311:66;3452:9;3444:5;3431:19;3427:35;3515:9;3507:5;3494:19;3490:35;3577:9;3569:5;3556:19;3552:35;3656:7;3652:2;3649:15;3646:2;;;3700:3;3694:4;3687:17;3738:4;3732;3725:18;3646:2;3829:7;3825:2;3822:15;3819:2;;;3873:3;3867:4;3860:17;3911:4;3905;3898:18;3819:2;4353:4;4340:18;4333:5;4326:33;4390:2;4383:5;4376:17;4424:2;4417:5;4410:17;4445:25;4468:1;4461:5;4445:25;;;4515:4;4512:1;4508:12;4501:5;4497:24;4994:1;4979:7554;5004:1;5001;4998:8;4979:7554;;;5195:4;5192:1;5188:12;5181:4;5174:5;5170:16;5166:35;;6527:4;6516:9;6512:20;6499:34;6563:9;6607:1;6604;6601:8;6635:1;6630:753;;;;7410:1;7405:249;;;;6594:1060;;6630:753;7344:9;7281;7237:2;7188:4;7177:9;7173:20;7160:34;7149:9;7145:50;7097:194;7036:9;6992:2;6943:4;6937;6933:15;6922:9;6918:31;6905:45;6857:189;6813:541;6808:546;;6630:753;;7405:249;7622:9;7609:23;7604:28;;6594:1060;;7780:9;7773:4;7767:11;7763:27;7877:9;7874:1;7871;7864:23;7859:28;;7932:9;7929:1;7926;7919:23;7914:28;;7995:9;7992:1;7981:9;7974:31;7969:36;;8102:4;8096;8086:21;8080:4;8073:35;8242;8275:1;8272;8261:9;8242:35;;;8888:4;8881;8870:9;8866:20;8860:4;8847:46;8957:4;8950;8939:9;8935:20;8929:4;8916:46;9012:1;9001:9;8997:17;8990:5;8983:32;9049:1;9043:4;9036:15;9086:1;9080:4;9073:15;9686:4;9679:5;9673:4;9667;9664:1;9659:3;9648:43;9788:4;9781:5;9775:4;9769;9766:1;9761:3;9750:43;9742:6;9738:56;9728:66;;9890:4;9883:5;9877:4;9871;9868:1;9863:3;9852:43;9844:6;9840:56;9830:66;;10186:4;10179:5;10173:4;10166:5;10163:1;10158:3;10147:44;10139:6;10135:57;10125:67;;10607:4;10604:1;10598:4;10591:5;10588:1;10583:3;10572:40;10564:6;10560:53;10550:63;;11059:1;11056;11053:8;11050:2;;;11117:4;11111:11;11104:5;11097:26;11168:4;11162:11;11155:5;11148:26;11219:4;11213:11;11206:5;11199:26;11399:5;11393:12;11325:66;11321:85;11286:5;11250:186;11050:2;11746:1;11743;11740:8;11737:2;;;11797:1;11791:4;11784:15;11884:4;11877:5;11871:4;11865;11862:1;11857:3;11846:43;11838:6;11834:56;11824:66;;12068:4;12061:5;12055:4;12048:5;12045:1;12040:3;12029:44;12021:6;12017:57;12007:67;;12250:4;12243:5;12237:4;12230:5;12227:1;12222:3;12211:44;12203:6;12199:57;12189:67;;11737:2;12396:6;12389:14;12386:2;;;12419:3;12413:4;12406:17;12437:4;12431;12424:18;12386:2;12477:4;12474:1;12470:12;12465:17;;5029:7504;;;;;;5021:4;5018:1;5014:12;5009:17;;4979:7554;;;4983:14;12572:21;12588:4;12572:21;;;12960:9;12951:5;12948:1;12944:13;12937:5;12927:31;12923:47;13012:9;13002:8;12999:23;12992:31;12989:2;;;13116:3;13110:4;13103:17;13154:4;13148;13141:18;12989:2;2902:10289;;;;;;;;;;13426:2490;;;13492:66;13602:2;13589:16;13657:4;13653:2;13649:13;13636:27;13715:4;13711:2;13707:13;13694:27;13773:4;13769:2;13765:13;13752:27;14368:65;14360:6;14357:77;14267:66;14259:6;14256:78;14166:66;14158:6;14155:78;14065:66;14057:6;14054:78;14024:6;14017:14;13987:6;13980:14;13950:6;13943:14;13914:6;13907:14;13883:75;13880:115;13877:155;13874:259;13871:363;13868:467;13865:570;13862:2;;;14487:3;14481:4;14474:17;14525:4;14519;14512:18;13862:2;14900:5;14894:12;14888:4;14881:26;14966:5;14960:12;14954:4;14947:26;15026:66;15020:4;15013:80;15123:66;15117:4;15110:80;15220:66;15214:4;15207:80;15317:65;15311:4;15304:79;15419:5;15413:12;15407:4;15400:26;15486:5;15480:12;15473:5;15466:27;15547:6;15540:5;15533:21;15585:6;15578:5;15571:21;15623:6;15616:5;15609:21;15661:6;15654:5;15647:21;15739:4;15733;15726:5;15720:4;15717:1;15712:3;15701:43;15798:4;15792:11;15785:19;15775:7;15768:15;15765:40;15762:2;;;15841:3;15835:4;15828:17;15879:4;15873;15866:18;15762:2;13455:2461;;;;;;;;;16260:2026;;;16335:66;16437;16557:4;16551;16547:15;16534:29;16617:4;16611;16607:15;16594:29;16677:4;16671;16667:15;16654:29;16737:4;16731;16727:15;16714:29;18067:11;18059:6;18051;18044:35;17998:11;17959:1;17909:11;17901:6;17887:11;17879:6;17871;17864:35;17857:64;17813:197;17759:350;17687:11;17679:6;17671;17664:35;17618:11;17578:1;17527:11;17519:6;17505:11;17497:6;17489;17482:35;17475:64;17431:199;17377:352;17344:791;17225:1;17222;17219:8;17151:1;17139:9;17136:1;17132:17;17129:24;17092:200;16986:1;16983;16980:8;16912:1;16900:9;16897:1;16893:17;16890:24;16853:209;16820:498;16791:1366;16763:1412;16760:2;;;18211:3;18205:4;18198:17;18249:4;18243;18236:18;16760:2;16300:1986;;;;;;;;;;;18922:340;;;18990:1;18975:212;19000:1;18997;18994:8;18975:212;;;19091:4;19083;19080:1;19076:12;19069:5;19065:24;19061:35;19164:4;19157:5;19149:4;19146:1;19142:12;19135:5;19131:24;19118:51;19025:162;19017:4;19014:1;19010:12;19005:17;;18975:212;;;18979:14;19241:4;19238:1;19234:12;19227:5;19217:30;19211:4;19204:44;18957:305;;;;19282:45;:43;:45::i;:::-;779:18557;1519:9210:1;1668:5;1655:19;1648:5;1644:31;1710:5;1697:19;1738:1;1795:5;1782:19;1775:5;1771:31;1896:5;1883:19;1876:5;1872:31;1993:5;1980:19;1973:5;1969:31;3962:4;3955:5;3948:19;4041:4;4034:5;4027:19;4175:4;4168:5;4161:19;4314:4;4307:5;4300:19;4535:1;4563:7;4556:5;4549:22;4645:5;4632:19;4625:5;4618:34;4682:5;4783:1;4776:4;4766:8;4762:19;4755:30;4952:4;4949:1;4945:12;4938:5;4934:24;4987:1;4972:2108;4997:1;4994;4991:8;4972:2108;;;5086:4;5083:1;5079:12;5072:4;5065:5;5061:16;5057:35;5171:4;5165;5158:18;5261:4;5254;5243:9;5239:20;5233:4;5220:46;5359:4;5356:1;5349:15;5460:4;5453;5450:1;5446:12;5439:26;5566:11;5553:25;5546:4;5543:1;5539:12;5532:47;5695:4;5689;5679:21;5672:4;5669:1;5665:12;5658:43;5823:4;5816;5813:1;5809:12;5802:26;6175:66;6140:4;6132;6121:9;6117:20;6104:34;6100:45;6067:200;6035:4;6024:9;6020:20;6007:34;5979:310;5952:4;5949:1;5945:12;5917:390;6654:66;6619:4;6611;6600:9;6596:20;6583:34;6579:45;6546:200;6514:4;6503:9;6499:20;6486:34;6458:310;6431:4;6428:1;6424:12;6396:390;6941:8;6938:1;6934:16;6926:4;6923:1;6919:12;6912:4;6902:8;6898:19;6894:38;6887:64;7061:4;7058:1;7054:12;7049:17;;5022:2058;5014:4;5011:1;5007:12;5002:17;;4972:2108;;;4976:14;7268:4;7257:8;7254:1;7250:16;7246:27;7236:8;7229:45;7318:8;7315:1;7311:16;7305:4;7301:27;7294:5;7287:42;7401:1;7389:13;;7450:1;7447;7443:9;7436:4;7426:8;7422:19;7415:38;7535:4;7531:1;7528;7524:9;7520:20;7514:4;7510:31;7507:1;7503:39;7498:44;;7599:1;7584:2474;7609:1;7606;7603:8;7584:2474;;;7732:4;7729:1;7725:12;7718:4;7711:5;7707:16;7703:35;7861:4;7857:1;7854;7850:9;7846:20;7836:8;7832:35;7819:49;7985:13;7978:4;7968:8;7964:19;7960:39;7947:53;8031:4;8025;8018:18;8170:4;8163;8152:9;8148:20;8142:4;8129:46;8277:14;8271:4;8267:25;8264:1;8257:36;8389:4;8382;8379:1;8375:12;8368:26;8539:4;8535:1;8532;8528:9;8524:20;8510:12;8506:39;8493:53;8486:4;8483:1;8479:12;8472:75;8636:4;8630;8620:21;8613:4;8610:1;8606:12;8599:43;8750:14;8744:4;8740:25;8733:4;8730:1;8726:12;8719:47;9067:66;9032:4;9025;9019:11;9015:22;8982:177;8951:4;8945:11;8917:264;8890:4;8887:1;8883:12;8855:344;9476:66;9445:4;9438;9432:11;9428:22;9399:165;9372:4;9366:11;9342:240;9319:4;9316:1;9312:12;9288:312;9734:14;9726:4;9716:8;9712:19;9697:13;9693:39;9686:4;9683:1;9679:12;9666:83;9912:8;9909:1;9905:16;9897:4;9893:1;9890;9886:9;9882:20;9875:4;9865:8;9861:19;9857:46;9850:72;10038:4;10034:1;10028:8;10024:19;10021:1;10017:27;10012:32;;7634:2424;;;7626:4;7623:1;7619:12;7614:17;;7584:2474;;;7588:14;10180:4;10169:8;10166:1;10162:16;10158:27;10148:8;10141:45;10280:5;10277:1;10273:13;10493:11;10487:4;10483:22;10476:5;10469:37;10544:11;10537:5;10533:23;10526:5;10519:38;10626:4;10619:5;10612:19;10669:11;10662:5;10658:23;10651:5;10644:38"},"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/dividendComputation/DividendComputationABIEncoder.sol:DividendComputationABIEncoder":{"abi":"[]","bin":"604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a723058208b400c1ebb3250f8ded2bede082f29b4945a76fb0983675b1a23c315177cca590029","bin-runtime":"73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a723058208b400c1ebb3250f8ded2bede082f29b4945a76fb0983675b1a23c315177cca590029","srcmap":"701:10030:1:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24","srcmap-runtime":"701:10030:1:-;;;;;;;;"},"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/interfaces/DividendComputationInterface.sol:DividendComputationInterface":{"abi":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256[6]\"}],\"name\":\"validateDividendComputation\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","bin":"6101b0610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610610058576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063484b99d51461005d575b600080fd5b6100ff600480360361010081101561007457600080fd5b810190808035906020019064010000000081111561009157600080fd5b8201836020820111156100a357600080fd5b803590602001918460018302840111640100000000831117156100c557600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908060c00190919291929050505061017a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013f578082015181840152602081019050610124565b50505050905090810190601f16801561016c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606094935050505056fea165627a7a72305820e3e2a4bcdeecef508da7f9f90bb119fc5f25d6b6304a61608166c3761ca2b68f0029","bin-runtime":"7300000000000000000000000000000000000000003014608060405260043610610058576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063484b99d51461005d575b600080fd5b6100ff600480360361010081101561007457600080fd5b810190808035906020019064010000000081111561009157600080fd5b8201836020820111156100a357600080fd5b803590602001918460018302840111640100000000831117156100c557600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908060c00190919291929050505061017a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013f578082015181840152602081019050610124565b50505050905090810190601f16801561016c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606094935050505056fea165627a7a72305820e3e2a4bcdeecef508da7f9f90bb119fc5f25d6b6304a61608166c3761ca2b68f0029","srcmap":"33:224:2:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24","srcmap-runtime":"33:224:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;76:179;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;76:179:2;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;76:179:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;76:179:2;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;76:179:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;76:179:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;234:12;76:179;;;;;;:::o"}},"sourceList":["/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/dividendComputation/DividendComputation.sol","/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/dividendComputation/DividendComputationABIEncoder.sol","/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/interfaces/DividendComputationInterface.sol"],"sources":{"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/dividendComputation/DividendComputation.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/dividendComputation/DividendComputation.sol","exportedSymbols":{"DividendComputation":[14]}},"children":[{"attributes":{"literals":["solidity",">=","0.5",".0","<","0.6",".0"]},"id":1,"name":"PragmaDirective","src":"0:31:0"},{"attributes":{"SourceUnit":23,"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/dividendComputation/DividendComputationABIEncoder.sol","file":"./DividendComputationABIEncoder.sol","scope":15,"symbolAliases":[null],"unitAlias":""},"id":2,"name":"ImportDirective","src":"33:45:0"},{"attributes":{"SourceUnit":40,"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/interfaces/DividendComputationInterface.sol","file":"../../../interfaces/DividendComputationInterface.sol","scope":15,"symbolAliases":[null],"unitAlias":""},"id":3,"name":"ImportDirective","src":"79:62:0"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"contract","documentation":"@title Library to validate AZTEC dividend computation proofs\n@author AZTEC\n@dev Don't include this as an internal library. This contract uses a static memory table \nto cache elliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`. External calls to OptimizedAZTEC \ncan be treated as pure functions as this contract contains no storage and makes no external calls \n(other than to precompiles).\nCopyright Spilbury Holdings Ltd 2019. All rights reserved.*","fullyImplemented":true,"linearizedBaseContracts":[14],"name":"DividendComputation","scope":15},"children":[{"attributes":{"documentation":"@dev This will take any dividend calculation proof data and attempt to verify it in zero-knowledge\nIf the proof is not valid, the transaction will throw.\n@notice See DividendComputationInterface for how method calls should be constructed.\nDividendComputation is written in YUL to enable manual memory management and for other efficiency savings.*","implemented":true,"isConstructor":false,"kind":"fallback","modifiers":[null],"name":"","scope":14,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":4,"name":"ParameterList","src":"1253:2:0"},{"attributes":{"parameters":[null]},"children":[],"id":5,"name":"ParameterList","src":"1265:0:0"},{"children":[{"attributes":{"externalReferences":[null],"operations":"{\n    validateDividendComputation()\n    mstore(0x40, 0x60)\n    function validateDividendComputation()\n    {\n        mstore(0x80, calldataload(0x44))\n        mstore(0xa0, calldataload(0x64))\n        let notes := add(0x104, calldataload(0x184))\n        let n := calldataload(notes)\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let challenge := mod(calldataload(0x124), gen_order)\n        let za := mod(calldataload(0x144), gen_order)\n        let zb := mod(calldataload(0x164), gen_order)\n        if gt(za, 1048576)\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        if gt(zb, 1048576)\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        mstore(0x2a0, calldataload(0x24))\n        mstore(0x2c0, za)\n        mstore(0x2e0, zb)\n        hashCommitments(notes, n)\n        let b := add(0x300, mul(n, 0x80))\n        for {\n            let i := 0\n        }\n        lt(i, 3)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n            let k\n            let a := calldataload(add(noteIndex, 0x20))\n            let c := challenge\n            switch gt(i, 1)\n            case 1 {\n                k := addmod(mulmod(calldataload(sub(noteIndex, add(0xc0, 0xc0))), zb, gen_order), mulmod(sub(gen_order, calldataload(sub(noteIndex, 0xc0))), za, gen_order), gen_order)\n            }\n            case 0 {\n                k := calldataload(noteIndex)\n            }\n            let x := mod(mload(0x00), gen_order)\n            k := mulmod(k, x, gen_order)\n            a := mulmod(a, x, gen_order)\n            c := mulmod(challenge, x, gen_order)\n            mstore(0x00, keccak256(0x00, 0x20))\n            validateCommitment(noteIndex, k, a)\n            calldatacopy(0xe0, add(noteIndex, 0x80), 0x40)\n            calldatacopy(0x20, add(noteIndex, 0x40), 0x40)\n            mstore(0x120, sub(gen_order, c))\n            mstore(0x60, k)\n            mstore(0xc0, a)\n            let result := staticcall(gas(), 7, 0xe0, 0x60, 0x1a0, 0x40)\n            result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x120, 0x40))\n            result := and(result, staticcall(gas(), 7, 0x80, 0x60, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x120, 0x80, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x160, 0x80, b, 0x40))\n            if eq(i, 0)\n            {\n                mstore(0x260, mload(0x20))\n                mstore(0x280, mload(0x40))\n                mstore(0x1e0, mload(0xe0))\n                mstore(0x200, sub(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47, mload(0x100)))\n            }\n            if gt(i, 0)\n            {\n                mstore(0x60, c)\n                result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x220, 0x40))\n                result := and(result, staticcall(gas(), 6, 0x220, 0x80, 0x260, 0x40))\n                result := and(result, staticcall(gas(), 6, 0x1a0, 0x80, 0x1e0, 0x40))\n            }\n            if iszero(result)\n            {\n                mstore(0x00, 400)\n                revert(0x00, 0x20)\n            }\n            b := add(b, 0x40)\n        }\n        validatePairing(0x84)\n        let expected := mod(keccak256(0x2a0, sub(b, 0x2a0)), gen_order)\n        if iszero(eq(expected, challenge))\n        {\n            mstore(0x00, 404)\n            revert(0x00, 0x20)\n        }\n    }\n    function validatePairing(t2)\n    {\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let t2_x_1 := calldataload(t2)\n        let t2_x_2 := calldataload(add(t2, 0x20))\n        let t2_y_1 := calldataload(add(t2, 0x40))\n        let t2_y_2 := calldataload(add(t2, 0x60))\n        if or(or(or(or(or(or(or(iszero(t2_x_1), iszero(t2_x_2)), iszero(t2_y_1)), iszero(t2_y_2)), eq(t2_x_1, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)), eq(t2_x_2, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)), eq(t2_y_1, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)), eq(t2_y_2, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        mstore(0x20, mload(0x1e0))\n        mstore(0x40, mload(0x200))\n        mstore(0x80, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)\n        mstore(0x60, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)\n        mstore(0xc0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)\n        mstore(0xa0, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)\n        mstore(0xe0, mload(0x260))\n        mstore(0x100, mload(0x280))\n        mstore(0x140, t2_x_1)\n        mstore(0x120, t2_x_2)\n        mstore(0x180, t2_y_1)\n        mstore(0x160, t2_y_2)\n        let success := staticcall(gas(), 8, 0x20, 0x180, 0x20, 0x20)\n        if or(iszero(success), iszero(mload(0x20)))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function validateCommitment(note, k, a)\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let gammaX := calldataload(add(note, 0x40))\n        let gammaY := calldataload(add(note, 0x60))\n        let sigmaX := calldataload(add(note, 0x80))\n        let sigmaY := calldataload(add(note, 0xa0))\n        if iszero(and(and(and(eq(mod(a, gen_order), a), gt(a, 1)), and(eq(mod(k, gen_order), k), gt(k, 1))), and(eq(addmod(mulmod(mulmod(sigmaX, sigmaX, field_order), sigmaX, field_order), 3, field_order), mulmod(sigmaY, sigmaY, field_order)), eq(addmod(mulmod(mulmod(gammaX, gammaX, field_order), gammaX, field_order), 3, field_order), mulmod(gammaY, gammaY, field_order)))))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function hashCommitments(notes, n)\n    {\n        for {\n            let i := 0\n        }\n        lt(i, n)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let index := add(add(notes, mul(i, 0xc0)), 0x60)\n            calldatacopy(add(0x300, mul(i, 0x80)), index, 0x80)\n        }\n        mstore(0x00, keccak256(0x300, mul(n, 0x80)))\n    }\n}"},"children":[],"id":6,"name":"InlineAssembly","src":"1275:18036:0"},{"children":[{"attributes":{"argumentTypes":null,"arguments":[null],"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[null],"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"member_name":"encodeAndExit","referencedDeclaration":21,"type":"function () pure"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":22,"type":"type(library DividendComputationABIEncoder)","value":"DividendComputationABIEncoder"},"id":7,"name":"Identifier","src":"19282:29:0"}],"id":9,"name":"MemberAccess","src":"19282:43:0"}],"id":10,"name":"FunctionCall","src":"19282:45:0"}],"id":11,"name":"ExpressionStatement","src":"19282:45:0"}],"id":12,"name":"Block","src":"1265:18069:0"}],"id":13,"name":"FunctionDefinition","src":"1245:18089:0"}],"id":14,"name":"ContractDefinition","src":"779:18557:0"}],"id":15,"name":"SourceUnit","src":"0:19337:0"}},"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/dividendComputation/DividendComputationABIEncoder.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/ACE/validators/dividendComputation/DividendComputationABIEncoder.sol","exportedSymbols":{"DividendComputationABIEncoder":[22]}},"children":[{"attributes":{"literals":["solidity",">=","0.5",".0","<","0.6",".0"]},"id":16,"name":"PragmaDirective","src":"0:31:1"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":"@title Library to ABI encode the output of a dividend computation proof verification operation\n@author AZTEC\n@dev Don't include this as an internal library. This contract uses a static memory table to cache\nelliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`.\nExternal calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\nstorage and makes no external calls (other than to precompiles)\nCopyright Spilsbury Holdings Ltd 2019. All rights reserved.*","fullyImplemented":true,"linearizedBaseContracts":[22],"name":"DividendComputationABIEncoder","scope":23},"children":[{"attributes":{"documentation":"New calldata map\n0x04:0x24      = calldata location of proofData byte array  // proof data byte array\n0x24:0x44      = message sender // address\n0x44:0x64      = h_x     // crs\n0x64:0x84      = h_y     // crs\n0x84:0xa4      = t2_x0   // crs\n0xa4:0xc4      = t2_x1   // crs\n0xc4:0xe4      = t2_y0   // crs\n0xe4:0x104     = t2_y1   // crs\n0x104:0x124    = length of proofData byte array\n0x124:0x144    = challenge\n0x144:0x164    = za\n0x164:0x184    = zb\n0x184:0x1a4    = offset in byte array to notes\n0x1a4:0x1c4    = offset in byte array to inputOwners\n0x1c4:0x1e4    = offset in byte array to outputOwners\n0x1e4:0x204    = offset in byte array to metadata","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"encodeAndExit","scope":22,"stateMutability":"pure","superFunction":null,"visibility":"internal"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":17,"name":"ParameterList","src":"1541:2:1"},{"attributes":{"parameters":[null]},"children":[],"id":18,"name":"ParameterList","src":"1558:0:1"},{"children":[{"attributes":{"externalReferences":[null],"operations":"{\n    let notes := add(0x104, calldataload(0x184))\n    let n := calldataload(notes)\n    let m := 1\n    let inputOwners := add(0x124, calldataload(0x1a4))\n    let outputOwners := add(0x124, calldataload(0x1c4))\n    let metadata := add(0x144, calldataload(0x1e4))\n    mstore(0x1a0, 0x01)\n    mstore(0x1c0, 0x60)\n    mstore(0x200, 0xc0)\n    mstore(0x240, 0x00)\n    let kPublic := 0\n    mstore(0x260, kPublic)\n    mstore(0x280, calldataload(0x124))\n    let inputPtr := 0x2a0\n    mstore(add(inputPtr, 0x20), m)\n    let s := add(0x2e0, mul(m, 0x20))\n    for {\n        let i := 0\n    }\n    lt(i, m)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        mstore(0x00, 0x01)\n        calldatacopy(0x20, add(noteIndex, 0x40), 0x80)\n        mstore(s, 0xc0)\n        mstore(add(s, 0x20), 0x01)\n        mstore(add(s, 0x40), calldataload(inputOwners))\n        mstore(add(s, 0x60), keccak256(0x00, 0xa0))\n        mstore(add(s, 0x80), 0x40)\n        mstore(add(s, 0xa0), or(calldataload(add(noteIndex, 0x40)), mul(and(calldataload(add(noteIndex, 0x60)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xc0), or(calldataload(add(noteIndex, 0x80)), mul(and(calldataload(add(noteIndex, 0xa0)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(add(inputPtr, 0x40), mul(i, 0x20)), sub(s, inputPtr))\n        s := add(s, 0xe0)\n    }\n    mstore(inputPtr, sub(sub(s, inputPtr), 0x20))\n    mstore(0x220, add(0xc0, sub(s, inputPtr)))\n    inputPtr := s\n    mstore(add(inputPtr, 0x20), sub(n, m))\n    s := add(s, add(0x40, mul(sub(n, m), 0x20)))\n    for {\n        let i := m\n    }\n    lt(i, n)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        let metadataIndex := calldataload(add(metadata, mul(sub(i, m), 0x20)))\n        let metadataLength := calldataload(add(sub(metadata, 0x40), metadataIndex))\n        mstore(0x00, 0x01)\n        calldatacopy(0x20, add(noteIndex, 0x40), 0x80)\n        mstore(s, add(0xc0, metadataLength))\n        mstore(add(s, 0x20), 0x01)\n        mstore(add(s, 0x40), calldataload(add(outputOwners, mul(sub(i, m), 0x20))))\n        mstore(add(s, 0x60), keccak256(0x00, 0xa0))\n        mstore(add(s, 0x80), add(0x40, metadataLength))\n        mstore(add(s, 0xa0), or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xc0), or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        calldatacopy(add(s, 0xe0), add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n        mstore(add(add(inputPtr, 0x40), mul(sub(i, m), 0x20)), sub(s, inputPtr))\n        s := add(s, add(mload(s), 0x20))\n    }\n    mstore(inputPtr, sub(sub(s, inputPtr), 0x20))\n    let notesLength := sub(s, 0x2a0)\n    mstore(0x1e0, add(0xa0, notesLength))\n    mstore(0x180, add(0x100, notesLength))\n    mstore(0x160, 0x20)\n    return(0x160, add(0x140, notesLength))\n}"},"children":[],"id":19,"name":"InlineAssembly","src":"1568:9161:1"}],"id":20,"name":"Block","src":"1558:9171:1"}],"id":21,"name":"FunctionDefinition","src":"1519:9210:1"}],"id":22,"name":"ContractDefinition","src":"701:10030:1"}],"id":23,"name":"SourceUnit","src":"0:10732:1"}},"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/interfaces/DividendComputationInterface.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-AZTEC_Protocol/AZTEC-7a020f4ced9680f6e4a452fe570671aac0802471/packages/protocol/contracts/interfaces/DividendComputationInterface.sol","exportedSymbols":{"DividendComputationInterface":[39]}},"children":[{"attributes":{"literals":["solidity",">=","0.5",".0","<","0.6",".0"]},"id":24,"name":"PragmaDirective","src":"0:31:2"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":null,"fullyImplemented":true,"linearizedBaseContracts":[39],"name":"DividendComputationInterface","scope":40},"children":[{"attributes":{"documentation":null,"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"validateDividendComputation","scope":39,"stateMutability":"pure","superFunction":null,"visibility":"external"},"children":[{"children":[{"attributes":{"constant":false,"name":"","scope":38,"stateVariable":false,"storageLocation":"calldata","type":"bytes","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes","type":"bytes"},"id":25,"name":"ElementaryTypeName","src":"122:5:2"}],"id":26,"name":"VariableDeclaration","src":"122:14:2"},{"attributes":{"constant":false,"name":"","scope":38,"stateVariable":false,"storageLocation":"default","type":"address","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"address","stateMutability":"nonpayable","type":"address"},"id":27,"name":"ElementaryTypeName","src":"146:7:2"}],"id":28,"name":"VariableDeclaration","src":"146:7:2"},{"attributes":{"constant":false,"name":"","scope":38,"stateVariable":false,"storageLocation":"calldata","type":"uint256[6]","value":null,"visibility":"internal"},"children":[{"attributes":{"type":"uint256[6]"},"children":[{"attributes":{"name":"uint","type":"uint256"},"id":29,"name":"ElementaryTypeName","src":"163:4:2"},{"attributes":{"argumentTypes":null,"hexvalue":"36","isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"subdenomination":null,"token":"number","type":null,"value":"6"},"id":30,"name":"Literal","src":"168:1:2"}],"id":31,"name":"ArrayTypeName","src":"163:7:2"}],"id":32,"name":"VariableDeclaration","src":"163:16:2"}],"id":33,"name":"ParameterList","src":"112:73:2"},{"children":[{"attributes":{"constant":false,"name":"","scope":38,"stateVariable":false,"storageLocation":"memory","type":"bytes","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes","type":"bytes"},"id":34,"name":"ElementaryTypeName","src":"234:5:2"}],"id":35,"name":"VariableDeclaration","src":"234:12:2"}],"id":36,"name":"ParameterList","src":"233:14:2"},{"attributes":{"statements":[null]},"children":[],"id":37,"name":"Block","src":"253:2:2"}],"id":38,"name":"FunctionDefinition","src":"76:179:2"}],"id":39,"name":"ContractDefinition","src":"33:224:2"}],"id":40,"name":"SourceUnit","src":"0:258:2"}}},"version":"0.5.0+commit.1d4f565a.Linux.g++"}
