{"contracts":{"/home/sdb/yemx6/solc-DApp/labeledCode/Coinbae-Barnbridge_YieldFarmLP/YieldFarm0xB3F7abF8FA1Df0fF61C5AC38d35e20490419f4bb/@openzeppelin/contracts/math/SafeMath.sol:SafeMath":{"abi":"[]","bin":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ab6e5763788fbe076a663192693ae6b580a1b0c3515cb290a79d13b5a03fa12064736f6c63430006000033","bin-runtime":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ab6e5763788fbe076a663192693ae6b580a1b0c3515cb290a79d13b5a03fa12064736f6c63430006000033","srcmap":"622:4578:0:-:0;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24","srcmap-runtime":"622:4578:0:-:0;;;;;;;;"}},"sourceList":["/home/sdb/yemx6/solc-DApp/labeledCode/Coinbae-Barnbridge_YieldFarmLP/YieldFarm0xB3F7abF8FA1Df0fF61C5AC38d35e20490419f4bb/@openzeppelin/contracts/math/SafeMath.sol"],"sources":{"/home/sdb/yemx6/solc-DApp/labeledCode/Coinbae-Barnbridge_YieldFarmLP/YieldFarm0xB3F7abF8FA1Df0fF61C5AC38d35e20490419f4bb/@openzeppelin/contracts/math/SafeMath.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Coinbae-Barnbridge_YieldFarmLP/YieldFarm0xB3F7abF8FA1Df0fF61C5AC38d35e20490419f4bb/@openzeppelin/contracts/math/SafeMath.sol","exportedSymbols":{"SafeMath":[186]}},"children":[{"attributes":{"literals":["solidity","^","0.6",".0"]},"id":1,"name":"PragmaDirective","src":"33:23:0"},{"attributes":{"abstract":false,"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":"@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always.","fullyImplemented":true,"linearizedBaseContracts":[186],"name":"SafeMath","scope":187},"children":[{"attributes":{"documentation":"@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `+` operator.\n     * Requirements:\n     * - Addition cannot overflow.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"add","overrides":null,"scope":186,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":26,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":2,"name":"ElementaryTypeName","src":"887:7:0"}],"id":3,"name":"VariableDeclaration","src":"887:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":26,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":4,"name":"ElementaryTypeName","src":"898:7:0"}],"id":5,"name":"VariableDeclaration","src":"898:9:0"}],"id":6,"name":"ParameterList","src":"886:22:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":26,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":7,"name":"ElementaryTypeName","src":"932:7:0"}],"id":8,"name":"VariableDeclaration","src":"932:7:0"}],"id":9,"name":"ParameterList","src":"931:9:0"},{"children":[{"attributes":{"assignments":[11]},"children":[{"attributes":{"constant":false,"name":"c","overrides":null,"scope":25,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":10,"name":"ElementaryTypeName","src":"951:7:0"}],"id":11,"name":"VariableDeclaration","src":"951:9:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"+","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":3,"type":"uint256","value":"a"},"id":12,"name":"Identifier","src":"963:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":5,"type":"uint256","value":"b"},"id":13,"name":"Identifier","src":"967:1:0"}],"id":14,"name":"BinaryOperation","src":"963:5:0"}],"id":15,"name":"VariableDeclarationStatement","src":"951:17:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""}],"overloadedDeclarations":[204,205],"referencedDeclaration":205,"type":"function (bool,string memory) pure","value":"require"},"id":16,"name":"Identifier","src":"978:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":">=","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":11,"type":"uint256","value":"c"},"id":17,"name":"Identifier","src":"986:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":3,"type":"uint256","value":"a"},"id":18,"name":"Identifier","src":"991:1:0"}],"id":19,"name":"BinaryOperation","src":"986:6:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206164646974696f6e206f766572666c6f77","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: addition overflow\"","value":"SafeMath: addition overflow"},"id":20,"name":"Literal","src":"994:29:0"}],"id":21,"name":"FunctionCall","src":"978:46:0"}],"id":22,"name":"ExpressionStatement","src":"978:46:0"},{"attributes":{"functionReturnParameters":9},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":11,"type":"uint256","value":"c"},"id":23,"name":"Identifier","src":"1042:1:0"}],"id":24,"name":"Return","src":"1035:8:0"}],"id":25,"name":"Block","src":"941:109:0"}],"id":26,"name":"FunctionDefinition","src":"874:176:0"},{"attributes":{"documentation":"@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n     * - Subtraction cannot overflow.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"sub","overrides":null,"scope":186,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":42,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":27,"name":"ElementaryTypeName","src":"1334:7:0"}],"id":28,"name":"VariableDeclaration","src":"1334:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":42,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":29,"name":"ElementaryTypeName","src":"1345:7:0"}],"id":30,"name":"VariableDeclaration","src":"1345:9:0"}],"id":31,"name":"ParameterList","src":"1333:22:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":42,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":32,"name":"ElementaryTypeName","src":"1379:7:0"}],"id":33,"name":"VariableDeclaration","src":"1379:7:0"}],"id":34,"name":"ParameterList","src":"1378:9:0"},{"children":[{"attributes":{"functionReturnParameters":34},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"uint256","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""}],"overloadedDeclarations":[42,69],"referencedDeclaration":69,"type":"function (uint256,uint256,string memory) pure returns (uint256)","value":"sub"},"id":35,"name":"Identifier","src":"1405:3:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":28,"type":"uint256","value":"a"},"id":36,"name":"Identifier","src":"1409:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":30,"type":"uint256","value":"b"},"id":37,"name":"Identifier","src":"1412:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a207375627472616374696f6e206f766572666c6f77","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: subtraction overflow\"","value":"SafeMath: subtraction overflow"},"id":38,"name":"Literal","src":"1415:32:0"}],"id":39,"name":"FunctionCall","src":"1405:43:0"}],"id":40,"name":"Return","src":"1398:50:0"}],"id":41,"name":"Block","src":"1388:67:0"}],"id":42,"name":"FunctionDefinition","src":"1321:134:0"},{"attributes":{"documentation":"@dev Returns the subtraction of two unsigned integers, reverting with custom message on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n     * - Subtraction cannot overflow.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"sub","overrides":null,"scope":186,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":69,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":43,"name":"ElementaryTypeName","src":"1759:7:0"}],"id":44,"name":"VariableDeclaration","src":"1759:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":69,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":45,"name":"ElementaryTypeName","src":"1770:7:0"}],"id":46,"name":"VariableDeclaration","src":"1770:9:0"},{"attributes":{"constant":false,"name":"errorMessage","overrides":null,"scope":69,"stateVariable":false,"storageLocation":"memory","type":"string","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"string","type":"string"},"id":47,"name":"ElementaryTypeName","src":"1781:6:0"}],"id":48,"name":"VariableDeclaration","src":"1781:26:0"}],"id":49,"name":"ParameterList","src":"1758:50:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":69,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":50,"name":"ElementaryTypeName","src":"1832:7:0"}],"id":51,"name":"VariableDeclaration","src":"1832:7:0"}],"id":52,"name":"ParameterList","src":"1831:9:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"overloadedDeclarations":[204,205],"referencedDeclaration":205,"type":"function (bool,string memory) pure","value":"require"},"id":53,"name":"Identifier","src":"1851:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"<=","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":46,"type":"uint256","value":"b"},"id":54,"name":"Identifier","src":"1859:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":44,"type":"uint256","value":"a"},"id":55,"name":"Identifier","src":"1864:1:0"}],"id":56,"name":"BinaryOperation","src":"1859:6:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":48,"type":"string memory","value":"errorMessage"},"id":57,"name":"Identifier","src":"1867:12:0"}],"id":58,"name":"FunctionCall","src":"1851:29:0"}],"id":59,"name":"ExpressionStatement","src":"1851:29:0"},{"attributes":{"assignments":[61]},"children":[{"attributes":{"constant":false,"name":"c","overrides":null,"scope":68,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":60,"name":"ElementaryTypeName","src":"1890:7:0"}],"id":61,"name":"VariableDeclaration","src":"1890:9:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"-","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":44,"type":"uint256","value":"a"},"id":62,"name":"Identifier","src":"1902:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":46,"type":"uint256","value":"b"},"id":63,"name":"Identifier","src":"1906:1:0"}],"id":64,"name":"BinaryOperation","src":"1902:5:0"}],"id":65,"name":"VariableDeclarationStatement","src":"1890:17:0"},{"attributes":{"functionReturnParameters":52},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":61,"type":"uint256","value":"c"},"id":66,"name":"Identifier","src":"1925:1:0"}],"id":67,"name":"Return","src":"1918:8:0"}],"id":68,"name":"Block","src":"1841:92:0"}],"id":69,"name":"FunctionDefinition","src":"1746:187:0"},{"attributes":{"documentation":"@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `*` operator.\n     * Requirements:\n     * - Multiplication cannot overflow.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"mul","overrides":null,"scope":186,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":103,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":70,"name":"ElementaryTypeName","src":"2193:7:0"}],"id":71,"name":"VariableDeclaration","src":"2193:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":103,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":72,"name":"ElementaryTypeName","src":"2204:7:0"}],"id":73,"name":"VariableDeclaration","src":"2204:9:0"}],"id":74,"name":"ParameterList","src":"2192:22:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":103,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":75,"name":"ElementaryTypeName","src":"2238:7:0"}],"id":76,"name":"VariableDeclaration","src":"2238:7:0"}],"id":77,"name":"ParameterList","src":"2237:9:0"},{"children":[{"attributes":{"falseBody":null},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"==","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":71,"type":"uint256","value":"a"},"id":78,"name":"Identifier","src":"2479:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":79,"name":"Literal","src":"2484:1:0"}],"id":80,"name":"BinaryOperation","src":"2479:6:0"},{"children":[{"attributes":{"functionReturnParameters":77},"children":[{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":81,"name":"Literal","src":"2508:1:0"}],"id":82,"name":"Return","src":"2501:8:0"}],"id":83,"name":"Block","src":"2487:33:0"}],"id":84,"name":"IfStatement","src":"2475:45:0"},{"attributes":{"assignments":[86]},"children":[{"attributes":{"constant":false,"name":"c","overrides":null,"scope":102,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":85,"name":"ElementaryTypeName","src":"2530:7:0"}],"id":86,"name":"VariableDeclaration","src":"2530:9:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"*","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":71,"type":"uint256","value":"a"},"id":87,"name":"Identifier","src":"2542:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":73,"type":"uint256","value":"b"},"id":88,"name":"Identifier","src":"2546:1:0"}],"id":89,"name":"BinaryOperation","src":"2542:5:0"}],"id":90,"name":"VariableDeclarationStatement","src":"2530:17:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""}],"overloadedDeclarations":[204,205],"referencedDeclaration":205,"type":"function (bool,string memory) pure","value":"require"},"id":91,"name":"Identifier","src":"2557:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"==","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"/","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":86,"type":"uint256","value":"c"},"id":92,"name":"Identifier","src":"2565:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":71,"type":"uint256","value":"a"},"id":93,"name":"Identifier","src":"2569:1:0"}],"id":94,"name":"BinaryOperation","src":"2565:5:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":73,"type":"uint256","value":"b"},"id":95,"name":"Identifier","src":"2574:1:0"}],"id":96,"name":"BinaryOperation","src":"2565:10:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: multiplication overflow\"","value":"SafeMath: multiplication overflow"},"id":97,"name":"Literal","src":"2577:35:0"}],"id":98,"name":"FunctionCall","src":"2557:56:0"}],"id":99,"name":"ExpressionStatement","src":"2557:56:0"},{"attributes":{"functionReturnParameters":77},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":86,"type":"uint256","value":"c"},"id":100,"name":"Identifier","src":"2631:1:0"}],"id":101,"name":"Return","src":"2624:8:0"}],"id":102,"name":"Block","src":"2247:392:0"}],"id":103,"name":"FunctionDefinition","src":"2180:459:0"},{"attributes":{"documentation":"@dev Returns the integer division of two unsigned integers. Reverts on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"div","overrides":null,"scope":186,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":119,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":104,"name":"ElementaryTypeName","src":"3114:7:0"}],"id":105,"name":"VariableDeclaration","src":"3114:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":119,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":106,"name":"ElementaryTypeName","src":"3125:7:0"}],"id":107,"name":"VariableDeclaration","src":"3125:9:0"}],"id":108,"name":"ParameterList","src":"3113:22:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":119,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":109,"name":"ElementaryTypeName","src":"3159:7:0"}],"id":110,"name":"VariableDeclaration","src":"3159:7:0"}],"id":111,"name":"ParameterList","src":"3158:9:0"},{"children":[{"attributes":{"functionReturnParameters":111},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"uint256","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""}],"overloadedDeclarations":[119,146],"referencedDeclaration":146,"type":"function (uint256,uint256,string memory) pure returns (uint256)","value":"div"},"id":112,"name":"Identifier","src":"3185:3:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":105,"type":"uint256","value":"a"},"id":113,"name":"Identifier","src":"3189:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":107,"type":"uint256","value":"b"},"id":114,"name":"Identifier","src":"3192:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206469766973696f6e206279207a65726f","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: division by zero\"","value":"SafeMath: division by zero"},"id":115,"name":"Literal","src":"3195:28:0"}],"id":116,"name":"FunctionCall","src":"3185:39:0"}],"id":117,"name":"Return","src":"3178:46:0"}],"id":118,"name":"Block","src":"3168:63:0"}],"id":119,"name":"FunctionDefinition","src":"3101:130:0"},{"attributes":{"documentation":"@dev Returns the integer division of two unsigned integers. Reverts with custom message on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"div","overrides":null,"scope":186,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":146,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":120,"name":"ElementaryTypeName","src":"3726:7:0"}],"id":121,"name":"VariableDeclaration","src":"3726:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":146,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":122,"name":"ElementaryTypeName","src":"3737:7:0"}],"id":123,"name":"VariableDeclaration","src":"3737:9:0"},{"attributes":{"constant":false,"name":"errorMessage","overrides":null,"scope":146,"stateVariable":false,"storageLocation":"memory","type":"string","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"string","type":"string"},"id":124,"name":"ElementaryTypeName","src":"3748:6:0"}],"id":125,"name":"VariableDeclaration","src":"3748:26:0"}],"id":126,"name":"ParameterList","src":"3725:50:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":146,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":127,"name":"ElementaryTypeName","src":"3799:7:0"}],"id":128,"name":"VariableDeclaration","src":"3799:7:0"}],"id":129,"name":"ParameterList","src":"3798:9:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"overloadedDeclarations":[204,205],"referencedDeclaration":205,"type":"function (bool,string memory) pure","value":"require"},"id":130,"name":"Identifier","src":"3818:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":">","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":123,"type":"uint256","value":"b"},"id":131,"name":"Identifier","src":"3826:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":132,"name":"Literal","src":"3830:1:0"}],"id":133,"name":"BinaryOperation","src":"3826:5:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":125,"type":"string memory","value":"errorMessage"},"id":134,"name":"Identifier","src":"3833:12:0"}],"id":135,"name":"FunctionCall","src":"3818:28:0"}],"id":136,"name":"ExpressionStatement","src":"3818:28:0"},{"attributes":{"assignments":[138]},"children":[{"attributes":{"constant":false,"name":"c","overrides":null,"scope":145,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":137,"name":"ElementaryTypeName","src":"3856:7:0"}],"id":138,"name":"VariableDeclaration","src":"3856:9:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"/","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":121,"type":"uint256","value":"a"},"id":139,"name":"Identifier","src":"3868:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":123,"type":"uint256","value":"b"},"id":140,"name":"Identifier","src":"3872:1:0"}],"id":141,"name":"BinaryOperation","src":"3868:5:0"}],"id":142,"name":"VariableDeclarationStatement","src":"3856:17:0"},{"attributes":{"functionReturnParameters":129},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":138,"type":"uint256","value":"c"},"id":143,"name":"Identifier","src":"3977:1:0"}],"id":144,"name":"Return","src":"3970:8:0"}],"id":145,"name":"Block","src":"3808:177:0"}],"id":146,"name":"FunctionDefinition","src":"3713:272:0"},{"attributes":{"documentation":"@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"mod","overrides":null,"scope":186,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":162,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":147,"name":"ElementaryTypeName","src":"4449:7:0"}],"id":148,"name":"VariableDeclaration","src":"4449:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":162,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":149,"name":"ElementaryTypeName","src":"4460:7:0"}],"id":150,"name":"VariableDeclaration","src":"4460:9:0"}],"id":151,"name":"ParameterList","src":"4448:22:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":162,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":152,"name":"ElementaryTypeName","src":"4494:7:0"}],"id":153,"name":"VariableDeclaration","src":"4494:7:0"}],"id":154,"name":"ParameterList","src":"4493:9:0"},{"children":[{"attributes":{"functionReturnParameters":154},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"uint256","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""}],"overloadedDeclarations":[162,185],"referencedDeclaration":185,"type":"function (uint256,uint256,string memory) pure returns (uint256)","value":"mod"},"id":155,"name":"Identifier","src":"4520:3:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":148,"type":"uint256","value":"a"},"id":156,"name":"Identifier","src":"4524:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":150,"type":"uint256","value":"b"},"id":157,"name":"Identifier","src":"4527:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206d6f64756c6f206279207a65726f","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: modulo by zero\"","value":"SafeMath: modulo by zero"},"id":158,"name":"Literal","src":"4530:26:0"}],"id":159,"name":"FunctionCall","src":"4520:37:0"}],"id":160,"name":"Return","src":"4513:44:0"}],"id":161,"name":"Block","src":"4503:61:0"}],"id":162,"name":"FunctionDefinition","src":"4436:128:0"},{"attributes":{"documentation":"@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts with custom message when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"mod","overrides":null,"scope":186,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":185,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":163,"name":"ElementaryTypeName","src":"5048:7:0"}],"id":164,"name":"VariableDeclaration","src":"5048:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":185,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":165,"name":"ElementaryTypeName","src":"5059:7:0"}],"id":166,"name":"VariableDeclaration","src":"5059:9:0"},{"attributes":{"constant":false,"name":"errorMessage","overrides":null,"scope":185,"stateVariable":false,"storageLocation":"memory","type":"string","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"string","type":"string"},"id":167,"name":"ElementaryTypeName","src":"5070:6:0"}],"id":168,"name":"VariableDeclaration","src":"5070:26:0"}],"id":169,"name":"ParameterList","src":"5047:50:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":185,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":170,"name":"ElementaryTypeName","src":"5121:7:0"}],"id":171,"name":"VariableDeclaration","src":"5121:7:0"}],"id":172,"name":"ParameterList","src":"5120:9:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"overloadedDeclarations":[204,205],"referencedDeclaration":205,"type":"function (bool,string memory) pure","value":"require"},"id":173,"name":"Identifier","src":"5140:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"!=","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":166,"type":"uint256","value":"b"},"id":174,"name":"Identifier","src":"5148:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":175,"name":"Literal","src":"5153:1:0"}],"id":176,"name":"BinaryOperation","src":"5148:6:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":168,"type":"string memory","value":"errorMessage"},"id":177,"name":"Identifier","src":"5156:12:0"}],"id":178,"name":"FunctionCall","src":"5140:29:0"}],"id":179,"name":"ExpressionStatement","src":"5140:29:0"},{"attributes":{"functionReturnParameters":172},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"%","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":164,"type":"uint256","value":"a"},"id":180,"name":"Identifier","src":"5186:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":166,"type":"uint256","value":"b"},"id":181,"name":"Identifier","src":"5190:1:0"}],"id":182,"name":"BinaryOperation","src":"5186:5:0"}],"id":183,"name":"Return","src":"5179:12:0"}],"id":184,"name":"Block","src":"5130:68:0"}],"id":185,"name":"FunctionDefinition","src":"5035:163:0"}],"id":186,"name":"ContractDefinition","src":"622:4578:0"}],"id":187,"name":"SourceUnit","src":"33:5168:0"}}},"version":"0.6.0+commit.26b70077.Linux.g++"}
