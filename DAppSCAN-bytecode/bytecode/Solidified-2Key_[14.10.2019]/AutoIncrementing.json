{"contracts":{"/home/sdb/yemx6/solc-DApp/labeledCode/Solidified-2Key_[14.10.2019]/contracts-de171eb80e9ce1c6566a5d782f0a0549ab0151ad/contracts/openzeppelin-solidity/contracts/AutoIncrementing.sol:AutoIncrementing":{"abi":"[]","bin":"604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820a97907fd3a32a015af73ea9c037e78c72edcebf6f76ac293d681ae1a3f5e8bcb0029","bin-runtime":"73000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820a97907fd3a32a015af73ea9c037e78c72edcebf6f76ac293d681ae1a3f5e8bcb0029","srcmap":"693:245:0:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24","srcmap-runtime":"693:245:0:-;;;;;;;;"}},"sourceList":["/home/sdb/yemx6/solc-DApp/labeledCode/Solidified-2Key_[14.10.2019]/contracts-de171eb80e9ce1c6566a5d782f0a0549ab0151ad/contracts/openzeppelin-solidity/contracts/AutoIncrementing.sol"],"sources":{"/home/sdb/yemx6/solc-DApp/labeledCode/Solidified-2Key_[14.10.2019]/contracts-de171eb80e9ce1c6566a5d782f0a0549ab0151ad/contracts/openzeppelin-solidity/contracts/AutoIncrementing.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Solidified-2Key_[14.10.2019]/contracts-de171eb80e9ce1c6566a5d782f0a0549ab0151ad/contracts/openzeppelin-solidity/contracts/AutoIncrementing.sol","exportedSymbols":{"AutoIncrementing":[25]}},"children":[{"attributes":{"literals":["solidity","^","0.4",".24"]},"id":1,"name":"PragmaDirective","src":"0:24:0"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":"@title AutoIncrementing\n@author Matt Condon (@shrugs)\n@dev Provides an auto-incrementing uint256 id acquired by the `Counter#nextId` getter.\nUse this for issuing ERC721Token ids or keeping track of request ids, anything you want, really.\n * Include with `using AutoIncrementing for AutoIncrementing.Counter;`\n@notice Does not allow an Id of 0, which is popularly used to signify a null state in solidity.\nDoes not protect from overflows, but if you have 2^256 ids, you have other problems.\n(But actually, it's generally impossible to increment a counter this many times, energy wise\nso it's not something you have to worry about.)","fullyImplemented":true,"linearizedBaseContracts":[25],"name":"AutoIncrementing","scope":26},"children":[{"attributes":{"canonicalName":"AutoIncrementing.Counter","name":"Counter","scope":25,"visibility":"public"},"children":[{"attributes":{"constant":false,"name":"prevId","scope":4,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":2,"name":"ElementaryTypeName","src":"744:7:0"}],"id":3,"name":"VariableDeclaration","src":"744:14:0"}],"id":4,"name":"StructDefinition","src":"723:54:0"},{"attributes":{"constant":false,"documentation":null,"implemented":true,"isConstructor":false,"modifiers":[null],"name":"nextId","payable":false,"scope":25,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"_counter","scope":24,"stateVariable":false,"storageLocation":"storage","type":"struct AutoIncrementing.Counter","value":null,"visibility":"internal"},"children":[{"attributes":{"contractScope":null,"name":"Counter","referencedDeclaration":4,"type":"struct AutoIncrementing.Counter"},"id":5,"name":"UserDefinedTypeName","src":"797:7:0"}],"id":6,"name":"VariableDeclaration","src":"797:24:0"}],"id":7,"name":"ParameterList","src":"796:26:0"},{"children":[{"attributes":{"constant":false,"name":"","scope":24,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":8,"name":"ElementaryTypeName","src":"849:7:0"}],"id":9,"name":"VariableDeclaration","src":"849:7:0"}],"id":10,"name":"ParameterList","src":"848:9:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"=","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"member_name":"prevId","referencedDeclaration":3,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":6,"type":"struct AutoIncrementing.Counter storage pointer","value":"_counter"},"id":11,"name":"Identifier","src":"866:8:0"}],"id":13,"name":"MemberAccess","src":"866:15:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"+","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"prevId","referencedDeclaration":3,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":6,"type":"struct AutoIncrementing.Counter storage pointer","value":"_counter"},"id":14,"name":"Identifier","src":"884:8:0"}],"id":15,"name":"MemberAccess","src":"884:15:0"},{"attributes":{"argumentTypes":null,"hexvalue":"31","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 1","value":"1"},"id":16,"name":"Literal","src":"902:1:0"}],"id":17,"name":"BinaryOperation","src":"884:19:0"}],"id":18,"name":"Assignment","src":"866:37:0"}],"id":19,"name":"ExpressionStatement","src":"866:37:0"},{"attributes":{"functionReturnParameters":10},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"prevId","referencedDeclaration":3,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":6,"type":"struct AutoIncrementing.Counter storage pointer","value":"_counter"},"id":20,"name":"Identifier","src":"916:8:0"}],"id":21,"name":"MemberAccess","src":"916:15:0"}],"id":22,"name":"Return","src":"909:22:0"}],"id":23,"name":"Block","src":"860:76:0"}],"id":24,"name":"FunctionDefinition","src":"781:155:0"}],"id":25,"name":"ContractDefinition","src":"693:245:0"}],"id":26,"name":"SourceUnit","src":"0:939:0"}}},"version":"0.4.24+commit.e67f0147.Linux.g++"}
