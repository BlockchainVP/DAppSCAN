{"contracts":{"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-UNILAYERX/openzeppelin-contracts-2.3.0/contracts/drafts/Counters.sol:Counters":{"abi":"[]","bin":"604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820c5830d5fdf8d18f664d85f4fca330f115aecb7e29b249bce8817e2280fbe0f270029","bin-runtime":"73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820c5830d5fdf8d18f664d85f4fca330f115aecb7e29b249bce8817e2280fbe0f270029","srcmap":"627:759:0:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24","srcmap-runtime":"627:759:0:-;;;;;;;;"},"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-UNILAYERX/openzeppelin-contracts-2.3.0/contracts/math/SafeMath.sol:SafeMath":{"abi":"[]","bin":"604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820f2339439fa4ebf0a522ffbee2cb7d82c2dc899022aff2bd3d9158be3bed402d60029","bin-runtime":"73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820f2339439fa4ebf0a522ffbee2cb7d82c2dc899022aff2bd3d9158be3bed402d60029","srcmap":"589:2938:1:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24","srcmap-runtime":"589:2938:1:-;;;;;;;;"},"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-UNILAYERX/openzeppelin-contracts-2.3.0/contracts/mocks/CountersImpl.sol:CountersImpl":{"abi":"[{\"constant\":false,\"inputs\":[],\"name\":\"decrement\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"current\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"608060405234801561001057600080fd5b506101dc806100206000396000f3fe608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632baeceb71461005c5780639fa6a6e314610073578063d09de08a1461009e575b600080fd5b34801561006857600080fd5b506100716100b5565b005b34801561007f57600080fd5b506100886100c1565b6040518082815260200191505060405180910390f35b3480156100aa57600080fd5b506100b36100d2565b005b6100bf60006100de565b565b60006100cd6000610101565b905090565b6100dc600061010f565b565b6100f66001826000015461012590919063ffffffff16565b816000018190555050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600082821115151561019f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b60008284039050809150509291505056fea165627a7a723058207428717eabfab44dbb96da1443866219484eaafb59a1c857b6afa4a69f2bdccc0029","bin-runtime":"608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680632baeceb71461005c5780639fa6a6e314610073578063d09de08a1461009e575b600080fd5b34801561006857600080fd5b506100716100b5565b005b34801561007f57600080fd5b506100886100c1565b6040518082815260200191505060405180910390f35b3480156100aa57600080fd5b506100b36100d2565b005b6100bf60006100de565b565b60006100cd6000610101565b905090565b6100dc600061010f565b565b6100f66001826000015461012590919063ffffffff16565b816000018190555050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600082821115151561019f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b60008284039050809150509291505056fea165627a7a723058207428717eabfab44dbb96da1443866219484eaafb59a1c857b6afa4a69f2bdccc0029","srcmap":"59:345:2:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;59:345:2;;;;;;;","srcmap-runtime":"59:345:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;337:65;;8:9:-1;5:2;;;30:1;27;20:12;5:2;337:65:2;;;;;;169:91;;8:9:-1;5:2;;;30:1;27;20:12;5:2;169:91:2;;;;;;;;;;;;;;;;;;;;;;;266:65;;8:9:-1;5:2;;;30:1;27;20:12;5:2;266:65:2;;;;;;337;375:20;:8;:18;:20::i;:::-;337:65::o;169:91::-;209:7;235:18;:8;:16;:18::i;:::-;228:25;;169:91;:::o;266:65::-;304:20;:8;:18;:20::i;:::-;266:65::o;1276:108:0:-;1356:21;1375:1;1356:7;:14;;;:18;;:21;;;;:::i;:::-;1339:7;:14;;:38;;;;1276:108;:::o;1063:112::-;1128:7;1154;:14;;;1147:21;;1063:112;;;:::o;1181:89::-;1262:1;1244:7;:14;;;:19;;;;;;;;;;;1181:89;:::o;1274:179:1:-;1332:7;1364:1;1359;:6;;1351:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1410:9;1426:1;1422;:5;1410:17;;1445:1;1438:8;;;1274:179;;;;:::o"}},"sourceList":["/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-UNILAYERX/openzeppelin-contracts-2.3.0/contracts/drafts/Counters.sol","/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-UNILAYERX/openzeppelin-contracts-2.3.0/contracts/math/SafeMath.sol","/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-UNILAYERX/openzeppelin-contracts-2.3.0/contracts/mocks/CountersImpl.sol"],"sources":{"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-UNILAYERX/openzeppelin-contracts-2.3.0/contracts/drafts/Counters.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-UNILAYERX/openzeppelin-contracts-2.3.0/contracts/drafts/Counters.sol","exportedSymbols":{"Counters":[85]}},"children":[{"attributes":{"literals":["solidity","^","0.5",".0"]},"id":38,"name":"PragmaDirective","src":"0:23:0"},{"attributes":{"SourceUnit":219,"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-UNILAYERX/openzeppelin-contracts-2.3.0/contracts/math/SafeMath.sol","file":"../math/SafeMath.sol","scope":86,"symbolAliases":[null],"unitAlias":""},"id":39,"name":"ImportDirective","src":"25:30:0"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":"@title Counters\n@author Matt Condon (@shrugs)\n@dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\nof elements in a mapping, issuing ERC721 ids, or counting request ids.\n * Include with `using Counters for Counters.Counter;`\nSince it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\noverflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\ndirectly accessed.","fullyImplemented":true,"linearizedBaseContracts":[85],"name":"Counters","scope":86},"children":[{"children":[{"attributes":{"contractScope":null,"name":"SafeMath","referencedDeclaration":218,"type":"library SafeMath"},"id":40,"name":"UserDefinedTypeName","src":"656:8:0"},{"attributes":{"name":"uint256","type":"uint256"},"id":41,"name":"ElementaryTypeName","src":"669:7:0"}],"id":42,"name":"UsingForDirective","src":"650:27:0"},{"attributes":{"canonicalName":"Counters.Counter","name":"Counter","scope":85,"visibility":"public"},"children":[{"attributes":{"constant":false,"name":"_value","scope":45,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":43,"name":"ElementaryTypeName","src":"1022:7:0"}],"id":44,"name":"VariableDeclaration","src":"1022:14:0"}],"id":45,"name":"StructDefinition","src":"683:374:0"},{"attributes":{"documentation":null,"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"current","scope":85,"stateMutability":"view","superFunction":null,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"counter","scope":56,"stateVariable":false,"storageLocation":"storage","type":"struct Counters.Counter","value":null,"visibility":"internal"},"children":[{"attributes":{"contractScope":null,"name":"Counter","referencedDeclaration":45,"type":"struct Counters.Counter"},"id":46,"name":"UserDefinedTypeName","src":"1080:7:0"}],"id":47,"name":"VariableDeclaration","src":"1080:23:0"}],"id":48,"name":"ParameterList","src":"1079:25:0"},{"children":[{"attributes":{"constant":false,"name":"","scope":56,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":49,"name":"ElementaryTypeName","src":"1128:7:0"}],"id":50,"name":"VariableDeclaration","src":"1128:7:0"}],"id":51,"name":"ParameterList","src":"1127:9:0"},{"children":[{"attributes":{"functionReturnParameters":51},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"_value","referencedDeclaration":44,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":47,"type":"struct Counters.Counter storage pointer","value":"counter"},"id":52,"name":"Identifier","src":"1154:7:0"}],"id":53,"name":"MemberAccess","src":"1154:14:0"}],"id":54,"name":"Return","src":"1147:21:0"}],"id":55,"name":"Block","src":"1137:38:0"}],"id":56,"name":"FunctionDefinition","src":"1063:112:0"},{"attributes":{"documentation":null,"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"increment","scope":85,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"counter","scope":68,"stateVariable":false,"storageLocation":"storage","type":"struct Counters.Counter","value":null,"visibility":"internal"},"children":[{"attributes":{"contractScope":null,"name":"Counter","referencedDeclaration":45,"type":"struct Counters.Counter"},"id":57,"name":"UserDefinedTypeName","src":"1200:7:0"}],"id":58,"name":"VariableDeclaration","src":"1200:23:0"}],"id":59,"name":"ParameterList","src":"1199:25:0"},{"attributes":{"parameters":[null]},"children":[],"id":60,"name":"ParameterList","src":"1234:0:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"+=","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"member_name":"_value","referencedDeclaration":44,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":58,"type":"struct Counters.Counter storage pointer","value":"counter"},"id":61,"name":"Identifier","src":"1244:7:0"}],"id":63,"name":"MemberAccess","src":"1244:14:0"},{"attributes":{"argumentTypes":null,"hexvalue":"31","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 1","value":"1"},"id":64,"name":"Literal","src":"1262:1:0"}],"id":65,"name":"Assignment","src":"1244:19:0"}],"id":66,"name":"ExpressionStatement","src":"1244:19:0"}],"id":67,"name":"Block","src":"1234:36:0"}],"id":68,"name":"FunctionDefinition","src":"1181:89:0"},{"attributes":{"documentation":null,"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"decrement","scope":85,"stateMutability":"nonpayable","superFunction":null,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"counter","scope":84,"stateVariable":false,"storageLocation":"storage","type":"struct Counters.Counter","value":null,"visibility":"internal"},"children":[{"attributes":{"contractScope":null,"name":"Counter","referencedDeclaration":45,"type":"struct Counters.Counter"},"id":69,"name":"UserDefinedTypeName","src":"1295:7:0"}],"id":70,"name":"VariableDeclaration","src":"1295:23:0"}],"id":71,"name":"ParameterList","src":"1294:25:0"},{"attributes":{"parameters":[null]},"children":[],"id":72,"name":"ParameterList","src":"1329:0:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"=","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"member_name":"_value","referencedDeclaration":44,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":70,"type":"struct Counters.Counter storage pointer","value":"counter"},"id":73,"name":"Identifier","src":"1339:7:0"}],"id":75,"name":"MemberAccess","src":"1339:14:0"},{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"uint256","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"member_name":"sub","referencedDeclaration":137,"type":"function (uint256,uint256) pure returns (uint256)"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"_value","referencedDeclaration":44,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":70,"type":"struct Counters.Counter storage pointer","value":"counter"},"id":76,"name":"Identifier","src":"1356:7:0"}],"id":77,"name":"MemberAccess","src":"1356:14:0"}],"id":78,"name":"MemberAccess","src":"1356:18:0"},{"attributes":{"argumentTypes":null,"hexvalue":"31","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 1","value":"1"},"id":79,"name":"Literal","src":"1375:1:0"}],"id":80,"name":"FunctionCall","src":"1356:21:0"}],"id":81,"name":"Assignment","src":"1339:38:0"}],"id":82,"name":"ExpressionStatement","src":"1339:38:0"}],"id":83,"name":"Block","src":"1329:55:0"}],"id":84,"name":"FunctionDefinition","src":"1276:108:0"}],"id":85,"name":"ContractDefinition","src":"627:759:0"}],"id":86,"name":"SourceUnit","src":"0:1387:0"}},"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-UNILAYERX/openzeppelin-contracts-2.3.0/contracts/math/SafeMath.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-UNILAYERX/openzeppelin-contracts-2.3.0/contracts/math/SafeMath.sol","exportedSymbols":{"SafeMath":[218]}},"children":[{"attributes":{"literals":["solidity","^","0.5",".0"]},"id":87,"name":"PragmaDirective","src":"0:23:1"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":"@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always.","fullyImplemented":true,"linearizedBaseContracts":[218],"name":"SafeMath","scope":219},"children":[{"attributes":{"documentation":"@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `+` operator.\n     * Requirements:\n- Addition cannot overflow.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"add","scope":218,"stateMutability":"pure","superFunction":null,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","scope":112,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":88,"name":"ElementaryTypeName","src":"847:7:1"}],"id":89,"name":"VariableDeclaration","src":"847:9:1"},{"attributes":{"constant":false,"name":"b","scope":112,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":90,"name":"ElementaryTypeName","src":"858:7:1"}],"id":91,"name":"VariableDeclaration","src":"858:9:1"}],"id":92,"name":"ParameterList","src":"846:22:1"},{"children":[{"attributes":{"constant":false,"name":"","scope":112,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":93,"name":"ElementaryTypeName","src":"892:7:1"}],"id":94,"name":"VariableDeclaration","src":"892:7:1"}],"id":95,"name":"ParameterList","src":"891:9:1"},{"children":[{"attributes":{"assignments":[97]},"children":[{"attributes":{"constant":false,"name":"c","scope":111,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":96,"name":"ElementaryTypeName","src":"911:7:1"}],"id":97,"name":"VariableDeclaration","src":"911:9:1"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"+","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":89,"type":"uint256","value":"a"},"id":98,"name":"Identifier","src":"923:1:1"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":91,"type":"uint256","value":"b"},"id":99,"name":"Identifier","src":"927:1:1"}],"id":100,"name":"BinaryOperation","src":"923:5:1"}],"id":101,"name":"VariableDeclarationStatement","src":"911:17:1"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""}],"overloadedDeclarations":[236,237],"referencedDeclaration":237,"type":"function (bool,string memory) pure","value":"require"},"id":102,"name":"Identifier","src":"938:7:1"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":">=","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":97,"type":"uint256","value":"c"},"id":103,"name":"Identifier","src":"946:1:1"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":89,"type":"uint256","value":"a"},"id":104,"name":"Identifier","src":"951:1:1"}],"id":105,"name":"BinaryOperation","src":"946:6:1"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206164646974696f6e206f766572666c6f77","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: addition overflow\"","value":"SafeMath: addition overflow"},"id":106,"name":"Literal","src":"954:29:1"}],"id":107,"name":"FunctionCall","src":"938:46:1"}],"id":108,"name":"ExpressionStatement","src":"938:46:1"},{"attributes":{"functionReturnParameters":95},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":97,"type":"uint256","value":"c"},"id":109,"name":"Identifier","src":"1002:1:1"}],"id":110,"name":"Return","src":"995:8:1"}],"id":111,"name":"Block","src":"901:109:1"}],"id":112,"name":"FunctionDefinition","src":"834:176:1"},{"attributes":{"documentation":"@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n- Subtraction cannot overflow.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"sub","scope":218,"stateMutability":"pure","superFunction":null,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","scope":137,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":113,"name":"ElementaryTypeName","src":"1287:7:1"}],"id":114,"name":"VariableDeclaration","src":"1287:9:1"},{"attributes":{"constant":false,"name":"b","scope":137,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":115,"name":"ElementaryTypeName","src":"1298:7:1"}],"id":116,"name":"VariableDeclaration","src":"1298:9:1"}],"id":117,"name":"ParameterList","src":"1286:22:1"},{"children":[{"attributes":{"constant":false,"name":"","scope":137,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":118,"name":"ElementaryTypeName","src":"1332:7:1"}],"id":119,"name":"VariableDeclaration","src":"1332:7:1"}],"id":120,"name":"ParameterList","src":"1331:9:1"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""}],"overloadedDeclarations":[236,237],"referencedDeclaration":237,"type":"function (bool,string memory) pure","value":"require"},"id":121,"name":"Identifier","src":"1351:7:1"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"<=","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":116,"type":"uint256","value":"b"},"id":122,"name":"Identifier","src":"1359:1:1"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":114,"type":"uint256","value":"a"},"id":123,"name":"Identifier","src":"1364:1:1"}],"id":124,"name":"BinaryOperation","src":"1359:6:1"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a207375627472616374696f6e206f766572666c6f77","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: subtraction overflow\"","value":"SafeMath: subtraction overflow"},"id":125,"name":"Literal","src":"1367:32:1"}],"id":126,"name":"FunctionCall","src":"1351:49:1"}],"id":127,"name":"ExpressionStatement","src":"1351:49:1"},{"attributes":{"assignments":[129]},"children":[{"attributes":{"constant":false,"name":"c","scope":136,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":128,"name":"ElementaryTypeName","src":"1410:7:1"}],"id":129,"name":"VariableDeclaration","src":"1410:9:1"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"-","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":114,"type":"uint256","value":"a"},"id":130,"name":"Identifier","src":"1422:1:1"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":116,"type":"uint256","value":"b"},"id":131,"name":"Identifier","src":"1426:1:1"}],"id":132,"name":"BinaryOperation","src":"1422:5:1"}],"id":133,"name":"VariableDeclarationStatement","src":"1410:17:1"},{"attributes":{"functionReturnParameters":120},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":129,"type":"uint256","value":"c"},"id":134,"name":"Identifier","src":"1445:1:1"}],"id":135,"name":"Return","src":"1438:8:1"}],"id":136,"name":"Block","src":"1341:112:1"}],"id":137,"name":"FunctionDefinition","src":"1274:179:1"},{"attributes":{"documentation":"@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `*` operator.\n     * Requirements:\n- Multiplication cannot overflow.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"mul","scope":218,"stateMutability":"pure","superFunction":null,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","scope":171,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":138,"name":"ElementaryTypeName","src":"1706:7:1"}],"id":139,"name":"VariableDeclaration","src":"1706:9:1"},{"attributes":{"constant":false,"name":"b","scope":171,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":140,"name":"ElementaryTypeName","src":"1717:7:1"}],"id":141,"name":"VariableDeclaration","src":"1717:9:1"}],"id":142,"name":"ParameterList","src":"1705:22:1"},{"children":[{"attributes":{"constant":false,"name":"","scope":171,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":143,"name":"ElementaryTypeName","src":"1751:7:1"}],"id":144,"name":"VariableDeclaration","src":"1751:7:1"}],"id":145,"name":"ParameterList","src":"1750:9:1"},{"children":[{"attributes":{"falseBody":null},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"==","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":139,"type":"uint256","value":"a"},"id":146,"name":"Identifier","src":"1991:1:1"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":147,"name":"Literal","src":"1996:1:1"}],"id":148,"name":"BinaryOperation","src":"1991:6:1"},{"children":[{"attributes":{"functionReturnParameters":145},"children":[{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":149,"name":"Literal","src":"2020:1:1"}],"id":150,"name":"Return","src":"2013:8:1"}],"id":151,"name":"Block","src":"1999:33:1"}],"id":152,"name":"IfStatement","src":"1987:45:1"},{"attributes":{"assignments":[154]},"children":[{"attributes":{"constant":false,"name":"c","scope":170,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":153,"name":"ElementaryTypeName","src":"2042:7:1"}],"id":154,"name":"VariableDeclaration","src":"2042:9:1"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"*","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":139,"type":"uint256","value":"a"},"id":155,"name":"Identifier","src":"2054:1:1"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":141,"type":"uint256","value":"b"},"id":156,"name":"Identifier","src":"2058:1:1"}],"id":157,"name":"BinaryOperation","src":"2054:5:1"}],"id":158,"name":"VariableDeclarationStatement","src":"2042:17:1"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""}],"overloadedDeclarations":[236,237],"referencedDeclaration":237,"type":"function (bool,string memory) pure","value":"require"},"id":159,"name":"Identifier","src":"2069:7:1"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"==","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"/","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":154,"type":"uint256","value":"c"},"id":160,"name":"Identifier","src":"2077:1:1"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":139,"type":"uint256","value":"a"},"id":161,"name":"Identifier","src":"2081:1:1"}],"id":162,"name":"BinaryOperation","src":"2077:5:1"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":141,"type":"uint256","value":"b"},"id":163,"name":"Identifier","src":"2086:1:1"}],"id":164,"name":"BinaryOperation","src":"2077:10:1"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: multiplication overflow\"","value":"SafeMath: multiplication overflow"},"id":165,"name":"Literal","src":"2089:35:1"}],"id":166,"name":"FunctionCall","src":"2069:56:1"}],"id":167,"name":"ExpressionStatement","src":"2069:56:1"},{"attributes":{"functionReturnParameters":145},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":154,"type":"uint256","value":"c"},"id":168,"name":"Identifier","src":"2143:1:1"}],"id":169,"name":"Return","src":"2136:8:1"}],"id":170,"name":"Block","src":"1760:391:1"}],"id":171,"name":"FunctionDefinition","src":"1693:458:1"},{"attributes":{"documentation":"@dev Returns the integer division of two unsigned integers. Reverts on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"div","scope":218,"stateMutability":"pure","superFunction":null,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","scope":196,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":172,"name":"ElementaryTypeName","src":"2619:7:1"}],"id":173,"name":"VariableDeclaration","src":"2619:9:1"},{"attributes":{"constant":false,"name":"b","scope":196,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":174,"name":"ElementaryTypeName","src":"2630:7:1"}],"id":175,"name":"VariableDeclaration","src":"2630:9:1"}],"id":176,"name":"ParameterList","src":"2618:22:1"},{"children":[{"attributes":{"constant":false,"name":"","scope":196,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":177,"name":"ElementaryTypeName","src":"2664:7:1"}],"id":178,"name":"VariableDeclaration","src":"2664:7:1"}],"id":179,"name":"ParameterList","src":"2663:9:1"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""}],"overloadedDeclarations":[236,237],"referencedDeclaration":237,"type":"function (bool,string memory) pure","value":"require"},"id":180,"name":"Identifier","src":"2749:7:1"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":">","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":175,"type":"uint256","value":"b"},"id":181,"name":"Identifier","src":"2757:1:1"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":182,"name":"Literal","src":"2761:1:1"}],"id":183,"name":"BinaryOperation","src":"2757:5:1"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206469766973696f6e206279207a65726f","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: division by zero\"","value":"SafeMath: division by zero"},"id":184,"name":"Literal","src":"2764:28:1"}],"id":185,"name":"FunctionCall","src":"2749:44:1"}],"id":186,"name":"ExpressionStatement","src":"2749:44:1"},{"attributes":{"assignments":[188]},"children":[{"attributes":{"constant":false,"name":"c","scope":195,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":187,"name":"ElementaryTypeName","src":"2803:7:1"}],"id":188,"name":"VariableDeclaration","src":"2803:9:1"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"/","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":173,"type":"uint256","value":"a"},"id":189,"name":"Identifier","src":"2815:1:1"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":175,"type":"uint256","value":"b"},"id":190,"name":"Identifier","src":"2819:1:1"}],"id":191,"name":"BinaryOperation","src":"2815:5:1"}],"id":192,"name":"VariableDeclarationStatement","src":"2803:17:1"},{"attributes":{"functionReturnParameters":179},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":188,"type":"uint256","value":"c"},"id":193,"name":"Identifier","src":"2924:1:1"}],"id":194,"name":"Return","src":"2917:8:1"}],"id":195,"name":"Block","src":"2673:259:1"}],"id":196,"name":"FunctionDefinition","src":"2606:326:1"},{"attributes":{"documentation":"@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n- The divisor cannot be zero.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"mod","scope":218,"stateMutability":"pure","superFunction":null,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","scope":217,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":197,"name":"ElementaryTypeName","src":"3389:7:1"}],"id":198,"name":"VariableDeclaration","src":"3389:9:1"},{"attributes":{"constant":false,"name":"b","scope":217,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":199,"name":"ElementaryTypeName","src":"3400:7:1"}],"id":200,"name":"VariableDeclaration","src":"3400:9:1"}],"id":201,"name":"ParameterList","src":"3388:22:1"},{"children":[{"attributes":{"constant":false,"name":"","scope":217,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":202,"name":"ElementaryTypeName","src":"3434:7:1"}],"id":203,"name":"VariableDeclaration","src":"3434:7:1"}],"id":204,"name":"ParameterList","src":"3433:9:1"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""}],"overloadedDeclarations":[236,237],"referencedDeclaration":237,"type":"function (bool,string memory) pure","value":"require"},"id":205,"name":"Identifier","src":"3453:7:1"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"!=","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":200,"type":"uint256","value":"b"},"id":206,"name":"Identifier","src":"3461:1:1"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":207,"name":"Literal","src":"3466:1:1"}],"id":208,"name":"BinaryOperation","src":"3461:6:1"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206d6f64756c6f206279207a65726f","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: modulo by zero\"","value":"SafeMath: modulo by zero"},"id":209,"name":"Literal","src":"3469:26:1"}],"id":210,"name":"FunctionCall","src":"3453:43:1"}],"id":211,"name":"ExpressionStatement","src":"3453:43:1"},{"attributes":{"functionReturnParameters":204},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"%","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":198,"type":"uint256","value":"a"},"id":212,"name":"Identifier","src":"3513:1:1"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":200,"type":"uint256","value":"b"},"id":213,"name":"Identifier","src":"3517:1:1"}],"id":214,"name":"BinaryOperation","src":"3513:5:1"}],"id":215,"name":"Return","src":"3506:12:1"}],"id":216,"name":"Block","src":"3443:82:1"}],"id":217,"name":"FunctionDefinition","src":"3376:149:1"}],"id":218,"name":"ContractDefinition","src":"589:2938:1"}],"id":219,"name":"SourceUnit","src":"0:3528:1"}},"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-UNILAYERX/openzeppelin-contracts-2.3.0/contracts/mocks/CountersImpl.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-UNILAYERX/openzeppelin-contracts-2.3.0/contracts/mocks/CountersImpl.sol","exportedSymbols":{"CountersImpl":[36]}},"children":[{"attributes":{"literals":["solidity","^","0.5",".0"]},"id":1,"name":"PragmaDirective","src":"0:23:2"},{"attributes":{"SourceUnit":86,"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-UNILAYERX/openzeppelin-contracts-2.3.0/contracts/drafts/Counters.sol","file":"../drafts/Counters.sol","scope":37,"symbolAliases":[null],"unitAlias":""},"id":2,"name":"ImportDirective","src":"25:32:2"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"contract","documentation":null,"fullyImplemented":true,"linearizedBaseContracts":[36],"name":"CountersImpl","scope":37},"children":[{"children":[{"attributes":{"contractScope":null,"name":"Counters","referencedDeclaration":85,"type":"library Counters"},"id":3,"name":"UserDefinedTypeName","src":"93:8:2"},{"attributes":{"contractScope":null,"name":"Counters.Counter","referencedDeclaration":45,"type":"struct Counters.Counter"},"id":4,"name":"UserDefinedTypeName","src":"106:16:2"}],"id":5,"name":"UsingForDirective","src":"87:36:2"},{"attributes":{"constant":false,"name":"_counter","scope":36,"stateVariable":true,"storageLocation":"default","type":"struct Counters.Counter","value":null,"visibility":"private"},"children":[{"attributes":{"contractScope":null,"name":"Counters.Counter","referencedDeclaration":45,"type":"struct Counters.Counter"},"id":6,"name":"UserDefinedTypeName","src":"129:16:2"}],"id":7,"name":"VariableDeclaration","src":"129:33:2"},{"attributes":{"documentation":null,"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"current","scope":36,"stateMutability":"view","superFunction":null,"visibility":"public"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":8,"name":"ParameterList","src":"185:2:2"},{"children":[{"attributes":{"constant":false,"name":"","scope":17,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":9,"name":"ElementaryTypeName","src":"209:7:2"}],"id":10,"name":"VariableDeclaration","src":"209:7:2"}],"id":11,"name":"ParameterList","src":"208:9:2"},{"children":[{"attributes":{"functionReturnParameters":11},"children":[{"attributes":{"argumentTypes":null,"arguments":[null],"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"uint256","type_conversion":false},"children":[{"attributes":{"argumentTypes":[null],"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"current","referencedDeclaration":56,"type":"function (struct Counters.Counter storage pointer) view returns (uint256)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":7,"type":"struct Counters.Counter storage ref","value":"_counter"},"id":12,"name":"Identifier","src":"235:8:2"}],"id":13,"name":"MemberAccess","src":"235:16:2"}],"id":14,"name":"FunctionCall","src":"235:18:2"}],"id":15,"name":"Return","src":"228:25:2"}],"id":16,"name":"Block","src":"218:42:2"}],"id":17,"name":"FunctionDefinition","src":"169:91:2"},{"attributes":{"documentation":null,"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"increment","scope":36,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":18,"name":"ParameterList","src":"284:2:2"},{"attributes":{"parameters":[null]},"children":[],"id":19,"name":"ParameterList","src":"294:0:2"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"arguments":[null],"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[null],"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"increment","referencedDeclaration":68,"type":"function (struct Counters.Counter storage pointer)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":7,"type":"struct Counters.Counter storage ref","value":"_counter"},"id":20,"name":"Identifier","src":"304:8:2"}],"id":22,"name":"MemberAccess","src":"304:18:2"}],"id":23,"name":"FunctionCall","src":"304:20:2"}],"id":24,"name":"ExpressionStatement","src":"304:20:2"}],"id":25,"name":"Block","src":"294:37:2"}],"id":26,"name":"FunctionDefinition","src":"266:65:2"},{"attributes":{"documentation":null,"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"decrement","scope":36,"stateMutability":"nonpayable","superFunction":null,"visibility":"public"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":27,"name":"ParameterList","src":"355:2:2"},{"attributes":{"parameters":[null]},"children":[],"id":28,"name":"ParameterList","src":"365:0:2"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"arguments":[null],"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[null],"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"decrement","referencedDeclaration":84,"type":"function (struct Counters.Counter storage pointer)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":7,"type":"struct Counters.Counter storage ref","value":"_counter"},"id":29,"name":"Identifier","src":"375:8:2"}],"id":31,"name":"MemberAccess","src":"375:18:2"}],"id":32,"name":"FunctionCall","src":"375:20:2"}],"id":33,"name":"ExpressionStatement","src":"375:20:2"}],"id":34,"name":"Block","src":"365:37:2"}],"id":35,"name":"FunctionDefinition","src":"337:65:2"}],"id":36,"name":"ContractDefinition","src":"59:345:2"}],"id":37,"name":"SourceUnit","src":"0:405:2"}}},"version":"0.5.0+commit.1d4f565a.Linux.g++"}
