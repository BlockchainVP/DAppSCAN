{"contracts":{"/home/yemx6/solc-dApp/code/Quantstamp-Mainframe/node_modules/@paulrberg/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard":{"abi":"[]","bin":"","bin-runtime":"","srcmap":"","srcmap-runtime":""}},"sourceList":["/home/yemx6/solc-dApp/code/Quantstamp-Mainframe/node_modules/@paulrberg/contracts/utils/ReentrancyGuard.sol"],"sources":{"/home/yemx6/solc-dApp/code/Quantstamp-Mainframe/node_modules/@paulrberg/contracts/utils/ReentrancyGuard.sol":{"AST":{"attributes":{"absolutePath":"/home/yemx6/solc-dApp/code/Quantstamp-Mainframe/node_modules/@paulrberg/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[31]},"license":"LGPL-3.0-or-later"},"children":[{"attributes":{"literals":["solidity","^","0.7",".0"]},"id":1,"name":"PragmaDirective","src":"49:23:0"},{"attributes":{"abstract":true,"baseContracts":[null],"contractDependencies":[null],"contractKind":"contract","fullyImplemented":true,"linearizedBaseContracts":[31],"name":"ReentrancyGuard","scope":32},"children":[{"attributes":{"text":" @title ReentrancyGuard\n @author Paul Razvan Berg\n @notice Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n @dev Forked from OpenZeppelin\n https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v3.1.0/contracts/math/ReentrancyGuard.sol"},"id":2,"name":"StructuredDocumentation","src":"74:729:0"},{"attributes":{"constant":false,"mutability":"mutable","name":"notEntered","scope":31,"stateVariable":true,"storageLocation":"default","type":"bool","visibility":"private"},"children":[{"attributes":{"name":"bool","type":"bool"},"id":3,"name":"ElementaryTypeName","src":"844:4:0"}],"id":4,"name":"VariableDeclaration","src":"844:23:0"},{"attributes":{"implemented":true,"isConstructor":true,"kind":"constructor","modifiers":[null],"name":"","scope":31,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":5,"name":"ParameterList","src":"1280:2:0"},{"attributes":{"parameters":[null]},"children":[],"id":6,"name":"ParameterList","src":"1283:0:0"},{"children":[{"children":[{"attributes":{"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"=","type":"bool"},"children":[{"attributes":{"overloadedDeclarations":[null],"referencedDeclaration":4,"type":"bool","value":"notEntered"},"id":7,"name":"Identifier","src":"1293:10:0"},{"attributes":{"hexvalue":"74727565","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"token":"bool","type":"bool","value":"true"},"id":8,"name":"Literal","src":"1306:4:0"}],"id":9,"name":"Assignment","src":"1293:17:0"}],"id":10,"name":"ExpressionStatement","src":"1293:17:0"}],"id":11,"name":"Block","src":"1283:34:0"}],"id":12,"name":"FunctionDefinition","src":"1269:48:0"},{"attributes":{"name":"nonReentrant","virtual":false,"visibility":"internal"},"children":[{"attributes":{"text":" @notice Prevents a contract from calling itself, directly or indirectly.\n @dev Calling a `nonReentrant` function from another `nonReentrant` function\n is not supported. It is possible to prevent this from happening by making\n the `nonReentrant` function external, and make it call a `private`\n function that does the actual work."},"id":13,"name":"StructuredDocumentation","src":"1323:372:0"},{"attributes":{"parameters":[null]},"children":[],"id":14,"name":"ParameterList","src":"1721:2:0"},{"children":[{"children":[{"attributes":{"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8d625970ea6080b33ac7f90868b44a67f20456feba68074a0d174d22fcc44de6","typeString":"literal_string \"ERR_REENTRANT_CALL\""}],"overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"type":"function (bool,string memory) pure","value":"require"},"id":15,"name":"Identifier","src":"1809:7:0"},{"attributes":{"overloadedDeclarations":[null],"referencedDeclaration":4,"type":"bool","value":"notEntered"},"id":16,"name":"Identifier","src":"1817:10:0"},{"attributes":{"hexvalue":"4552525f5245454e5452414e545f43414c4c","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"token":"string","type":"literal_string \"ERR_REENTRANT_CALL\"","value":"ERR_REENTRANT_CALL"},"id":17,"name":"Literal","src":"1829:20:0"}],"id":18,"name":"FunctionCall","src":"1809:41:0"}],"id":19,"name":"ExpressionStatement","src":"1809:41:0"},{"children":[{"attributes":{"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"=","type":"bool"},"children":[{"attributes":{"overloadedDeclarations":[null],"referencedDeclaration":4,"type":"bool","value":"notEntered"},"id":20,"name":"Identifier","src":"1929:10:0"},{"attributes":{"hexvalue":"66616c7365","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"token":"bool","type":"bool","value":"false"},"id":21,"name":"Literal","src":"1942:5:0"}],"id":22,"name":"Assignment","src":"1929:18:0"}],"id":23,"name":"ExpressionStatement","src":"1929:18:0"},{"id":24,"name":"PlaceholderStatement","src":"1958:1:0"},{"children":[{"attributes":{"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"=","type":"bool"},"children":[{"attributes":{"overloadedDeclarations":[null],"referencedDeclaration":4,"type":"bool","value":"notEntered"},"id":25,"name":"Identifier","src":"2126:10:0"},{"attributes":{"hexvalue":"74727565","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"token":"bool","type":"bool","value":"true"},"id":26,"name":"Literal","src":"2139:4:0"}],"id":27,"name":"Assignment","src":"2126:17:0"}],"id":28,"name":"ExpressionStatement","src":"2126:17:0"}],"id":29,"name":"Block","src":"1724:426:0"}],"id":30,"name":"ModifierDefinition","src":"1700:450:0"}],"id":31,"name":"ContractDefinition","src":"804:1348:0"}],"id":32,"name":"SourceUnit","src":"49:2104:0"}}},"version":"0.7.0+commit.9e61f92b.Linux.g++"}
