{"contracts":{"/home/sdb/yemx6/solc-DApp/labeledCode/openzeppelin-UMA_Across_V2/contracts-v2-bf03255cbd1db3045cd2fbf1580f24081f46b43a/contracts/Lockable.sol:Lockable":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"}],"bin":"6080604052348015600f57600080fd5b5060016000806101000a81548160ff021916908315150217905550603f8060376000396000f3fe6080604052600080fdfea2646970667358221220e5f7150b5a03edbf4de18b816fd4656896805f156b44b72eb86b1de776aba92864736f6c63430008000033","bin-runtime":"6080604052600080fdfea2646970667358221220e5f7150b5a03edbf4de18b816fd4656896805f156b44b72eb86b1de776aba92864736f6c63430008000033","srcmap":"405:2837:0:-:0;;;461:439;;;;;;;;;;889:4;875:11;;:18;;;;;;;;;;;;;;;;;;405:2837;;;;;;","srcmap-runtime":"405:2837:0:-:0;;;;;"}},"sourceList":["/home/sdb/yemx6/solc-DApp/labeledCode/openzeppelin-UMA_Across_V2/contracts-v2-bf03255cbd1db3045cd2fbf1580f24081f46b43a/contracts/Lockable.sol"],"sources":{"/home/sdb/yemx6/solc-DApp/labeledCode/openzeppelin-UMA_Across_V2/contracts-v2-bf03255cbd1db3045cd2fbf1580f24081f46b43a/contracts/Lockable.sol":{"AST":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/openzeppelin-UMA_Across_V2/contracts-v2-bf03255cbd1db3045cd2fbf1580f24081f46b43a/contracts/Lockable.sol","exportedSymbols":{"Lockable":[69]},"id":70,"license":"AGPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"42:23:0"},{"abstract":false,"baseContracts":[],"contractDependencies":[],"contractKind":"contract","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"67:337:0","text":" @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\n is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\n and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol."},"fullyImplemented":true,"id":69,"linearizedBaseContracts":[69],"name":"Lockable","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4,"mutability":"mutable","name":"_notEntered","nodeType":"VariableDeclaration","scope":69,"src":"429:25:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3,"name":"bool","nodeType":"ElementaryTypeName","src":"429:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"body":{"id":11,"nodeType":"Block","src":"475:425:0","statements":[{"expression":{"id":9,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7,"name":"_notEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4,"src":"875:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":8,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"889:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"875:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":10,"nodeType":"ExpressionStatement","src":"875:18:0"}]},"id":12,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nodeType":"FunctionDefinition","parameters":{"id":5,"nodeType":"ParameterList","parameters":[],"src":"472:2:0"},"returnParameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"475:0:0"},"scope":69,"src":"461:439:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":25,"nodeType":"Block","src":"1300:104:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":15,"name":"_preEntranceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52,"src":"1310:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":16,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1310:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":17,"nodeType":"ExpressionStatement","src":"1310:19:0"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_preEntranceSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":60,"src":"1339:15:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1339:17:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":20,"nodeType":"ExpressionStatement","src":"1339:17:0"},{"id":21,"nodeType":"PlaceholderStatement","src":"1366:1:0"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":22,"name":"_postEntranceReset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":68,"src":"1377:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":23,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1377:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":24,"nodeType":"ExpressionStatement","src":"1377:20:0"}]},"documentation":{"id":13,"nodeType":"StructuredDocumentation","src":"906:365:0","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a nonReentrant function from another nonReentrant function is not supported. It is possible to\n prevent this from happening by making the nonReentrant function external, and making it call a private\n function that does the actual state modification."},"id":26,"name":"nonReentrant","nodeType":"ModifierDefinition","parameters":{"id":14,"nodeType":"ParameterList","parameters":[],"src":"1297:2:0"},"src":"1276:128:0","virtual":false,"visibility":"internal"},{"body":{"id":33,"nodeType":"Block","src":"1584:47:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":29,"name":"_preEntranceCheck","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52,"src":"1594:17:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":30,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"1594:19:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":31,"nodeType":"ExpressionStatement","src":"1594:19:0"},{"id":32,"nodeType":"PlaceholderStatement","src":"1623:1:0"}]},"documentation":{"id":27,"nodeType":"StructuredDocumentation","src":"1410:141:0","text":" @dev Designed to prevent a view-only method from being re-entered during a call to a nonReentrant() state-changing method."},"id":34,"name":"nonReentrantView","nodeType":"ModifierDefinition","parameters":{"id":28,"nodeType":"ParameterList","parameters":[],"src":"1581:2:0"},"src":"1556:75:0","virtual":false,"visibility":"internal"},{"body":{"id":42,"nodeType":"Block","src":"2172:35:0","statements":[{"expression":{"id":40,"name":"_notEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4,"src":"2189:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":39,"id":41,"nodeType":"Return","src":"2182:18:0"}]},"documentation":{"id":35,"nodeType":"StructuredDocumentation","src":"1637:439:0","text":" @dev Returns true if the contract is currently in a non-entered state, meaning that the origination of the call\n came from outside the contract. This is relevant with fallback/receive methods to see if the call came from ETH\n being dropped onto the contract externally or due to ETH dropped on the the contract from within a method in this\n contract, such as unwrapping WETH to ETH within the contract."},"id":43,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallStackOriginatesFromOutsideThisContract","nodeType":"FunctionDefinition","parameters":{"id":36,"nodeType":"ParameterList","parameters":[],"src":"2140:2:0"},"returnParameters":{"id":39,"nodeType":"ParameterList","parameters":[{"constant":false,"id":38,"mutability":"mutable","name":"","nodeType":"VariableDeclaration","scope":43,"src":"2166:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":37,"name":"bool","nodeType":"ElementaryTypeName","src":"2166:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2165:6:0"},"scope":69,"src":"2081:126:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":51,"nodeType":"Block","src":"2743:143:0","statements":[{"expression":{"arguments":[{"id":47,"name":"_notEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4,"src":"2832:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":48,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2845:33:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":46,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2824:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"names":[],"nodeType":"FunctionCall","src":"2824:55:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":50,"nodeType":"ExpressionStatement","src":"2824:55:0"}]},"id":52,"implemented":true,"kind":"function","modifiers":[],"name":"_preEntranceCheck","nodeType":"FunctionDefinition","parameters":{"id":44,"nodeType":"ParameterList","parameters":[],"src":"2726:2:0"},"returnParameters":{"id":45,"nodeType":"ParameterList","parameters":[],"src":"2743:0:0"},"scope":69,"src":"2700:186:0","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":59,"nodeType":"Block","src":"2928:100:0","statements":[{"expression":{"id":57,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":55,"name":"_notEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4,"src":"3002:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":56,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3016:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"3002:19:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":58,"nodeType":"ExpressionStatement","src":"3002:19:0"}]},"id":60,"implemented":true,"kind":"function","modifiers":[],"name":"_preEntranceSet","nodeType":"FunctionDefinition","parameters":{"id":53,"nodeType":"ParameterList","parameters":[],"src":"2916:2:0"},"returnParameters":{"id":54,"nodeType":"ParameterList","parameters":[],"src":"2928:0:0"},"scope":69,"src":"2892:136:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"3073:167:0","statements":[{"expression":{"id":65,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":63,"name":"_notEntered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4,"src":"3215:11:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3229:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"3215:18:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":66,"nodeType":"ExpressionStatement","src":"3215:18:0"}]},"id":68,"implemented":true,"kind":"function","modifiers":[],"name":"_postEntranceReset","nodeType":"FunctionDefinition","parameters":{"id":61,"nodeType":"ParameterList","parameters":[],"src":"3061:2:0"},"returnParameters":{"id":62,"nodeType":"ParameterList","parameters":[],"src":"3073:0:0"},"scope":69,"src":"3034:206:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":70,"src":"405:2837:0"}],"src":"42:3201:0"}}},"version":"0.8.0+commit.c7dfd78e.Linux.g++"}
