{"contracts":{"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/dividend/Dividend.sol:Dividend":{"abi":"[{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","bin":"608060405234801561001057600080fd5b50610807806100206000396000f3fe608060405234801561001057600080fd5b50610019610023565b6060604052610299565b60443560805260643560a052610184356101040180357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101243506816101443506826101643506629896808211156100835761019060005260206000fd5b6298968081111561009a5761019060005260206000fd5b6024356102a052816102c052806102e0526100b5858761051e565b6080850261030001600160005b60038110156102635760c0810260208a010160006020820135888a6000518709955060018511600181146100fd576000811461011a5761011f565b8b8c8b60c08803358f03098d8b60c080018903350908935061011f565b843593505b5061012b82848661046f565b8a86840992508a86830991508a868b09905060406080850160e0376040808501602037808b0361012052826060528160c05260406101a0606060e060075afa60406101206060602060075afa8116905060406101606060608060075afa811690506040610160608061012060065afa81169050604088608061016060065afa8116905060008614156101f757602051610260526040516102805260e0516101e052610100517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703610200525b600086111561023a578160605260406102206060602060075afa811690506040610260608061022060065afa8116905060406101e060806101a060065afa811690505b80151561024d5761019060005260206000fd5b60408801975050505050506001810190506100c2565b5061026e608461029e565b856102a083036102a02006858114151561028e5761019460005260206000fd5b505050505050505050565b61046a565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781356020830135604084013560608501357f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81147f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83147f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c285147f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed87148415861588158a15171717171717171561037c5761019060005260206000fd5b6101e051602052610200516040527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6080527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26060527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c0527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a0526102605160e05261028051610100528361014052826101205281610180528061016052602080610180602060085afa60205115811517156104615761019060005260206000fd5b50505050505050565b610519565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408301356060840135608085013560a086013584838409856003878789898a090908148582830986600388868a888909090814166001891189888b06141660018b118b898d0614161616151561050e5761019060005260206000fd5b505050505050505050565b61055a565b60005b8281101561054a57606060c0820283010160808160808402610300013750600181019050610521565b5060808202610300206000525050565b610562610564565b005b6101843561010401803560016101a435610124016101c435610124016101e4356101440160016101a05260606101c05260c0610200526000610240526000806102605261012435610280526102a0856020820152602086026102e00160005b8781101561068e5760c0810260208b0101600160005260806040820160203760c08352600160208401528735604084015260a06000206060840152604060808401527f800000000000000000000000000000000000000000000000000000000000000060016060830135160260408201351760a08401527f8000000000000000000000000000000000000000000000000000000000000000600160a0830135160260808201351760c08401528383036020830260408601015260e083019250506001810190506105c3565b50602082820303825281810360c00161022052809150868803602083015260208789030260400181019050865b888110156107ac5760c0810260208b01016020898303028601358060408803013560016000526080604084016020378060c00185526001602086015260208b850302890135604086015260a060002060608601528060400160808601527f8000000000000000000000000000000000000000000000000000000000000000600160405116026020511760a08601527f8000000000000000000000000000000000000000000000000000000000000000600160805116026060511760c08601528060208903830160e087013785850360208c8603026040880101526020855101850194505050506001810190506106bb565b5060208282030382526102a081038060a0016101e0528061010001610180526020610160528061014001610160f3fea165627a7a72305820c344d8a6b1787e3e528e8cc04e0ad3cff86fb380802ade756948934db2784e9a0029","bin-runtime":"608060405234801561001057600080fd5b50610019610023565b6060604052610299565b60443560805260643560a052610184356101040180357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101243506816101443506826101643506629896808211156100835761019060005260206000fd5b6298968081111561009a5761019060005260206000fd5b6024356102a052816102c052806102e0526100b5858761051e565b6080850261030001600160005b60038110156102635760c0810260208a010160006020820135888a6000518709955060018511600181146100fd576000811461011a5761011f565b8b8c8b60c08803358f03098d8b60c080018903350908935061011f565b843593505b5061012b82848661046f565b8a86840992508a86830991508a868b09905060406080850160e0376040808501602037808b0361012052826060528160c05260406101a0606060e060075afa60406101206060602060075afa8116905060406101606060608060075afa811690506040610160608061012060065afa81169050604088608061016060065afa8116905060008614156101f757602051610260526040516102805260e0516101e052610100517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703610200525b600086111561023a578160605260406102206060602060075afa811690506040610260608061022060065afa8116905060406101e060806101a060065afa811690505b80151561024d5761019060005260206000fd5b60408801975050505050506001810190506100c2565b5061026e608461029e565b856102a083036102a02006858114151561028e5761019460005260206000fd5b505050505050505050565b61046a565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781356020830135604084013560608501357f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81147f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83147f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c285147f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed87148415861588158a15171717171717171561037c5761019060005260206000fd5b6101e051602052610200516040527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6080527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26060527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c0527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a0526102605160e05261028051610100528361014052826101205281610180528061016052602080610180602060085afa60205115811517156104615761019060005260206000fd5b50505050505050565b610519565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408301356060840135608085013560a086013584838409856003878789898a090908148582830986600388868a888909090814166001891189888b06141660018b118b898d0614161616151561050e5761019060005260206000fd5b505050505050505050565b61055a565b60005b8281101561054a57606060c0820283010160808160808402610300013750600181019050610521565b5060808202610300206000525050565b610562610564565b005b6101843561010401803560016101a435610124016101c435610124016101e4356101440160016101a05260606101c05260c0610200526000610240526000806102605261012435610280526102a0856020820152602086026102e00160005b8781101561068e5760c0810260208b0101600160005260806040820160203760c08352600160208401528735604084015260a06000206060840152604060808401527f800000000000000000000000000000000000000000000000000000000000000060016060830135160260408201351760a08401527f8000000000000000000000000000000000000000000000000000000000000000600160a0830135160260808201351760c08401528383036020830260408601015260e083019250506001810190506105c3565b50602082820303825281810360c00161022052809150868803602083015260208789030260400181019050865b888110156107ac5760c0810260208b01016020898303028601358060408803013560016000526080604084016020378060c00185526001602086015260208b850302890135604086015260a060002060608601528060400160808601527f8000000000000000000000000000000000000000000000000000000000000000600160405116026020511760a08601527f8000000000000000000000000000000000000000000000000000000000000000600160805116026060511760c08601528060208903830160e087013785850360208c8603026040880101526020855101850194505050506001810190506106bb565b5060208282030382526102a081038060a0016101e0528061010001610180526020610160528061014001610160f3fea165627a7a72305820c344d8a6b1787e3e528e8cc04e0ad3cff86fb380802ade756948934db2784e9a0029","srcmap":"1304:18214:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1304:18214:0;;;;;;;","srcmap-runtime":"1304:18214:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1304:18214:0;2065:18;;;;2352:4;2346;2339:18;3315:10090;;;3541:4;3528:18;3522:4;3515:32;3590:4;3577:18;3571:4;3564:32;3650:5;3637:19;3630:5;3626:31;3696:5;3683:19;3736:66;3861:9;3853:5;3840:19;3836:35;3924:9;3916:5;3903:19;3899:35;3986:9;3978:5;3965:19;3961:35;4066:8;4062:2;4059:16;4056:2;;;4111:3;4105:4;4098:17;4149:4;4143;4136:18;4056:2;4241:8;4237:2;4234:16;4231:2;;;4286:3;4280:4;4273:17;4324:4;4318;4311:18;4231:2;4765:4;4752:18;4745:5;4738:33;4802:2;4795:5;4788:17;4836:2;4829:5;4822:17;4857:25;4880:1;4873:5;4857:25;;;4926:4;4923:1;4919:12;4912:5;4908:24;5398:1;5431;5416:7368;5441:1;5438;5435:8;5416:7368;;;5632:4;5629:1;5625:12;5618:4;5611:5;5607:16;5603:35;;6964:4;6953:9;6949:20;6936:34;7000:9;7058;7051:4;7045:11;7042:1;7035:33;7030:38;;7103:1;7100;7097:8;7131:1;7126:746;;;;7899:1;7894:247;;;;7090:1051;;7126:746;7840:9;7777;7733:2;7684:4;7673:9;7669:20;7656:34;7645:9;7641:50;7593:194;7532:9;7488:2;7439:4;7433;7429:15;7418:9;7414:31;7401:45;7353:189;7309:541;7304:546;;7126:746;;7894:247;8109:9;8096:23;8091:28;;7090:1051;;8223:35;8256:1;8253;8242:9;8223:35;;;8375:9;8372:1;8369;8362:23;8357:28;;8430:9;8427:1;8424;8417:23;8412:28;;8493:9;8490:1;8479:9;8472:31;8467:36;;9163:4;9156;9145:9;9141:20;9135:4;9122:46;9230:4;9223;9212:9;9208:20;9202:4;9189:46;9285:1;9274:9;9270:17;9263:5;9256:32;9322:1;9316:4;9309:15;9358:1;9352:4;9345:15;9937:4;9930:5;9924:4;9918;9915:1;9910:3;9899:43;10039:4;10032:5;10026:4;10020;10017:1;10012:3;10001:43;9993:6;9989:56;9979:66;;10141:4;10134:5;10128:4;10122;10119:1;10114:3;10103:43;10095:6;10091:56;10081:66;;10437:4;10430:5;10424:4;10417:5;10414:1;10409:3;10398:44;10390:6;10386:57;10376:67;;10858:4;10855:1;10849:4;10842:5;10839:1;10834:3;10823:40;10815:6;10811:53;10801:63;;11310:1;11307;11304:8;11301:2;;;11368:4;11362:11;11355:5;11348:26;11419:4;11413:11;11406:5;11399:26;11470:4;11464:11;11457:5;11450:26;11650:5;11644:12;11576:66;11572:85;11537:5;11501:186;11301:2;11997:1;11994;11991:8;11988:2;;;12048:1;12042:4;12035:15;12135:4;12128:5;12122:4;12116;12113:1;12108:3;12097:43;12089:6;12085:56;12075:66;;12319:4;12312:5;12306:4;12299:5;12296:1;12291:3;12280:44;12272:6;12268:57;12258:67;;12501:4;12494:5;12488:4;12481:5;12478:1;12473:3;12462:44;12454:6;12450:57;12440:67;;11988:2;12647:6;12640:14;12637:2;;;12670:3;12664:4;12657:17;12688:4;12682;12675:18;12637:2;12728:4;12725:1;12721:12;12716:17;;5466:7318;;;;;5458:4;5455:1;5451:12;5446:17;;5416:7368;;;5420:14;12807:21;12823:4;12807:21;;;13194:9;13185:5;13182:1;13178:13;13171:5;13161:31;13157:47;13246:9;13236:8;13233:23;13226:31;13223:2;;;13330:3;13324:4;13317:17;13368:4;13362;13355:18;13223:2;3343:10062;;;;;;;;;;;13632:2490;;;13698:66;13808:2;13795:16;13863:4;13859:2;13855:13;13842:27;13921:4;13917:2;13913:13;13900:27;13979:4;13975:2;13971:13;13958:27;14574:65;14566:6;14563:77;14473:66;14465:6;14462:78;14372:66;14364:6;14361:78;14271:66;14263:6;14260:78;14230:6;14223:14;14193:6;14186:14;14156:6;14149:14;14120:6;14113:14;14089:75;14086:115;14083:155;14080:259;14077:363;14074:467;14071:570;14068:2;;;14693:3;14687:4;14680:17;14731:4;14725;14718:18;14068:2;15106:5;15100:12;15094:4;15087:26;15172:5;15166:12;15160:4;15153:26;15232:66;15226:4;15219:80;15329:66;15323:4;15316:80;15426:66;15420:4;15413:80;15523:65;15517:4;15510:79;15625:5;15619:12;15613:4;15606:26;15692:5;15686:12;15679:5;15672:27;15753:6;15746:5;15739:21;15791:6;15784:5;15777:21;15829:6;15822:5;15815:21;15867:6;15860:5;15853:21;15945:4;15939;15932:5;15926:4;15923:1;15918:3;15907:43;16004:4;15998:11;15991:19;15981:7;15974:15;15971:40;15968:2;;;16047:3;16041:4;16034:17;16085:4;16079;16072:18;15968:2;13661:2461;;;;;;;;;16461:2024;;;16536:66;16638;16758:4;16752;16748:15;16735:29;16818:4;16812;16808:15;16795:29;16878:4;16872;16868:15;16855:29;16938:4;16932;16928:15;16915:29;18266:11;18258:6;18250;18243:35;18197:11;18158:1;18108:11;18100:6;18086:11;18078:6;18070;18063:35;18056:64;18012:197;17958:350;17886:11;17878:6;17870;17863:35;17817:11;17778:1;17728:11;17720:6;17706:11;17698:6;17690;17683:35;17676:64;17632:197;17578:350;17545:789;17426:1;17423;17420:8;17352:1;17340:9;17337:1;17333:17;17330:24;17293:200;17187:1;17184;17181:8;17113:1;17101:9;17098:1;17094:17;17091:24;17054:209;17021:498;16992:1364;16964:1410;16961:2;;;18410:3;18404:4;18397:17;18448:4;18442;18435:18;16961:2;16501:1984;;;;;;;;;;;19117:338;;;19185:1;19170:210;19195:1;19192;19189:8;19170:210;;;19285:4;19277;19274:1;19270:12;19263:5;19259:24;19255:35;19357:4;19350:5;19342:4;19339:1;19335:12;19328:5;19324:24;19311:51;19220:160;19212:4;19209:1;19205:12;19200:17;;19170:210;;;19174:14;19434:4;19431:1;19427:12;19420:5;19410:30;19404:4;19397:44;19152:303;;;;19475:34;:32;:34::i;:::-;1304:18214;2065:9189:1;2214:5;2201:19;2194:5;2190:31;2256:5;2243:19;2284:1;2341:5;2328:19;2321:5;2317:31;2442:5;2429:19;2422:5;2418:31;2539:5;2526:19;2519:5;2515:31;4508:4;4501:5;4494:19;4587:4;4580:5;4573:19;4721:4;4714:5;4707:19;4860:4;4853:5;4846:19;5081:1;5109:7;5102:5;5095:22;5191:5;5178:19;5171:5;5164:34;5228:5;5329:1;5322:4;5312:8;5308:19;5301:30;5498:4;5495:1;5491:12;5484:5;5480:24;5533:1;5518:2088;5543:1;5540;5537:8;5518:2088;;;5632:4;5629:1;5625:12;5618:4;5611:5;5607:16;5603:35;5717:4;5711;5704:18;5807:4;5800;5789:9;5785:20;5779:4;5766:46;5905:4;5902:1;5895:15;6006:4;5999;5996:1;5992:12;5985:26;6112:11;6099:25;6092:4;6089:1;6085:12;6078:47;6229:4;6223;6213:21;6206:4;6203:1;6199:12;6192:43;6357:4;6350;6347:1;6343:12;6336:26;6709:66;6674:4;6666;6655:9;6651:20;6638:34;6634:45;6601:200;6569:4;6558:9;6554:20;6541:34;6513:310;6486:4;6483:1;6479:12;6451:390;7188:66;7153:4;7145;7134:9;7130:20;7117:34;7113:45;7080:200;7048:4;7037:9;7033:20;7020:34;6992:310;6965:4;6962:1;6958:12;6930:390;7475:8;7472:1;7468:16;7460:4;7457:1;7453:12;7446:4;7436:8;7432:19;7428:38;7421:64;7587:4;7584:1;7580:12;7575:17;;5568:2038;5560:4;5557:1;5553:12;5548:17;;5518:2088;;;5522:14;7793:4;7782:8;7779:1;7775:16;7771:27;7761:8;7754:45;7843:8;7840:1;7836:16;7830:4;7826:27;7819:5;7812:42;7926:1;7914:13;;7975:1;7972;7968:9;7961:4;7951:8;7947:19;7940:38;8060:4;8056:1;8053;8049:9;8045:20;8039:4;8035:31;8032:1;8028:39;8023:44;;8124:1;8109:2474;8134:1;8131;8128:8;8109:2474;;;8257:4;8254:1;8250:12;8243:4;8236:5;8232:16;8228:35;8386:4;8382:1;8379;8375:9;8371:20;8361:8;8357:35;8344:49;8510:13;8503:4;8493:8;8489:19;8485:39;8472:53;8556:4;8550;8543:18;8695:4;8688;8677:9;8673:20;8667:4;8654:46;8802:14;8796:4;8792:25;8789:1;8782:36;8914:4;8907;8904:1;8900:12;8893:26;9064:4;9060:1;9057;9053:9;9049:20;9035:12;9031:39;9018:53;9011:4;9008:1;9004:12;8997:75;9161:4;9155;9145:21;9138:4;9135:1;9131:12;9124:43;9275:14;9269:4;9265:25;9258:4;9255:1;9251:12;9244:47;9592:66;9557:4;9550;9544:11;9540:22;9507:177;9476:4;9470:11;9442:264;9415:4;9412:1;9408:12;9380:344;10001:66;9970:4;9963;9957:11;9953:22;9924:165;9897:4;9891:11;9867:240;9844:4;9841:1;9837:12;9813:312;10259:14;10251:4;10241:8;10237:19;10222:13;10218:39;10211:4;10208:1;10204:12;10191:83;10437:8;10434:1;10430:16;10422:4;10418:1;10415;10411:9;10407:20;10400:4;10390:8;10386:19;10382:46;10375:72;10563:4;10559:1;10553:8;10549:19;10546:1;10542:27;10537:32;;8159:2424;;;8151:4;8148:1;8144:12;8139:17;;8109:2474;;;8113:14;10705:4;10694:8;10691:1;10687:16;10683:27;10673:8;10666:45;10805:5;10802:1;10798:13;11018:11;11012:4;11008:22;11001:5;10994:37;11069:11;11062:5;11058:23;11051:5;11044:38;11151:4;11144:5;11137:19;11194:11;11187:5;11183:23;11176:5;11169:38"},"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/dividend/DividendABIEncoder.sol:DividendABIEncoder":{"abi":"[]","bin":"604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a7230582040ddee5a5f57487be02b2d333e40c12c56bcb9bbdfd9d6c9cb9f8dc57308ba2e0029","bin-runtime":"73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a7230582040ddee5a5f57487be02b2d333e40c12c56bcb9bbdfd9d6c9cb9f8dc57308ba2e0029","srcmap":"1259:9997:1:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24","srcmap-runtime":"1259:9997:1:-;;;;;;;;"},"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/interfaces/DividendInterface.sol:DividendInterface":{"abi":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256[6]\"}],\"name\":\"validateDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","bin":"6101b0610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610610058576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a2ed4de41461005d575b600080fd5b6100ff600480360361010081101561007457600080fd5b810190808035906020019064010000000081111561009157600080fd5b8201836020820111156100a357600080fd5b803590602001918460018302840111640100000000831117156100c557600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908060c00190919291929050505061017a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013f578082015181840152602081019050610124565b50505050905090810190601f16801561016c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606094935050505056fea165627a7a72305820cb618ebb99b7f4efb355934e4a02ac61056feca6ec1790f7a741178b9969f3b80029","bin-runtime":"7300000000000000000000000000000000000000003014608060405260043610610058576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a2ed4de41461005d575b600080fd5b6100ff600480360361010081101561007457600080fd5b810190808035906020019064010000000081111561009157600080fd5b8201836020820111156100a357600080fd5b803590602001918460018302840111640100000000831117156100c557600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908060c00190919291929050505061017a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013f578082015181840152602081019050610124565b50505050905090810190601f16801561016c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606094935050505056fea165627a7a72305820cb618ebb99b7f4efb355934e4a02ac61056feca6ec1790f7a741178b9969f3b80029","srcmap":"754:200:2:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24","srcmap-runtime":"754:200:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;786:166;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;786:166:2;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;786:166:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;786:166:2;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;786:166:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;786:166:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;932:12;786:166;;;;;;:::o"}},"sourceList":["/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/dividend/Dividend.sol","/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/dividend/DividendABIEncoder.sol","/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/interfaces/DividendInterface.sol"],"sources":{"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/dividend/Dividend.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/dividend/Dividend.sol","exportedSymbols":{"Dividend":[14]}},"children":[{"attributes":{"literals":["solidity",">=","0.5",".0","<","0.6",".0"]},"id":1,"name":"PragmaDirective","src":"0:31:0"},{"attributes":{"SourceUnit":23,"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/dividend/DividendABIEncoder.sol","file":"./DividendABIEncoder.sol","scope":15,"symbolAliases":[null],"unitAlias":""},"id":2,"name":"ImportDirective","src":"33:34:0"},{"attributes":{"SourceUnit":40,"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/interfaces/DividendInterface.sol","file":"../../../interfaces/DividendInterface.sol","scope":15,"symbolAliases":[null],"unitAlias":""},"id":3,"name":"ImportDirective","src":"68:51:0"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"contract","documentation":"@title Dividend\n@author AZTEC\n@dev Library to validate AZTEC dividend proofs. \nDon't include this as an internal library. This contract uses a static memory table\nto cache elliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`. External calls to OptimizedAZTEC\ncan be treated as pure functions as this contract contains no storage and makes no external calls\n(other than to precompiles).\n * Copyright 2020 Spilsbury Holdings Ltd \n * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n * This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n * You should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.*","fullyImplemented":true,"linearizedBaseContracts":[14],"name":"Dividend","scope":15},"children":[{"attributes":{"documentation":"@dev This will take any dividend calculation proof data and attempt to verify it in zero-knowledge\nIf the proof is not valid, the transaction throws.\n@notice See DividendInterface for how method calls should be constructed.\nDividend is written in YUL to enable manual memory management and for other efficiency savings.*","implemented":true,"isConstructor":false,"kind":"fallback","modifiers":[null],"name":"","scope":14,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":4,"name":"ParameterList","src":"1741:2:0"},{"attributes":{"parameters":[null]},"children":[],"id":5,"name":"ParameterList","src":"1753:0:0"},{"children":[{"attributes":{"externalReferences":[null],"operations":"{\n    validateDividend()\n    mstore(0x40, 0x60)\n    function validateDividend()\n    {\n        mstore(0x80, calldataload(0x44))\n        mstore(0xa0, calldataload(0x64))\n        let notes := add(0x104, calldataload(0x184))\n        let n := calldataload(notes)\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let challenge := mod(calldataload(0x124), gen_order)\n        let za := mod(calldataload(0x144), gen_order)\n        let zb := mod(calldataload(0x164), gen_order)\n        if gt(za, 10000000)\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        if gt(zb, 10000000)\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        mstore(0x2a0, calldataload(0x24))\n        mstore(0x2c0, za)\n        mstore(0x2e0, zb)\n        hashCommitments(notes, n)\n        let b := add(0x300, mul(n, 0x80))\n        let x := 1\n        for {\n            let i := 0\n        }\n        lt(i, 3)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n            let k\n            let a := calldataload(add(noteIndex, 0x20))\n            let c := challenge\n            x := mulmod(x, mload(0x00), gen_order)\n            switch gt(i, 1)\n            case 1 {\n                k := addmod(mulmod(calldataload(sub(noteIndex, add(0xc0, 0xc0))), zb, gen_order), mulmod(sub(gen_order, calldataload(sub(noteIndex, 0xc0))), za, gen_order), gen_order)\n            }\n            case 0 {\n                k := calldataload(noteIndex)\n            }\n            validateCommitment(noteIndex, k, a)\n            k := mulmod(k, x, gen_order)\n            a := mulmod(a, x, gen_order)\n            c := mulmod(challenge, x, gen_order)\n            calldatacopy(0xe0, add(noteIndex, 0x80), 0x40)\n            calldatacopy(0x20, add(noteIndex, 0x40), 0x40)\n            mstore(0x120, sub(gen_order, c))\n            mstore(0x60, k)\n            mstore(0xc0, a)\n            let result := staticcall(gas(), 7, 0xe0, 0x60, 0x1a0, 0x40)\n            result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x120, 0x40))\n            result := and(result, staticcall(gas(), 7, 0x80, 0x60, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x120, 0x80, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x160, 0x80, b, 0x40))\n            if eq(i, 0)\n            {\n                mstore(0x260, mload(0x20))\n                mstore(0x280, mload(0x40))\n                mstore(0x1e0, mload(0xe0))\n                mstore(0x200, sub(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47, mload(0x100)))\n            }\n            if gt(i, 0)\n            {\n                mstore(0x60, c)\n                result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x220, 0x40))\n                result := and(result, staticcall(gas(), 6, 0x220, 0x80, 0x260, 0x40))\n                result := and(result, staticcall(gas(), 6, 0x1a0, 0x80, 0x1e0, 0x40))\n            }\n            if iszero(result)\n            {\n                mstore(0x00, 400)\n                revert(0x00, 0x20)\n            }\n            b := add(b, 0x40)\n        }\n        validatePairing(0x84)\n        let expected := mod(keccak256(0x2a0, sub(b, 0x2a0)), gen_order)\n        if iszero(eq(expected, challenge))\n        {\n            mstore(0x00, 404)\n            revert(0x00, 0x20)\n        }\n    }\n    function validatePairing(t2)\n    {\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let t2_x_1 := calldataload(t2)\n        let t2_x_2 := calldataload(add(t2, 0x20))\n        let t2_y_1 := calldataload(add(t2, 0x40))\n        let t2_y_2 := calldataload(add(t2, 0x60))\n        if or(or(or(or(or(or(or(iszero(t2_x_1), iszero(t2_x_2)), iszero(t2_y_1)), iszero(t2_y_2)), eq(t2_x_1, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)), eq(t2_x_2, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)), eq(t2_y_1, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)), eq(t2_y_2, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        mstore(0x20, mload(0x1e0))\n        mstore(0x40, mload(0x200))\n        mstore(0x80, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)\n        mstore(0x60, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)\n        mstore(0xc0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)\n        mstore(0xa0, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)\n        mstore(0xe0, mload(0x260))\n        mstore(0x100, mload(0x280))\n        mstore(0x140, t2_x_1)\n        mstore(0x120, t2_x_2)\n        mstore(0x180, t2_y_1)\n        mstore(0x160, t2_y_2)\n        let success := staticcall(gas(), 8, 0x20, 0x180, 0x20, 0x20)\n        if or(iszero(success), iszero(mload(0x20)))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function validateCommitment(note, k, a)\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let gammaX := calldataload(add(note, 0x40))\n        let gammaY := calldataload(add(note, 0x60))\n        let sigmaX := calldataload(add(note, 0x80))\n        let sigmaY := calldataload(add(note, 0xa0))\n        if iszero(and(and(and(eq(mod(a, gen_order), a), gt(a, 1)), and(eq(mod(k, gen_order), k), gt(k, 1))), and(eq(addmod(mulmod(mulmod(sigmaX, sigmaX, field_order), sigmaX, field_order), 3, field_order), mulmod(sigmaY, sigmaY, field_order)), eq(addmod(mulmod(mulmod(gammaX, gammaX, field_order), gammaX, field_order), 3, field_order), mulmod(gammaY, gammaY, field_order)))))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function hashCommitments(notes, n)\n    {\n        for {\n            let i := 0\n        }\n        lt(i, n)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let index := add(add(notes, mul(i, 0xc0)), 0x60)\n            calldatacopy(add(0x300, mul(i, 0x80)), index, 0x80)\n        }\n        mstore(0x00, keccak256(0x300, mul(n, 0x80)))\n    }\n}"},"children":[],"id":6,"name":"InlineAssembly","src":"1763:17730:0"},{"children":[{"attributes":{"argumentTypes":null,"arguments":[null],"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[null],"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"member_name":"encodeAndExit","referencedDeclaration":21,"type":"function () pure"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":22,"type":"type(library DividendABIEncoder)","value":"DividendABIEncoder"},"id":7,"name":"Identifier","src":"19475:18:0"}],"id":9,"name":"MemberAccess","src":"19475:32:0"}],"id":10,"name":"FunctionCall","src":"19475:34:0"}],"id":11,"name":"ExpressionStatement","src":"19475:34:0"}],"id":12,"name":"Block","src":"1753:17763:0"}],"id":13,"name":"FunctionDefinition","src":"1733:17783:0"}],"id":14,"name":"ContractDefinition","src":"1304:18214:0"}],"id":15,"name":"SourceUnit","src":"0:19519:0"}},"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/dividend/DividendABIEncoder.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/dividend/DividendABIEncoder.sol","exportedSymbols":{"DividendABIEncoder":[22]}},"children":[{"attributes":{"literals":["solidity",">=","0.5",".0","<","0.6",".0"]},"id":16,"name":"PragmaDirective","src":"0:31:1"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":"@title DividendABIEncoder\n@author AZTEC\n@dev Library to ABI encode the output of a dividend proof verification operation\nDon't include this as an internal library. This contract uses a static memory table to cache\nelliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`.\nExternal calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\nstorage and makes no external calls (other than to precompiles)\n\n * Copyright 2020 Spilsbury Holdings Ltd \n * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n * This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n * You should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.*","fullyImplemented":true,"linearizedBaseContracts":[22],"name":"DividendABIEncoder","scope":23},"children":[{"attributes":{"documentation":"New calldata map\n0x04:0x24      = calldata location of proofData byte array  // proof data byte array\n0x24:0x44      = message sender // address\n0x44:0x64      = h_x     // crs\n0x64:0x84      = h_y     // crs\n0x84:0xa4      = t2_x0   // crs\n0xa4:0xc4      = t2_x1   // crs\n0xc4:0xe4      = t2_y0   // crs\n0xe4:0x104     = t2_y1   // crs\n0x104:0x124    = length of proofData byte array\n0x124:0x144    = challenge\n0x144:0x164    = za\n0x164:0x184    = zb\n0x184:0x1a4    = offset in byte array to notes\n0x1a4:0x1c4    = offset in byte array to inputOwners\n0x1c4:0x1e4    = offset in byte array to outputOwners\n0x1e4:0x204    = offset in byte array to metadata","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"encodeAndExit","scope":22,"stateMutability":"pure","superFunction":null,"visibility":"internal"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":17,"name":"ParameterList","src":"2087:2:1"},{"attributes":{"parameters":[null]},"children":[],"id":18,"name":"ParameterList","src":"2104:0:1"},{"children":[{"attributes":{"externalReferences":[null],"operations":"{\n    let notes := add(0x104, calldataload(0x184))\n    let n := calldataload(notes)\n    let m := 1\n    let inputOwners := add(0x124, calldataload(0x1a4))\n    let outputOwners := add(0x124, calldataload(0x1c4))\n    let metadata := add(0x144, calldataload(0x1e4))\n    mstore(0x1a0, 0x01)\n    mstore(0x1c0, 0x60)\n    mstore(0x200, 0xc0)\n    mstore(0x240, 0x00)\n    let kPublic := 0\n    mstore(0x260, kPublic)\n    mstore(0x280, calldataload(0x124))\n    let inputPtr := 0x2a0\n    mstore(add(inputPtr, 0x20), m)\n    let s := add(0x2e0, mul(m, 0x20))\n    for {\n        let i := 0\n    }\n    lt(i, m)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        mstore(0x00, 0x01)\n        calldatacopy(0x20, add(noteIndex, 0x40), 0x80)\n        mstore(s, 0xc0)\n        mstore(add(s, 0x20), 0x01)\n        mstore(add(s, 0x40), calldataload(inputOwners))\n        mstore(add(s, 0x60), keccak256(0x00, 0xa0))\n        mstore(add(s, 0x80), 0x40)\n        mstore(add(s, 0xa0), or(calldataload(add(noteIndex, 0x40)), mul(and(calldataload(add(noteIndex, 0x60)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xc0), or(calldataload(add(noteIndex, 0x80)), mul(and(calldataload(add(noteIndex, 0xa0)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(add(inputPtr, 0x40), mul(i, 0x20)), sub(s, inputPtr))\n        s := add(s, 0xe0)\n    }\n    mstore(inputPtr, sub(sub(s, inputPtr), 0x20))\n    mstore(0x220, add(0xc0, sub(s, inputPtr)))\n    inputPtr := s\n    mstore(add(inputPtr, 0x20), sub(n, m))\n    s := add(s, add(0x40, mul(sub(n, m), 0x20)))\n    for {\n        let i := m\n    }\n    lt(i, n)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        let metadataIndex := calldataload(add(metadata, mul(sub(i, m), 0x20)))\n        let metadataLength := calldataload(add(sub(metadata, 0x40), metadataIndex))\n        mstore(0x00, 0x01)\n        calldatacopy(0x20, add(noteIndex, 0x40), 0x80)\n        mstore(s, add(0xc0, metadataLength))\n        mstore(add(s, 0x20), 0x01)\n        mstore(add(s, 0x40), calldataload(add(outputOwners, mul(sub(i, m), 0x20))))\n        mstore(add(s, 0x60), keccak256(0x00, 0xa0))\n        mstore(add(s, 0x80), add(0x40, metadataLength))\n        mstore(add(s, 0xa0), or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xc0), or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        calldatacopy(add(s, 0xe0), add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n        mstore(add(add(inputPtr, 0x40), mul(sub(i, m), 0x20)), sub(s, inputPtr))\n        s := add(s, add(mload(s), 0x20))\n    }\n    mstore(inputPtr, sub(sub(s, inputPtr), 0x20))\n    let notesLength := sub(s, 0x2a0)\n    mstore(0x1e0, add(0xa0, notesLength))\n    mstore(0x180, add(0x100, notesLength))\n    mstore(0x160, 0x20)\n    return(0x160, add(0x140, notesLength))\n}"},"children":[],"id":19,"name":"InlineAssembly","src":"2114:9140:1"}],"id":20,"name":"Block","src":"2104:9150:1"}],"id":21,"name":"FunctionDefinition","src":"2065:9189:1"}],"id":22,"name":"ContractDefinition","src":"1259:9997:1"}],"id":23,"name":"SourceUnit","src":"0:11257:1"}},"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/interfaces/DividendInterface.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/interfaces/DividendInterface.sol","exportedSymbols":{"DividendInterface":[39]}},"children":[{"attributes":{"literals":["solidity",">=","0.5",".0","<","0.6",".0"]},"id":24,"name":"PragmaDirective","src":"0:31:2"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":"@title DividendInterface\n@author AZTEC\n@dev An interface for the dividend validator contract\n * Copyright 2020 Spilsbury Holdings Ltd \n * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n * This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n * You should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.*","fullyImplemented":true,"linearizedBaseContracts":[39],"name":"DividendInterface","scope":40},"children":[{"attributes":{"documentation":null,"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"validateDividend","scope":39,"stateMutability":"pure","superFunction":null,"visibility":"external"},"children":[{"children":[{"attributes":{"constant":false,"name":"","scope":38,"stateVariable":false,"storageLocation":"calldata","type":"bytes","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes","type":"bytes"},"id":25,"name":"ElementaryTypeName","src":"821:5:2"}],"id":26,"name":"VariableDeclaration","src":"821:14:2"},{"attributes":{"constant":false,"name":"","scope":38,"stateVariable":false,"storageLocation":"default","type":"address","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"address","stateMutability":"nonpayable","type":"address"},"id":27,"name":"ElementaryTypeName","src":"845:7:2"}],"id":28,"name":"VariableDeclaration","src":"845:7:2"},{"attributes":{"constant":false,"name":"","scope":38,"stateVariable":false,"storageLocation":"calldata","type":"uint256[6]","value":null,"visibility":"internal"},"children":[{"attributes":{"type":"uint256[6]"},"children":[{"attributes":{"name":"uint","type":"uint256"},"id":29,"name":"ElementaryTypeName","src":"862:4:2"},{"attributes":{"argumentTypes":null,"hexvalue":"36","isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"subdenomination":null,"token":"number","type":null,"value":"6"},"id":30,"name":"Literal","src":"867:1:2"}],"id":31,"name":"ArrayTypeName","src":"862:7:2"}],"id":32,"name":"VariableDeclaration","src":"862:16:2"}],"id":33,"name":"ParameterList","src":"811:73:2"},{"children":[{"attributes":{"constant":false,"name":"","scope":38,"stateVariable":false,"storageLocation":"memory","type":"bytes","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes","type":"bytes"},"id":34,"name":"ElementaryTypeName","src":"932:5:2"}],"id":35,"name":"VariableDeclaration","src":"932:12:2"}],"id":36,"name":"ParameterList","src":"931:14:2"},{"attributes":{"statements":[null]},"children":[],"id":37,"name":"Block","src":"950:2:2"}],"id":38,"name":"FunctionDefinition","src":"786:166:2"}],"id":39,"name":"ContractDefinition","src":"754:200:2"}],"id":40,"name":"SourceUnit","src":"0:955:2"}}},"version":"0.5.0+commit.1d4f565a.Linux.g++"}
