{"contracts":{"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/joinSplit/JoinSplit.sol:JoinSplit":{"abi":"[{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","bin":"608060405234801561001057600080fd5b506108a8806100206000396000f3fe608060405234801561001057600080fd5b50610019610023565b60606040526102b5565b60443560805260643560a05261018435610104016101243581357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101443506828411156100785761019460005260206000fd5b60a060c0863502860103356024356102a052806102c052846102e052610164356103005282828285030990506100ae848761053a565b6080840261032001600160005b868110156102765760c0810260208a010180356020820135878a6001860114600181146100e757610102565b8893508b8d14600181146100fa57610100565b848c0394505b505b5061010e82848661048b565b89600051870995508b600186011160018114610131576000811461015057610157565b8a848c038a0898508a87850993508a87840992508a878b099150610157565b8a848a0898505b5060406080850160e0376040808501602037808a0361012052826060528160c05260406101a0606060e060075afa60406101206060602060075afa8116905060406101606060608060075afa811690506040610160608061012060065afa81169050604088608061016060065afa811690508c86141561021157602051610260526040516102805260e0516101e052610100517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703610200525b8c86111561024d578160605260406102206060602060075afa6040610260608061022060065afa60406101e060806101a060065afa1616811690505b8015156102605761019060005260206000fd5b60408801975050505050506001810190506100bb565b508587101561028a5761028960846102ba565b5b846102a083036102a0200684811415156102aa5761019460005260206000fd5b505050505050505050565b610486565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781356020830135604084013560608501357f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81147f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83147f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c285147f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed87148415861588158a1517171717171717156103985761019060005260206000fd5b6101e051602052610200516040527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6080527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26060527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c0527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a0526102605160e05261028051610100528361014052826101205281610180528061016052602080610180602060085afa602051158115171561047d5761019060005260206000fd5b50505050505050565b610535565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408301356060840135608085013560a086013584838409856003878789898a090908148582830986600388868a888909090814166001891189888b06141660018b118b898d0614161616151561052a5761019060005260206000fd5b505050505050505050565b610576565b60005b8281101561056657606060c082028301016080816080840261032001375060018101905061053d565b5060808202610320206000525050565b61057e610580565b005b61018435610104018035610124356101a435610124016101c435610124016101e4356101440160016101a05260606101c05260c061020052610164356102405260a060c0873502870103357f183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000811160018114610603576000811461062f57610635565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001820361026052610635565b81610260525b5061014435610280526102a0856020820152602086026102e00160005b8781101561072f5760c0810260208b0101600160005260806040820160203760a060002060c05260c08352600160208401526201010160a05260208202880135604084015260c0516060840152604060808401527f800000000000000000000000000000000000000000000000000000000000000060016060830135160260408201351760a08401527f8000000000000000000000000000000000000000000000000000000000000000600160a0830135160260808201351760c08401528383036020830260408601015260e08301925050600181019050610652565b50602082820303825281810360c00161022052809150868803602083015260208789030260400181019050865b8881101561084d5760c0810260208b01016020898303028601358060408803013560016000526080604084016020378060c00185526001602086015260208b850302890135604086015260a060002060608601528060400160808601527f8000000000000000000000000000000000000000000000000000000000000000600160405116026020511760a08601527f8000000000000000000000000000000000000000000000000000000000000000600160805116026060511760c08601528060208903830160e087013785850360208c86030260408801015260208551018501945050505060018101905061075c565b5060208282030382526102a081038060a0016101e0528061010001610180526020610160528061014001610160f3fea165627a7a723058209cd1131dc7620527db9e5e08b0e36ba58d037d6d5dd339fff7b71d172beb894f0029","bin-runtime":"608060405234801561001057600080fd5b50610019610023565b60606040526102b5565b60443560805260643560a05261018435610104016101243581357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101443506828411156100785761019460005260206000fd5b60a060c0863502860103356024356102a052806102c052846102e052610164356103005282828285030990506100ae848761053a565b6080840261032001600160005b868110156102765760c0810260208a010180356020820135878a6001860114600181146100e757610102565b8893508b8d14600181146100fa57610100565b848c0394505b505b5061010e82848661048b565b89600051870995508b600186011160018114610131576000811461015057610157565b8a848c038a0898508a87850993508a87840992508a878b099150610157565b8a848a0898505b5060406080850160e0376040808501602037808a0361012052826060528160c05260406101a0606060e060075afa60406101206060602060075afa8116905060406101606060608060075afa811690506040610160608061012060065afa81169050604088608061016060065afa811690508c86141561021157602051610260526040516102805260e0516101e052610100517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703610200525b8c86111561024d578160605260406102206060602060075afa6040610260608061022060065afa60406101e060806101a060065afa1616811690505b8015156102605761019060005260206000fd5b60408801975050505050506001810190506100bb565b508587101561028a5761028960846102ba565b5b846102a083036102a0200684811415156102aa5761019460005260206000fd5b505050505050505050565b610486565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781356020830135604084013560608501357f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81147f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83147f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c285147f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed87148415861588158a1517171717171717156103985761019060005260206000fd5b6101e051602052610200516040527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6080527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26060527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c0527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a0526102605160e05261028051610100528361014052826101205281610180528061016052602080610180602060085afa602051158115171561047d5761019060005260206000fd5b50505050505050565b610535565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408301356060840135608085013560a086013584838409856003878789898a090908148582830986600388868a888909090814166001891189888b06141660018b118b898d0614161616151561052a5761019060005260206000fd5b505050505050505050565b610576565b60005b8281101561056657606060c082028301016080816080840261032001375060018101905061053d565b5060808202610320206000525050565b61057e610580565b005b61018435610104018035610124356101a435610124016101c435610124016101e4356101440160016101a05260606101c05260c061020052610164356102405260a060c0873502870103357f183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000811160018114610603576000811461062f57610635565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001820361026052610635565b81610260525b5061014435610280526102a0856020820152602086026102e00160005b8781101561072f5760c0810260208b0101600160005260806040820160203760a060002060c05260c08352600160208401526201010160a05260208202880135604084015260c0516060840152604060808401527f800000000000000000000000000000000000000000000000000000000000000060016060830135160260408201351760a08401527f8000000000000000000000000000000000000000000000000000000000000000600160a0830135160260808201351760c08401528383036020830260408601015260e08301925050600181019050610652565b50602082820303825281810360c00161022052809150868803602083015260208789030260400181019050865b8881101561084d5760c0810260208b01016020898303028601358060408803013560016000526080604084016020378060c00185526001602086015260208b850302890135604086015260a060002060608601528060400160808601527f8000000000000000000000000000000000000000000000000000000000000000600160405116026020511760a08601527f8000000000000000000000000000000000000000000000000000000000000000600160805116026060511760c08601528060208903830160e087013785850360208c86030260408801015260208551018501945050505060018101905061075c565b5060208282030382526102a081038060a0016101e0528061010001610180526020610160528061014001610160f3fea165627a7a723058209cd1131dc7620527db9e5e08b0e36ba58d037d6d5dd339fff7b71d172beb894f0029","srcmap":"1317:18501:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1317:18501:0;;;;;;;","srcmap-runtime":"1317:18501:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1317:18501:0;2305:19;;;;2590:4;2584;2577:18;3524:10035;;;3597:4;3584:18;3578:4;3571:32;3646:4;3633:18;3627:4;3620:32;3706:5;3693:19;3686:5;3682:31;3752:5;3739:19;3797:5;3784:19;3837:66;3962:9;3954:5;3941:19;3937:35;4034:1;4031;4028:8;4025:2;;;4052:3;4046:4;4039:17;4070:4;4064;4057:18;4025:2;4229:4;4221;4213:5;4200:19;4196:30;4189:5;4185:42;4181:53;4168:67;4332:4;4319:18;4312:5;4305:33;4369:2;4362:5;4355:17;4403:1;4396:5;4389:16;4449:5;4436:19;4429:5;4422:34;4517:9;4506;4501:2;4490:9;4486:18;4479:48;4473:54;;4577:25;4600:1;4593:5;4577:25;;;4646:4;4643:1;4639:12;4632:5;4628:24;4680:1;5004;4989:7333;5014:1;5011;5008:8;4989:7333;;;5167:4;5164:1;5160:12;5153:4;5146:5;5142:16;5138:35;6372:9;6359:23;6440:4;6429:9;6425:20;6412:34;6476:9;7015:1;7008:4;7005:1;7001:12;6998:19;7043:1;7038:279;;;;6991:326;;7038:279;7076:2;7071:7;;7183:1;7180;7177:8;7215:1;7210:85;;;;7170:125;;7210:85;7267:1;7256:9;7252:17;7247:22;;7170:125;;6991:326;;7402:35;7435:1;7432;7421:9;7402:35;;;7487:9;7480:4;7474:11;7471:1;7464:33;7459:38;;7680:1;7673:4;7670:1;7666:12;7663:19;7708:1;7703:371;;;;8100:1;8095:193;;;;7656:632;;7703:371;7874:9;7870:1;7859:9;7855:17;7851:2;7844:40;7838:46;;7928:9;7925:1;7922;7915:23;7910:28;;7981:9;7978:1;7975;7968:23;7963:28;;8042:9;8039:1;8028:9;8021:31;8016:36;;7703:371;;8095:193;8256:9;8253:1;8249:2;8242:24;8236:30;;7656:632;;8791:4;8784;8773:9;8769:20;8763:4;8750:46;8858:4;8851;8840:9;8836:20;8830:4;8817:46;8913:1;8902:9;8898:17;8891:5;8884:32;8951:1;8945:4;8938:15;8987:1;8981:4;8974:15;9393:4;9386:5;9380:4;9374;9371:1;9366:3;9355:43;9479:4;9472:5;9466:4;9460;9457:1;9452:3;9441:43;9433:6;9429:56;9419:66;;9566:4;9559:5;9553:4;9547;9544:1;9539:3;9528:43;9520:6;9516:56;9506:66;;9853:4;9846:5;9840:4;9833:5;9830:1;9825:3;9814:44;9806:6;9802:57;9792:67;;10088:4;10085:1;10079:4;10072:5;10069:1;10064:3;10053:40;10045:6;10041:53;10031:63;;10387:1;10384;10381:8;10378:2;;;10436:4;10430:11;10423:5;10416:26;10487:4;10481:11;10474:5;10467:26;10538:4;10532:11;10525:5;10518:26;10718:5;10712:12;10644:66;10640:85;10605:5;10569:182;10378:2;11061:1;11058;11055:8;11052:2;;;11103:1;11097:4;11090:15;11520:4;11513:5;11507:4;11501;11498:1;11493:3;11482:43;11409:4;11402:5;11396:4;11389:5;11386:1;11381:3;11370:44;11327:4;11320:5;11314:4;11307:5;11304:1;11299:3;11288:44;11247:201;11210:345;11174:6;11141:440;11131:450;;11052:2;12186:6;12179:14;12176:2;;;12209:3;12203:4;12196:17;12227:4;12221;12214:18;12176:2;12266:4;12263:1;12259:12;12254:17;;5039:7283;;;;;5031:4;5028:1;5024:12;5019:17;;4989:7333;;;4993:14;12765:1;12762;12759:8;12756:2;;;12790:21;12806:4;12790:21;;;12756:2;13169:9;13160:5;13157:1;13153:13;13146:5;13136:31;13132:47;13219:9;13209:8;13206:23;13199:31;13196:2;;;13316:3;13310:4;13303:17;13354:4;13348;13341:18;13196:2;3553:10006;;;;;;;;;;;13809:2508;;;13875:66;13985:2;13972:16;14040:4;14036:2;14032:13;14019:27;14098:4;14094:2;14090:13;14077:27;14156:4;14152:2;14148:13;14135:27;14751:65;14743:6;14740:77;14650:66;14642:6;14639:78;14549:66;14541:6;14538:78;14448:66;14440:6;14437:78;14407:6;14400:14;14370:6;14363:14;14333:6;14326:14;14297:6;14290:14;14266:75;14263:115;14260:155;14257:259;14254:363;14251:467;14248:570;14245:2;;;14870:3;14864:4;14857:17;14908:4;14902;14895:18;14245:2;15301:5;15295:12;15289:4;15282:26;15367:5;15361:12;15355:4;15348:26;15427:66;15421:4;15414:80;15524:66;15518:4;15511:80;15621:66;15615:4;15608:80;15718:65;15712:4;15705:79;15820:5;15814:12;15808:4;15801:26;15887:5;15881:12;15874:5;15867:27;15948:6;15941:5;15934:21;15986:6;15979:5;15972:21;16024:6;16017:5;16010:21;16062:6;16055:5;16048:21;16140:4;16134;16127:5;16121:4;16118:1;16113:3;16102:43;16199:4;16193:11;16186:19;16176:7;16169:15;16166:40;16163:2;;;16242:3;16236:4;16229:17;16280:4;16274;16267:18;16163:2;13838:2479;;;;;;;;;16656:1994;;;16731:66;16833;16953:4;16947;16943:15;16930:29;17013:4;17007;17003:15;16990:29;17073:4;17067;17063:15;17050:29;17133:4;17127;17123:15;17110:29;18435:11;18427:6;18419;18412:35;18341:11;18306:1;18260:11;18252:6;18238:11;18230:6;18222;18215:35;18208:64;18168:214;18118:355;18054:11;18046:6;18038;18031:35;17960:11;17925:1;17879:11;17871:6;17857:11;17849:6;17841;17834:35;17827:64;17787:214;17737:355;17708:791;17593:1;17590;17587:8;17523:1;17511:9;17508:1;17504:17;17501:24;17468:188;17370:1;17367;17364:8;17300:1;17288:9;17285:1;17281:17;17278:24;17245:197;17216:466;17187:1334;17159:1380;17156:2;;;18575:3;18569:4;18562:17;18613:4;18607;18600:18;17156:2;16696:1954;;;;;;;;;;;19241:338;;;19309:1;19294:210;19319:1;19316;19313:8;19294:210;;;19409:4;19401;19398:1;19394:12;19387:5;19383:24;19379:35;19481:4;19474:5;19466:4;19463:1;19459:12;19452:5;19448:24;19435:51;19344:160;19336:4;19333:1;19329:12;19324:17;;19294:210;;;19298:14;19558:4;19555:1;19551:12;19544:5;19534:30;19528:4;19521:44;19276:303;;;;19774:35;:33;:35::i;:::-;1317:18501;2053:9614:1;2202:5;2189:19;2182:5;2178:31;2244:5;2231:19;2285:5;2272:19;2347:5;2334:19;2327:5;2323:31;2447:5;2434:19;2427:5;2423:31;2544:5;2531:19;2524:5;2520:31;4595:4;4588:5;4581:19;4674:4;4667:5;4660:19;4808:4;4801:5;4794:19;4960:5;4947:19;4940:5;4933:34;5244:4;5236;5228:5;5215:19;5211:30;5204:5;5200:42;5196:53;5183:67;5282:77;5273:7;5270:90;5378:1;5373:134;;;;5525:1;5520:61;;;;5263:318;;5373:134;5425:66;5416:7;5412:80;5405:5;5398:95;5373:134;;5520:61;5559:7;5552:5;5545:22;5263:318;;5622:5;5609:19;5602:5;5595:34;5696:5;5797:1;5790:4;5780:8;5776:19;5769:30;5966:4;5963:1;5959:12;5952:5;5948:24;6001:1;5986:2198;6011:1;6008;6005:8;5986:2198;;;6100:4;6097:1;6093:12;6086:4;6079:5;6075:16;6071:35;6185:4;6179;6172:18;6261:4;6254;6243:9;6239:20;6233:4;6220:46;6332:4;6326;6316:21;6310:4;6303:35;6424:4;6421:1;6414:15;6506:4;6499;6496:1;6492:12;6485:26;6541:7;6535:4;6528:21;6698:4;6695:1;6691:12;6678:11;6674:30;6661:44;6654:4;6651:1;6647:12;6640:66;6800:4;6794:11;6787:4;6784:1;6780:12;6773:33;6927:4;6920;6917:1;6913:12;6906:26;7279:66;7244:4;7236;7225:9;7221:20;7208:34;7204:45;7171:200;7139:4;7128:9;7124:20;7111:34;7083:310;7056:4;7053:1;7049:12;7021:390;7758:66;7723:4;7715;7704:9;7700:20;7687:34;7683:45;7650:200;7618:4;7607:9;7603:20;7590:34;7562:310;7535:4;7532:1;7528:12;7500:390;8045:8;8042:1;8038:16;8030:4;8027:1;8023:12;8016:4;8006:8;8002:19;7998:38;7991:64;8165:4;8162:1;8158:12;8153:17;;6036:2148;6028:4;6025:1;6021:12;6016:17;;5986:2198;;;5990:14;8370:4;8359:8;8356:1;8352:16;8348:27;8338:8;8331:45;8420:8;8417:1;8413:16;8407:4;8403:27;8396:5;8389:42;8503:1;8491:13;;8552:1;8549;8545:9;8538:4;8528:8;8524:19;8517:38;8637:4;8633:1;8630;8626:9;8622:20;8616:4;8612:31;8609:1;8605:39;8600:44;;8701:1;8686:2441;8711:1;8708;8705:8;8686:2441;;;8834:4;8831:1;8827:12;8820:4;8813:5;8809:16;8805:35;8963:4;8959:1;8956;8952:9;8948:20;8938:8;8934:35;8921:49;9087:13;9080:4;9070:8;9066:19;9062:39;9049:53;9182:4;9176;9169:18;9258:4;9251;9240:9;9236:20;9230:4;9217:46;9365:14;9359:4;9355:25;9352:1;9345:36;9458:4;9451;9448:1;9444:12;9437:26;9608:4;9604:1;9601;9597:9;9593:20;9579:12;9575:39;9562:53;9555:4;9552:1;9548:12;9541:75;9705:4;9699;9689:21;9682:4;9679:1;9675:12;9668:43;9819:14;9813:4;9809:25;9802:4;9799:1;9795:12;9788:47;10136:66;10101:4;10094;10088:11;10084:22;10051:177;10020:4;10014:11;9986:264;9959:4;9956:1;9952:12;9924:344;10545:66;10514:4;10507;10501:11;10497:22;10468:165;10441:4;10435:11;10411:240;10388:4;10385:1;10381:12;10357:312;10803:14;10795:4;10785:8;10781:19;10766:13;10762:39;10755:4;10752:1;10748:12;10735:83;10981:8;10978:1;10974:16;10966:4;10962:1;10959;10955:9;10951:20;10944:4;10934:8;10930:19;10926:46;10919:72;11107:4;11103:1;11097:8;11093:19;11090:1;11086:27;11081:32;;8736:2391;;;8728:4;8725:1;8721:12;8716:17;;8686:2441;;;8690:14;11249:4;11238:8;11235:1;11231:16;11227:27;11217:8;11210:45;11349:5;11346:1;11342:13;11392:11;11386:4;11382:22;11375:5;11368:37;11483:11;11476:5;11472:23;11465:5;11458:38;11564:4;11557:5;11550:19;11607:11;11600:5;11596:23;11589:5;11582:38"},"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/joinSplit/JoinSplitABIEncoder.sol:JoinSplitABIEncoder":{"abi":"[]","bin":"604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820826d2b4f2d3b63c4205659824aebba62a78183d76cfa35fe689d87b0cb3743030029","bin-runtime":"73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a72305820826d2b4f2d3b63c4205659824aebba62a78183d76cfa35fe689d87b0cb3743030029","srcmap":"1260:10409:1:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24","srcmap-runtime":"1260:10409:1:-;;;;;;;;"},"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/interfaces/JoinSplitInterface.sol:JoinSplitInterface":{"abi":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256[6]\"}],\"name\":\"validateJoinSplit\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","bin":"","bin-runtime":"","srcmap":"","srcmap-runtime":""}},"sourceList":["/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/joinSplit/JoinSplit.sol","/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/joinSplit/JoinSplitABIEncoder.sol","/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/interfaces/JoinSplitInterface.sol"],"sources":{"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/joinSplit/JoinSplit.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/joinSplit/JoinSplit.sol","exportedSymbols":{"JoinSplit":[14]}},"children":[{"attributes":{"literals":["solidity",">=","0.5",".0","<","0.6",".0"]},"id":1,"name":"PragmaDirective","src":"0:31:0"},{"attributes":{"SourceUnit":23,"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/joinSplit/JoinSplitABIEncoder.sol","file":"./JoinSplitABIEncoder.sol","scope":15,"symbolAliases":[null],"unitAlias":""},"id":2,"name":"ImportDirective","src":"33:35:0"},{"attributes":{"SourceUnit":39,"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/interfaces/JoinSplitInterface.sol","file":"../../../interfaces/JoinSplitInterface.sol","scope":15,"symbolAliases":[null],"unitAlias":""},"id":3,"name":"ImportDirective","src":"69:52:0"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"contract","documentation":"@title \n@author Zachary Williamson, AZTEC\n@dev Library to validate AZTEC JoinSplit proofs\nDon't include this as an internal library. This contract uses a static memory table to cache\nelliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`.\nExternal calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\nstorage and makes no external calls (other than to precompiles)\n * Copyright 2020 Spilsbury Holdings Ltd \n * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n * This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n * You should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.*","fullyImplemented":true,"linearizedBaseContracts":[14],"name":"JoinSplit","scope":15},"children":[{"attributes":{"documentation":"@dev AZTEC will take any transaction sent to it and attempt to validate a zero knowledge proof.\nIf the proof is not valid, the transaction throws.\n@notice See AZTECInterface for how method calls should be constructed.\n'Cost' of raw elliptic curve primitives for a transaction:\n260,700 gas + (124,500 * number of input notes) + (167,600 * number of output notes).\nFor a basic 'joinSplit' with 2 inputs and 2 outputs = 844,900 gas.\nAZTEC is written in YUL to enable manual memory management and for other efficiency savings.*","implemented":true,"isConstructor":false,"kind":"fallback","modifiers":[null],"name":"","scope":14,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":4,"name":"ParameterList","src":"1980:2:0"},{"attributes":{"parameters":[null]},"children":[],"id":5,"name":"ParameterList","src":"1992:0:0"},{"children":[{"attributes":{"externalReferences":[null],"operations":"{\n    validateJoinSplit()\n    mstore(0x40, 0x60)\n    function validateJoinSplit()\n    {\n        mstore(0x80, calldataload(0x44))\n        mstore(0xa0, calldataload(0x64))\n        let notes := add(0x104, calldataload(0x184))\n        let m := calldataload(0x124)\n        let n := calldataload(notes)\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let challenge := mod(calldataload(0x144), gen_order)\n        if gt(m, n)\n        {\n            mstore(0x00, 404)\n            revert(0x00, 0x20)\n        }\n        let kn := calldataload(sub(add(notes, mul(calldataload(notes), 0xc0)), 0xa0))\n        mstore(0x2a0, calldataload(0x24))\n        mstore(0x2c0, kn)\n        mstore(0x2e0, m)\n        mstore(0x300, calldataload(0x164))\n        kn := mulmod(sub(gen_order, kn), challenge, gen_order)\n        hashCommitments(notes, n)\n        let b := add(0x320, mul(n, 0x80))\n        let x := 1\n        for {\n            let i := 0\n        }\n        lt(i, n)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n            let k := calldataload(noteIndex)\n            let a := calldataload(add(noteIndex, 0x20))\n            let c := challenge\n            switch eq(add(i, 0x01), n)\n            case 1 {\n                k := kn\n                switch eq(m, n)\n                case 1 {\n                    k := sub(gen_order, k)\n                }\n            }\n            validateCommitment(noteIndex, k, a)\n            x := mulmod(x, mload(0x00), gen_order)\n            switch gt(add(i, 0x01), m)\n            case 1 {\n                kn := addmod(kn, sub(gen_order, k), gen_order)\n                k := mulmod(k, x, gen_order)\n                a := mulmod(a, x, gen_order)\n                c := mulmod(challenge, x, gen_order)\n            }\n            case 0 {\n                kn := addmod(kn, k, gen_order)\n            }\n            calldatacopy(0xe0, add(noteIndex, 0x80), 0x40)\n            calldatacopy(0x20, add(noteIndex, 0x40), 0x40)\n            mstore(0x120, sub(gen_order, c))\n            mstore(0x60, k)\n            mstore(0xc0, a)\n            let result := staticcall(gas(), 7, 0xe0, 0x60, 0x1a0, 0x40)\n            result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x120, 0x40))\n            result := and(result, staticcall(gas(), 7, 0x80, 0x60, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x120, 0x80, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x160, 0x80, b, 0x40))\n            if eq(i, m)\n            {\n                mstore(0x260, mload(0x20))\n                mstore(0x280, mload(0x40))\n                mstore(0x1e0, mload(0xe0))\n                mstore(0x200, sub(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47, mload(0x100)))\n            }\n            if gt(i, m)\n            {\n                mstore(0x60, c)\n                result := and(result, and(and(staticcall(gas(), 6, 0x1a0, 0x80, 0x1e0, 0x40), staticcall(gas(), 6, 0x220, 0x80, 0x260, 0x40)), staticcall(gas(), 7, 0x20, 0x60, 0x220, 0x40)))\n            }\n            if iszero(result)\n            {\n                mstore(0x00, 400)\n                revert(0x00, 0x20)\n            }\n            b := add(b, 0x40)\n        }\n        if lt(m, n)\n        {\n            validatePairing(0x84)\n        }\n        let expected := mod(keccak256(0x2a0, sub(b, 0x2a0)), gen_order)\n        if iszero(eq(expected, challenge))\n        {\n            mstore(0x00, 404)\n            revert(0x00, 0x20)\n        }\n    }\n    function validatePairing(t2)\n    {\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let t2_x_1 := calldataload(t2)\n        let t2_x_2 := calldataload(add(t2, 0x20))\n        let t2_y_1 := calldataload(add(t2, 0x40))\n        let t2_y_2 := calldataload(add(t2, 0x60))\n        if or(or(or(or(or(or(or(iszero(t2_x_1), iszero(t2_x_2)), iszero(t2_y_1)), iszero(t2_y_2)), eq(t2_x_1, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)), eq(t2_x_2, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)), eq(t2_y_1, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)), eq(t2_y_2, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        mstore(0x20, mload(0x1e0))\n        mstore(0x40, mload(0x200))\n        mstore(0x80, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)\n        mstore(0x60, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)\n        mstore(0xc0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)\n        mstore(0xa0, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)\n        mstore(0xe0, mload(0x260))\n        mstore(0x100, mload(0x280))\n        mstore(0x140, t2_x_1)\n        mstore(0x120, t2_x_2)\n        mstore(0x180, t2_y_1)\n        mstore(0x160, t2_y_2)\n        let success := staticcall(gas(), 8, 0x20, 0x180, 0x20, 0x20)\n        if or(iszero(success), iszero(mload(0x20)))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function validateCommitment(note, k, a)\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let gammaX := calldataload(add(note, 0x40))\n        let gammaY := calldataload(add(note, 0x60))\n        let sigmaX := calldataload(add(note, 0x80))\n        let sigmaY := calldataload(add(note, 0xa0))\n        if iszero(and(and(and(eq(mod(a, gen_order), a), gt(a, 1)), and(eq(mod(k, gen_order), k), gt(k, 1))), and(eq(addmod(mulmod(mulmod(sigmaX, sigmaX, field_order), sigmaX, field_order), 3, field_order), mulmod(sigmaY, sigmaY, field_order)), eq(addmod(mulmod(mulmod(gammaX, gammaX, field_order), gammaX, field_order), 3, field_order), mulmod(gammaY, gammaY, field_order)))))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function hashCommitments(notes, n)\n    {\n        for {\n            let i := 0\n        }\n        lt(i, n)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let index := add(add(notes, mul(i, 0xc0)), 0x60)\n            calldatacopy(add(0x320, mul(i, 0x80)), index, 0x80)\n        }\n        mstore(0x00, keccak256(0x320, mul(n, 0x80)))\n    }\n}"},"children":[],"id":6,"name":"InlineAssembly","src":"2002:17791:0"},{"children":[{"attributes":{"argumentTypes":null,"arguments":[null],"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[null],"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"member_name":"encodeAndExit","referencedDeclaration":21,"type":"function () pure"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":22,"type":"type(library JoinSplitABIEncoder)","value":"JoinSplitABIEncoder"},"id":7,"name":"Identifier","src":"19774:19:0"}],"id":9,"name":"MemberAccess","src":"19774:33:0"}],"id":10,"name":"FunctionCall","src":"19774:35:0"}],"id":11,"name":"ExpressionStatement","src":"19774:35:0"}],"id":12,"name":"Block","src":"1992:17824:0"}],"id":13,"name":"FunctionDefinition","src":"1972:17844:0"}],"id":14,"name":"ContractDefinition","src":"1317:18501:0"}],"id":15,"name":"SourceUnit","src":"0:19819:0"}},"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/joinSplit/JoinSplitABIEncoder.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/ACE/validators/joinSplit/JoinSplitABIEncoder.sol","exportedSymbols":{"JoinSplitABIEncoder":[22]}},"children":[{"attributes":{"literals":["solidity",">=","0.5",".0","<","0.6",".0"]},"id":16,"name":"PragmaDirective","src":"0:31:1"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":"@title JoinSplitABIEncoder\n@author AZTEC\n@dev Library to ABI encode the output of a join-split proof verification operation\nDon't include this as an internal library. This contract uses a static memory table to cache\nelliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`.\nExternal calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\nstorage and makes no external calls (other than to precompiles)\n * Copyright 2020 Spilsbury Holdings Ltd \n * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n * This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n * You should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.*","fullyImplemented":true,"linearizedBaseContracts":[22],"name":"JoinSplitABIEncoder","scope":23},"children":[{"attributes":{"documentation":"Calldata map\n0x04:0x24      = calldata location of proofData byte array\n0x24:0x44      = message sender\n0x44:0x64      = h_x\n0x64:0x84      = h_y\n0x84:0xa4      = t2_x0\n0xa4:0xc4      = t2_x1\n0xc4:0xe4      = t2_y0\n0xe4:0x104     = t2_y1\n0x104:0x124    = length of proofData byte array\n0x124:0x144    = m\n0x144:0x164    = challenge\n0x164:0x184    = publicOwner\n0x184:0x1a4    = offset in byte array to notes\n0x1a4:0x1c4    = offset in byte array to inputOwners\n0x1c4:0x1e4    = offset in byte array to outputOwners\n0x1e4:0x204    = offset in byte array to metadata","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"encodeAndExit","scope":22,"stateMutability":"pure","superFunction":null,"visibility":"internal"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":17,"name":"ParameterList","src":"2075:2:1"},{"attributes":{"parameters":[null]},"children":[],"id":18,"name":"ParameterList","src":"2092:0:1"},{"children":[{"attributes":{"externalReferences":[null],"operations":"{\n    let notes := add(0x104, calldataload(0x184))\n    let n := calldataload(notes)\n    let m := calldataload(0x124)\n    let inputOwners := add(0x124, calldataload(0x1a4))\n    let outputOwners := add(0x124, calldataload(0x1c4))\n    let metadata := add(0x144, calldataload(0x1e4))\n    mstore(0x1a0, 0x01)\n    mstore(0x1c0, 0x60)\n    mstore(0x200, 0xc0)\n    mstore(0x240, calldataload(0x164))\n    let kPublic := calldataload(sub(add(notes, mul(calldataload(notes), 0xc0)), 0xa0))\n    switch gt(kPublic, 10944121435919637611123202872628637544274182200208017171849102093287904247808)\n    case 1 {\n        mstore(0x260, sub(kPublic, 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001))\n    }\n    case 0 {\n        mstore(0x260, kPublic)\n    }\n    mstore(0x280, calldataload(0x144))\n    let inputPtr := 0x2a0\n    mstore(add(inputPtr, 0x20), m)\n    let s := add(0x2e0, mul(m, 0x20))\n    for {\n        let i := 0\n    }\n    lt(i, m)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        mstore(0x00, 0x01)\n        calldatacopy(0x20, add(noteIndex, 0x40), 0x80)\n        mstore(0xc0, keccak256(0x00, 0xa0))\n        mstore(s, 0xc0)\n        mstore(add(s, 0x20), 0x01)\n        mstore(0xa0, 0x10101)\n        mstore(add(s, 0x40), calldataload(add(inputOwners, mul(i, 0x20))))\n        mstore(add(s, 0x60), mload(0xc0))\n        mstore(add(s, 0x80), 0x40)\n        mstore(add(s, 0xa0), or(calldataload(add(noteIndex, 0x40)), mul(and(calldataload(add(noteIndex, 0x60)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xc0), or(calldataload(add(noteIndex, 0x80)), mul(and(calldataload(add(noteIndex, 0xa0)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(add(inputPtr, 0x40), mul(i, 0x20)), sub(s, inputPtr))\n        s := add(s, 0xe0)\n    }\n    mstore(inputPtr, sub(sub(s, inputPtr), 0x20))\n    mstore(0x220, add(0xc0, sub(s, inputPtr)))\n    inputPtr := s\n    mstore(add(inputPtr, 0x20), sub(n, m))\n    s := add(s, add(0x40, mul(sub(n, m), 0x20)))\n    for {\n        let i := m\n    }\n    lt(i, n)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        let metadataIndex := calldataload(add(metadata, mul(sub(i, m), 0x20)))\n        let metadataLength := calldataload(add(sub(metadata, 0x40), metadataIndex))\n        mstore(0x00, 0x01)\n        calldatacopy(0x20, add(noteIndex, 0x40), 0x80)\n        mstore(s, add(0xc0, metadataLength))\n        mstore(add(s, 0x20), 0x01)\n        mstore(add(s, 0x40), calldataload(add(outputOwners, mul(sub(i, m), 0x20))))\n        mstore(add(s, 0x60), keccak256(0x00, 0xa0))\n        mstore(add(s, 0x80), add(0x40, metadataLength))\n        mstore(add(s, 0xa0), or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xc0), or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        calldatacopy(add(s, 0xe0), add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n        mstore(add(add(inputPtr, 0x40), mul(sub(i, m), 0x20)), sub(s, inputPtr))\n        s := add(s, add(mload(s), 0x20))\n    }\n    mstore(inputPtr, sub(sub(s, inputPtr), 0x20))\n    let notesLength := sub(s, 0x2a0)\n    mstore(0x1e0, add(0xa0, notesLength))\n    mstore(0x180, add(0x100, notesLength))\n    mstore(0x160, 0x20)\n    return(0x160, add(0x140, notesLength))\n}"},"children":[],"id":19,"name":"InlineAssembly","src":"2102:9565:1"}],"id":20,"name":"Block","src":"2092:9575:1"}],"id":21,"name":"FunctionDefinition","src":"2053:9614:1"}],"id":22,"name":"ContractDefinition","src":"1260:10409:1"}],"id":23,"name":"SourceUnit","src":"0:11671:1"}},"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/interfaces/JoinSplitInterface.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/consensys-AZTEC_Protocol/AZTEC-develop/packages/protocol/contracts/interfaces/JoinSplitInterface.sol","exportedSymbols":{"JoinSplitInterface":[38]}},"children":[{"attributes":{"literals":["solidity",">=","0.5",".0","<","0.6",".0"]},"id":24,"name":"PragmaDirective","src":"0:31:2"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"interface","documentation":"@title JoinSplitInterface\n@author AZTEC\n@dev An interface defining the JoinSplitInterface standard.\n\n * Copyright 2020 Spilsbury Holdings Ltd \n * Licensed under the GNU Lesser General Public Licence, Version 3.0 (the \"License\");\nyou may not use this file except in compliance with the License.\n * This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n * You should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.*","fullyImplemented":false,"linearizedBaseContracts":[38],"name":"JoinSplitInterface","scope":39},"children":[{"attributes":{"body":null,"documentation":null,"implemented":false,"isConstructor":false,"kind":"function","modifiers":[null],"name":"validateJoinSplit","scope":38,"stateMutability":"pure","superFunction":null,"visibility":"external"},"children":[{"children":[{"attributes":{"constant":false,"name":"","scope":37,"stateVariable":false,"storageLocation":"calldata","type":"bytes","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes","type":"bytes"},"id":25,"name":"ElementaryTypeName","src":"889:5:2"}],"id":26,"name":"VariableDeclaration","src":"889:14:2"},{"attributes":{"constant":false,"name":"","scope":37,"stateVariable":false,"storageLocation":"default","type":"address","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"address","stateMutability":"nonpayable","type":"address"},"id":27,"name":"ElementaryTypeName","src":"914:7:2"}],"id":28,"name":"VariableDeclaration","src":"914:7:2"},{"attributes":{"constant":false,"name":"","scope":37,"stateVariable":false,"storageLocation":"calldata","type":"uint256[6]","value":null,"visibility":"internal"},"children":[{"attributes":{"type":"uint256[6]"},"children":[{"attributes":{"name":"uint","type":"uint256"},"id":29,"name":"ElementaryTypeName","src":"932:4:2"},{"attributes":{"argumentTypes":null,"hexvalue":"36","isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"subdenomination":null,"token":"number","type":null,"value":"6"},"id":30,"name":"Literal","src":"937:1:2"}],"id":31,"name":"ArrayTypeName","src":"932:7:2"}],"id":32,"name":"VariableDeclaration","src":"932:16:2"}],"id":33,"name":"ParameterList","src":"879:75:2"},{"children":[{"attributes":{"constant":false,"name":"","scope":37,"stateVariable":false,"storageLocation":"memory","type":"bytes","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes","type":"bytes"},"id":34,"name":"ElementaryTypeName","src":"978:5:2"}],"id":35,"name":"VariableDeclaration","src":"978:12:2"}],"id":36,"name":"ParameterList","src":"977:14:2"}],"id":37,"name":"FunctionDefinition","src":"853:139:2"}],"id":38,"name":"ContractDefinition","src":"762:232:2"}],"id":39,"name":"SourceUnit","src":"0:995:2"}}},"version":"0.5.0+commit.1d4f565a.Linux.g++"}
