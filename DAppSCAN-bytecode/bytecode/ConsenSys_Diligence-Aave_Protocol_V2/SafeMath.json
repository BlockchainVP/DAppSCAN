{"contracts":{"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-Aave_Protocol_V2/protocol-v2-750920303e33b66bc29862ea3b85206dda9ce786/contracts/dependencies/openzeppelin/contracts/SafeMath.sol:SafeMath":{"abi":"[]","bin":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b9ff2a90d8e8a651bf14d7aaae52bb3f3713310eb0899952a66a96a131a85c2964736f6c634300060c0033","bin-runtime":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b9ff2a90d8e8a651bf14d7aaae52bb3f3713310eb0899952a66a96a131a85c2964736f6c634300060c0033","srcmap":"626:4342:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;","srcmap-runtime":"626:4342:0:-:0;;;;;;;;"}},"sourceList":["/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-Aave_Protocol_V2/protocol-v2-750920303e33b66bc29862ea3b85206dda9ce786/contracts/dependencies/openzeppelin/contracts/SafeMath.sol"],"sources":{"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-Aave_Protocol_V2/protocol-v2-750920303e33b66bc29862ea3b85206dda9ce786/contracts/dependencies/openzeppelin/contracts/SafeMath.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/ConsenSys_Diligence-Aave_Protocol_V2/protocol-v2-750920303e33b66bc29862ea3b85206dda9ce786/contracts/dependencies/openzeppelin/contracts/SafeMath.sol","exportedSymbols":{"SafeMath":[195]},"license":"agpl-3.0"},"children":[{"attributes":{"literals":["solidity","0.6",".12"]},"id":1,"name":"PragmaDirective","src":"37:23:0"},{"attributes":{"abstract":false,"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","fullyImplemented":true,"linearizedBaseContracts":[195],"name":"SafeMath","scope":196},"children":[{"attributes":{"text":" @dev Wrappers over Solidity's arithmetic operations with added overflow\n checks.\n Arithmetic operations in Solidity wrap on overflow. This can easily result\n in bugs, because programmers usually assume that an overflow raises an\n error, which is the standard behavior in high level programming languages.\n `SafeMath` restores this intuition by reverting the transaction when an\n operation overflows.\n Using this library instead of the unchecked operations eliminates an entire\n class of bugs, so it's recommended to use it always."},"id":2,"name":"StructuredDocumentation","src":"62:563:0"},{"attributes":{"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"add","overrides":null,"scope":195,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"attributes":{"text":" @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."},"id":3,"name":"StructuredDocumentation","src":"647:201:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"a","overrides":null,"scope":28,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":4,"name":"ElementaryTypeName","src":"864:7:0"}],"id":5,"name":"VariableDeclaration","src":"864:9:0"},{"attributes":{"constant":false,"mutability":"mutable","name":"b","overrides":null,"scope":28,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":6,"name":"ElementaryTypeName","src":"875:7:0"}],"id":7,"name":"VariableDeclaration","src":"875:9:0"}],"id":8,"name":"ParameterList","src":"863:22:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"","overrides":null,"scope":28,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":9,"name":"ElementaryTypeName","src":"909:7:0"}],"id":10,"name":"VariableDeclaration","src":"909:7:0"}],"id":11,"name":"ParameterList","src":"908:9:0"},{"children":[{"attributes":{"assignments":[13]},"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"c","overrides":null,"scope":27,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":12,"name":"ElementaryTypeName","src":"924:7:0"}],"id":13,"name":"VariableDeclaration","src":"924:9:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"+","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":5,"type":"uint256","value":"a"},"id":14,"name":"Identifier","src":"936:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":7,"type":"uint256","value":"b"},"id":15,"name":"Identifier","src":"940:1:0"}],"id":16,"name":"BinaryOperation","src":"936:5:0"}],"id":17,"name":"VariableDeclarationStatement","src":"924:17:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""}],"overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"type":"function (bool,string memory) pure","value":"require"},"id":18,"name":"Identifier","src":"947:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":">=","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":13,"type":"uint256","value":"c"},"id":19,"name":"Identifier","src":"955:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":5,"type":"uint256","value":"a"},"id":20,"name":"Identifier","src":"960:1:0"}],"id":21,"name":"BinaryOperation","src":"955:6:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206164646974696f6e206f766572666c6f77","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: addition overflow\"","value":"SafeMath: addition overflow"},"id":22,"name":"Literal","src":"963:29:0"}],"id":23,"name":"FunctionCall","src":"947:46:0"}],"id":24,"name":"ExpressionStatement","src":"947:46:0"},{"attributes":{"functionReturnParameters":11},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":13,"type":"uint256","value":"c"},"id":25,"name":"Identifier","src":"1007:1:0"}],"id":26,"name":"Return","src":"1000:8:0"}],"id":27,"name":"Block","src":"918:95:0"}],"id":28,"name":"FunctionDefinition","src":"851:162:0"},{"attributes":{"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"sub","overrides":null,"scope":195,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"attributes":{"text":" @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":29,"name":"StructuredDocumentation","src":"1017:237:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"a","overrides":null,"scope":45,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":30,"name":"ElementaryTypeName","src":"1270:7:0"}],"id":31,"name":"VariableDeclaration","src":"1270:9:0"},{"attributes":{"constant":false,"mutability":"mutable","name":"b","overrides":null,"scope":45,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":32,"name":"ElementaryTypeName","src":"1281:7:0"}],"id":33,"name":"VariableDeclaration","src":"1281:9:0"}],"id":34,"name":"ParameterList","src":"1269:22:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"","overrides":null,"scope":45,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":35,"name":"ElementaryTypeName","src":"1315:7:0"}],"id":36,"name":"VariableDeclaration","src":"1315:7:0"}],"id":37,"name":"ParameterList","src":"1314:9:0"},{"children":[{"attributes":{"functionReturnParameters":37},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"uint256","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""}],"overloadedDeclarations":[45,73],"referencedDeclaration":73,"type":"function (uint256,uint256,string memory) pure returns (uint256)","value":"sub"},"id":38,"name":"Identifier","src":"1337:3:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":31,"type":"uint256","value":"a"},"id":39,"name":"Identifier","src":"1341:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":33,"type":"uint256","value":"b"},"id":40,"name":"Identifier","src":"1344:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a207375627472616374696f6e206f766572666c6f77","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: subtraction overflow\"","value":"SafeMath: subtraction overflow"},"id":41,"name":"Literal","src":"1347:32:0"}],"id":42,"name":"FunctionCall","src":"1337:43:0"}],"id":43,"name":"Return","src":"1330:50:0"}],"id":44,"name":"Block","src":"1324:61:0"}],"id":45,"name":"FunctionDefinition","src":"1257:128:0"},{"attributes":{"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"sub","overrides":null,"scope":195,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"attributes":{"text":" @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."},"id":46,"name":"StructuredDocumentation","src":"1389:257:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"a","overrides":null,"scope":73,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":47,"name":"ElementaryTypeName","src":"1667:7:0"}],"id":48,"name":"VariableDeclaration","src":"1667:9:0"},{"attributes":{"constant":false,"mutability":"mutable","name":"b","overrides":null,"scope":73,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":49,"name":"ElementaryTypeName","src":"1682:7:0"}],"id":50,"name":"VariableDeclaration","src":"1682:9:0"},{"attributes":{"constant":false,"mutability":"mutable","name":"errorMessage","overrides":null,"scope":73,"stateVariable":false,"storageLocation":"memory","type":"string","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"string","type":"string"},"id":51,"name":"ElementaryTypeName","src":"1697:6:0"}],"id":52,"name":"VariableDeclaration","src":"1697:26:0"}],"id":53,"name":"ParameterList","src":"1661:66:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"","overrides":null,"scope":73,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":54,"name":"ElementaryTypeName","src":"1751:7:0"}],"id":55,"name":"VariableDeclaration","src":"1751:7:0"}],"id":56,"name":"ParameterList","src":"1750:9:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"type":"function (bool,string memory) pure","value":"require"},"id":57,"name":"Identifier","src":"1766:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"<=","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":50,"type":"uint256","value":"b"},"id":58,"name":"Identifier","src":"1774:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":48,"type":"uint256","value":"a"},"id":59,"name":"Identifier","src":"1779:1:0"}],"id":60,"name":"BinaryOperation","src":"1774:6:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":52,"type":"string memory","value":"errorMessage"},"id":61,"name":"Identifier","src":"1782:12:0"}],"id":62,"name":"FunctionCall","src":"1766:29:0"}],"id":63,"name":"ExpressionStatement","src":"1766:29:0"},{"attributes":{"assignments":[65]},"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"c","overrides":null,"scope":72,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":64,"name":"ElementaryTypeName","src":"1801:7:0"}],"id":65,"name":"VariableDeclaration","src":"1801:9:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"-","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":48,"type":"uint256","value":"a"},"id":66,"name":"Identifier","src":"1813:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":50,"type":"uint256","value":"b"},"id":67,"name":"Identifier","src":"1817:1:0"}],"id":68,"name":"BinaryOperation","src":"1813:5:0"}],"id":69,"name":"VariableDeclarationStatement","src":"1801:17:0"},{"attributes":{"functionReturnParameters":56},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":65,"type":"uint256","value":"c"},"id":70,"name":"Identifier","src":"1832:1:0"}],"id":71,"name":"Return","src":"1825:8:0"}],"id":72,"name":"Block","src":"1760:78:0"}],"id":73,"name":"FunctionDefinition","src":"1649:189:0"},{"attributes":{"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"mul","overrides":null,"scope":195,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"attributes":{"text":" @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."},"id":74,"name":"StructuredDocumentation","src":"1842:213:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"a","overrides":null,"scope":108,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":75,"name":"ElementaryTypeName","src":"2071:7:0"}],"id":76,"name":"VariableDeclaration","src":"2071:9:0"},{"attributes":{"constant":false,"mutability":"mutable","name":"b","overrides":null,"scope":108,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":77,"name":"ElementaryTypeName","src":"2082:7:0"}],"id":78,"name":"VariableDeclaration","src":"2082:9:0"}],"id":79,"name":"ParameterList","src":"2070:22:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"","overrides":null,"scope":108,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":80,"name":"ElementaryTypeName","src":"2116:7:0"}],"id":81,"name":"VariableDeclaration","src":"2116:7:0"}],"id":82,"name":"ParameterList","src":"2115:9:0"},{"children":[{"attributes":{"falseBody":null},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"==","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":76,"type":"uint256","value":"a"},"id":83,"name":"Identifier","src":"2341:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":84,"name":"Literal","src":"2346:1:0"}],"id":85,"name":"BinaryOperation","src":"2341:6:0"},{"children":[{"attributes":{"functionReturnParameters":82},"children":[{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":86,"name":"Literal","src":"2364:1:0"}],"id":87,"name":"Return","src":"2357:8:0"}],"id":88,"name":"Block","src":"2349:23:0"}],"id":89,"name":"IfStatement","src":"2337:35:0"},{"attributes":{"assignments":[91]},"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"c","overrides":null,"scope":107,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":90,"name":"ElementaryTypeName","src":"2378:7:0"}],"id":91,"name":"VariableDeclaration","src":"2378:9:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"*","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":76,"type":"uint256","value":"a"},"id":92,"name":"Identifier","src":"2390:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":78,"type":"uint256","value":"b"},"id":93,"name":"Identifier","src":"2394:1:0"}],"id":94,"name":"BinaryOperation","src":"2390:5:0"}],"id":95,"name":"VariableDeclarationStatement","src":"2378:17:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""}],"overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"type":"function (bool,string memory) pure","value":"require"},"id":96,"name":"Identifier","src":"2401:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"==","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"/","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":91,"type":"uint256","value":"c"},"id":97,"name":"Identifier","src":"2409:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":76,"type":"uint256","value":"a"},"id":98,"name":"Identifier","src":"2413:1:0"}],"id":99,"name":"BinaryOperation","src":"2409:5:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":78,"type":"uint256","value":"b"},"id":100,"name":"Identifier","src":"2418:1:0"}],"id":101,"name":"BinaryOperation","src":"2409:10:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: multiplication overflow\"","value":"SafeMath: multiplication overflow"},"id":102,"name":"Literal","src":"2421:35:0"}],"id":103,"name":"FunctionCall","src":"2401:56:0"}],"id":104,"name":"ExpressionStatement","src":"2401:56:0"},{"attributes":{"functionReturnParameters":82},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":91,"type":"uint256","value":"c"},"id":105,"name":"Identifier","src":"2471:1:0"}],"id":106,"name":"Return","src":"2464:8:0"}],"id":107,"name":"Block","src":"2125:352:0"}],"id":108,"name":"FunctionDefinition","src":"2058:419:0"},{"attributes":{"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"div","overrides":null,"scope":195,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"attributes":{"text":" @dev Returns the integer division of two unsigned integers. Reverts on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":109,"name":"StructuredDocumentation","src":"2481:424:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"a","overrides":null,"scope":125,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":110,"name":"ElementaryTypeName","src":"2921:7:0"}],"id":111,"name":"VariableDeclaration","src":"2921:9:0"},{"attributes":{"constant":false,"mutability":"mutable","name":"b","overrides":null,"scope":125,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":112,"name":"ElementaryTypeName","src":"2932:7:0"}],"id":113,"name":"VariableDeclaration","src":"2932:9:0"}],"id":114,"name":"ParameterList","src":"2920:22:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"","overrides":null,"scope":125,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":115,"name":"ElementaryTypeName","src":"2966:7:0"}],"id":116,"name":"VariableDeclaration","src":"2966:7:0"}],"id":117,"name":"ParameterList","src":"2965:9:0"},{"children":[{"attributes":{"functionReturnParameters":117},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"uint256","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""}],"overloadedDeclarations":[125,153],"referencedDeclaration":153,"type":"function (uint256,uint256,string memory) pure returns (uint256)","value":"div"},"id":118,"name":"Identifier","src":"2988:3:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":111,"type":"uint256","value":"a"},"id":119,"name":"Identifier","src":"2992:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":113,"type":"uint256","value":"b"},"id":120,"name":"Identifier","src":"2995:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206469766973696f6e206279207a65726f","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: division by zero\"","value":"SafeMath: division by zero"},"id":121,"name":"Literal","src":"2998:28:0"}],"id":122,"name":"FunctionCall","src":"2988:39:0"}],"id":123,"name":"Return","src":"2981:46:0"}],"id":124,"name":"Block","src":"2975:57:0"}],"id":125,"name":"FunctionDefinition","src":"2908:124:0"},{"attributes":{"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"div","overrides":null,"scope":195,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"attributes":{"text":" @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":126,"name":"StructuredDocumentation","src":"3036:444:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"a","overrides":null,"scope":153,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":127,"name":"ElementaryTypeName","src":"3501:7:0"}],"id":128,"name":"VariableDeclaration","src":"3501:9:0"},{"attributes":{"constant":false,"mutability":"mutable","name":"b","overrides":null,"scope":153,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":129,"name":"ElementaryTypeName","src":"3516:7:0"}],"id":130,"name":"VariableDeclaration","src":"3516:9:0"},{"attributes":{"constant":false,"mutability":"mutable","name":"errorMessage","overrides":null,"scope":153,"stateVariable":false,"storageLocation":"memory","type":"string","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"string","type":"string"},"id":131,"name":"ElementaryTypeName","src":"3531:6:0"}],"id":132,"name":"VariableDeclaration","src":"3531:26:0"}],"id":133,"name":"ParameterList","src":"3495:66:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"","overrides":null,"scope":153,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":134,"name":"ElementaryTypeName","src":"3585:7:0"}],"id":135,"name":"VariableDeclaration","src":"3585:7:0"}],"id":136,"name":"ParameterList","src":"3584:9:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"type":"function (bool,string memory) pure","value":"require"},"id":137,"name":"Identifier","src":"3662:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":">","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":130,"type":"uint256","value":"b"},"id":138,"name":"Identifier","src":"3670:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":139,"name":"Literal","src":"3674:1:0"}],"id":140,"name":"BinaryOperation","src":"3670:5:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":132,"type":"string memory","value":"errorMessage"},"id":141,"name":"Identifier","src":"3677:12:0"}],"id":142,"name":"FunctionCall","src":"3662:28:0"}],"id":143,"name":"ExpressionStatement","src":"3662:28:0"},{"attributes":{"assignments":[145]},"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"c","overrides":null,"scope":152,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":144,"name":"ElementaryTypeName","src":"3696:7:0"}],"id":145,"name":"VariableDeclaration","src":"3696:9:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"/","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":128,"type":"uint256","value":"a"},"id":146,"name":"Identifier","src":"3708:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":130,"type":"uint256","value":"b"},"id":147,"name":"Identifier","src":"3712:1:0"}],"id":148,"name":"BinaryOperation","src":"3708:5:0"}],"id":149,"name":"VariableDeclarationStatement","src":"3696:17:0"},{"attributes":{"functionReturnParameters":136},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":145,"type":"uint256","value":"c"},"id":150,"name":"Identifier","src":"3809:1:0"}],"id":151,"name":"Return","src":"3802:8:0"}],"id":152,"name":"Block","src":"3594:221:0"}],"id":153,"name":"FunctionDefinition","src":"3483:332:0"},{"attributes":{"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"mod","overrides":null,"scope":195,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"attributes":{"text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":154,"name":"StructuredDocumentation","src":"3819:413:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"a","overrides":null,"scope":170,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":155,"name":"ElementaryTypeName","src":"4248:7:0"}],"id":156,"name":"VariableDeclaration","src":"4248:9:0"},{"attributes":{"constant":false,"mutability":"mutable","name":"b","overrides":null,"scope":170,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":157,"name":"ElementaryTypeName","src":"4259:7:0"}],"id":158,"name":"VariableDeclaration","src":"4259:9:0"}],"id":159,"name":"ParameterList","src":"4247:22:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"","overrides":null,"scope":170,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":160,"name":"ElementaryTypeName","src":"4293:7:0"}],"id":161,"name":"VariableDeclaration","src":"4293:7:0"}],"id":162,"name":"ParameterList","src":"4292:9:0"},{"children":[{"attributes":{"functionReturnParameters":162},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"uint256","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""}],"overloadedDeclarations":[170,194],"referencedDeclaration":194,"type":"function (uint256,uint256,string memory) pure returns (uint256)","value":"mod"},"id":163,"name":"Identifier","src":"4315:3:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":156,"type":"uint256","value":"a"},"id":164,"name":"Identifier","src":"4319:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":158,"type":"uint256","value":"b"},"id":165,"name":"Identifier","src":"4322:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206d6f64756c6f206279207a65726f","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: modulo by zero\"","value":"SafeMath: modulo by zero"},"id":166,"name":"Literal","src":"4325:26:0"}],"id":167,"name":"FunctionCall","src":"4315:37:0"}],"id":168,"name":"Return","src":"4308:44:0"}],"id":169,"name":"Block","src":"4302:55:0"}],"id":170,"name":"FunctionDefinition","src":"4235:122:0"},{"attributes":{"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"mod","overrides":null,"scope":195,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"attributes":{"text":" @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n Reverts with custom message when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."},"id":171,"name":"StructuredDocumentation","src":"4361:433:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"a","overrides":null,"scope":194,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":172,"name":"ElementaryTypeName","src":"4815:7:0"}],"id":173,"name":"VariableDeclaration","src":"4815:9:0"},{"attributes":{"constant":false,"mutability":"mutable","name":"b","overrides":null,"scope":194,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":174,"name":"ElementaryTypeName","src":"4830:7:0"}],"id":175,"name":"VariableDeclaration","src":"4830:9:0"},{"attributes":{"constant":false,"mutability":"mutable","name":"errorMessage","overrides":null,"scope":194,"stateVariable":false,"storageLocation":"memory","type":"string","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"string","type":"string"},"id":176,"name":"ElementaryTypeName","src":"4845:6:0"}],"id":177,"name":"VariableDeclaration","src":"4845:26:0"}],"id":178,"name":"ParameterList","src":"4809:66:0"},{"children":[{"attributes":{"constant":false,"mutability":"mutable","name":"","overrides":null,"scope":194,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":179,"name":"ElementaryTypeName","src":"4899:7:0"}],"id":180,"name":"VariableDeclaration","src":"4899:7:0"}],"id":181,"name":"ParameterList","src":"4898:9:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"type":"function (bool,string memory) pure","value":"require"},"id":182,"name":"Identifier","src":"4914:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"!=","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":175,"type":"uint256","value":"b"},"id":183,"name":"Identifier","src":"4922:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":184,"name":"Literal","src":"4927:1:0"}],"id":185,"name":"BinaryOperation","src":"4922:6:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":177,"type":"string memory","value":"errorMessage"},"id":186,"name":"Identifier","src":"4930:12:0"}],"id":187,"name":"FunctionCall","src":"4914:29:0"}],"id":188,"name":"ExpressionStatement","src":"4914:29:0"},{"attributes":{"functionReturnParameters":181},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"%","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":173,"type":"uint256","value":"a"},"id":189,"name":"Identifier","src":"4956:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":175,"type":"uint256","value":"b"},"id":190,"name":"Identifier","src":"4960:1:0"}],"id":191,"name":"BinaryOperation","src":"4956:5:0"}],"id":192,"name":"Return","src":"4949:12:0"}],"id":193,"name":"Block","src":"4908:58:0"}],"id":194,"name":"FunctionDefinition","src":"4797:169:0"}],"id":195,"name":"ContractDefinition","src":"626:4342:0"}],"id":196,"name":"SourceUnit","src":"37:4932:0"}}},"version":"0.6.12+commit.27d51765.Linux.g++"}
