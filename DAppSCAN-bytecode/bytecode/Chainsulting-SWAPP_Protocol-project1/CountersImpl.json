{"contracts":{"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-SWAPP_Protocol-project1/openzeppelin-contracts-3.3.0/contracts/math/SafeMath.sol:SafeMath":{"abi":"[]","bin":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122032302411844fc7b400c8a11b014b479a24256517399fe4690a4c07d969e76e2364736f6c63430006000033","bin-runtime":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122032302411844fc7b400c8a11b014b479a24256517399fe4690a4c07d969e76e2364736f6c63430006000033","srcmap":"630:4578:0:-:0;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24","srcmap-runtime":"630:4578:0:-:0;;;;;;;;"},"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-SWAPP_Protocol-project1/openzeppelin-contracts-3.3.0/contracts/mocks/CountersImpl.sol:CountersImpl":{"abi":"[{\"inputs\":[],\"name\":\"current\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decrement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]","bin":"608060405234801561001057600080fd5b50610228806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632baeceb7146100465780639fa6a6e314610050578063d09de08a1461006e575b600080fd5b61004e610078565b005b610058610084565b6040518082815260200191505060405180910390f35b610076610095565b005b61008260006100a1565b565b600061009060006100c4565b905090565b61009f60006100d2565b565b6100b9600182600001546100e890919063ffffffff16565b816000018190555050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600061012a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610132565b905092915050565b60008383111582906101df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101a4578082015181840152602081019050610189565b50505050905090810190601f1680156101d15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838503905080915050939250505056fea26469706673582212201b4ccdb3e9dfc678f3d80e517e06482e2251821bad22d384312d11484dc616ce64736f6c63430006000033","bin-runtime":"608060405234801561001057600080fd5b50600436106100415760003560e01c80632baeceb7146100465780639fa6a6e314610050578063d09de08a1461006e575b600080fd5b61004e610078565b005b610058610084565b6040518082815260200191505060405180910390f35b610076610095565b005b61008260006100a1565b565b600061009060006100c4565b905090565b61009f60006100d2565b565b6100b9600182600001546100e890919063ffffffff16565b816000018190555050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600061012a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610132565b905092915050565b60008383111582906101df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156101a4578082015181840152602081019050610189565b50505050905090810190601f1680156101d15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506000838503905080915050939250505056fea26469706673582212201b4ccdb3e9dfc678f3d80e517e06482e2251821bad22d384312d11484dc616ce64736f6c63430006000033","srcmap":"99:345:1:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;99:345:1;;;;;;;","srcmap-runtime":"99:345:1:-:0;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;99:345:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;377:65;;;:::i;:::-;;209:91;;;:::i;:::-;;;;;;;;;;;;;;;;;;;306:65;;;:::i;:::-;;377;415:20;:8;:18;:20::i;:::-;377:65::o;209:91::-;249:7;275:18;:8;:16;:18::i;:::-;268:25;;209:91;:::o;306:65::-;344:20;:8;:18;:20::i;:::-;306:65::o;1408:108:2:-;1488:21;1507:1;1488:7;:14;;;:18;;:21;;;;:::i;:::-;1471:7;:14;;:38;;;;1408:108;:::o;1106:112::-;1171:7;1197;:14;;;1190:21;;1106:112;;;:::o;1224:178::-;1394:1;1376:7;:14;;;:19;;;;;;;;;;;1224:178;:::o;1329:134:0:-;1387:7;1413:43;1417:1;1420;1413:43;;;;;;;;;;;;;;;;;:3;:43::i;:::-;1406:50;;1329:134;;;;:::o;1754:187::-;1840:7;1872:1;1867;:6;;1875:12;1859:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;1859:29:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1898:9;1914:1;1910;:5;1898:17;;1933:1;1926:8;;;1754:187;;;;;:::o"},"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-SWAPP_Protocol-project1/openzeppelin-contracts-3.3.0/contracts/utils/Counters.sol:Counters":{"abi":"[]","bin":"60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205a2f601092ab24a7745876505284c3e2073d33685c04139a8aafee373630a87464736f6c63430006000033","bin-runtime":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205a2f601092ab24a7745876505284c3e2073d33685c04139a8aafee373630a87464736f6c63430006000033","srcmap":"670:848:2:-:0;;132:2:-1;166:7;155:9;146:7;137:37;255:7;249:14;246:1;241:23;235:4;232:33;222:2;;269:9;222:2;293:9;290:1;283:20;323:4;314:7;306:22;347:7;338;331:24","srcmap-runtime":"670:848:2:-:0;;;;;;;;"}},"sourceList":["/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-SWAPP_Protocol-project1/openzeppelin-contracts-3.3.0/contracts/math/SafeMath.sol","/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-SWAPP_Protocol-project1/openzeppelin-contracts-3.3.0/contracts/mocks/CountersImpl.sol","/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-SWAPP_Protocol-project1/openzeppelin-contracts-3.3.0/contracts/utils/Counters.sol"],"sources":{"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-SWAPP_Protocol-project1/openzeppelin-contracts-3.3.0/contracts/math/SafeMath.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-SWAPP_Protocol-project1/openzeppelin-contracts-3.3.0/contracts/math/SafeMath.sol","exportedSymbols":{"SafeMath":[272]}},"children":[{"attributes":{"literals":["solidity",">=","0.6",".0","<","0.8",".0"]},"id":87,"name":"PragmaDirective","src":"33:31:0"},{"attributes":{"abstract":false,"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":"@dev Wrappers over Solidity's arithmetic operations with added overflow\nchecks.\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\nin bugs, because programmers usually assume that an overflow raises an\nerror, which is the standard behavior in high level programming languages.\n`SafeMath` restores this intuition by reverting the transaction when an\noperation overflows.\n * Using this library instead of the unchecked operations eliminates an entire\nclass of bugs, so it's recommended to use it always.","fullyImplemented":true,"linearizedBaseContracts":[272],"name":"SafeMath","scope":273},"children":[{"attributes":{"documentation":"@dev Returns the addition of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `+` operator.\n     * Requirements:\n     * - Addition cannot overflow.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"add","overrides":null,"scope":272,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":112,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":88,"name":"ElementaryTypeName","src":"895:7:0"}],"id":89,"name":"VariableDeclaration","src":"895:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":112,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":90,"name":"ElementaryTypeName","src":"906:7:0"}],"id":91,"name":"VariableDeclaration","src":"906:9:0"}],"id":92,"name":"ParameterList","src":"894:22:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":112,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":93,"name":"ElementaryTypeName","src":"940:7:0"}],"id":94,"name":"VariableDeclaration","src":"940:7:0"}],"id":95,"name":"ParameterList","src":"939:9:0"},{"children":[{"attributes":{"assignments":[97]},"children":[{"attributes":{"constant":false,"name":"c","overrides":null,"scope":111,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":96,"name":"ElementaryTypeName","src":"959:7:0"}],"id":97,"name":"VariableDeclaration","src":"959:9:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"+","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":89,"type":"uint256","value":"a"},"id":98,"name":"Identifier","src":"971:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":91,"type":"uint256","value":"b"},"id":99,"name":"Identifier","src":"975:1:0"}],"id":100,"name":"BinaryOperation","src":"971:5:0"}],"id":101,"name":"VariableDeclarationStatement","src":"959:17:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_30cc447bcc13b3e22b45cef0dd9b0b514842d836dd9b6eb384e20dedfb47723a","typeString":"literal_string \"SafeMath: addition overflow\""}],"overloadedDeclarations":[290,291],"referencedDeclaration":291,"type":"function (bool,string memory) pure","value":"require"},"id":102,"name":"Identifier","src":"986:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":">=","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":97,"type":"uint256","value":"c"},"id":103,"name":"Identifier","src":"994:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":89,"type":"uint256","value":"a"},"id":104,"name":"Identifier","src":"999:1:0"}],"id":105,"name":"BinaryOperation","src":"994:6:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206164646974696f6e206f766572666c6f77","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: addition overflow\"","value":"SafeMath: addition overflow"},"id":106,"name":"Literal","src":"1002:29:0"}],"id":107,"name":"FunctionCall","src":"986:46:0"}],"id":108,"name":"ExpressionStatement","src":"986:46:0"},{"attributes":{"functionReturnParameters":95},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":97,"type":"uint256","value":"c"},"id":109,"name":"Identifier","src":"1050:1:0"}],"id":110,"name":"Return","src":"1043:8:0"}],"id":111,"name":"Block","src":"949:109:0"}],"id":112,"name":"FunctionDefinition","src":"882:176:0"},{"attributes":{"documentation":"@dev Returns the subtraction of two unsigned integers, reverting on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n     * - Subtraction cannot overflow.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"sub","overrides":null,"scope":272,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":128,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":113,"name":"ElementaryTypeName","src":"1342:7:0"}],"id":114,"name":"VariableDeclaration","src":"1342:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":128,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":115,"name":"ElementaryTypeName","src":"1353:7:0"}],"id":116,"name":"VariableDeclaration","src":"1353:9:0"}],"id":117,"name":"ParameterList","src":"1341:22:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":128,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":118,"name":"ElementaryTypeName","src":"1387:7:0"}],"id":119,"name":"VariableDeclaration","src":"1387:7:0"}],"id":120,"name":"ParameterList","src":"1386:9:0"},{"children":[{"attributes":{"functionReturnParameters":120},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"uint256","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_50b058e9b5320e58880d88223c9801cd9eecdcf90323d5c2318bc1b6b916e862","typeString":"literal_string \"SafeMath: subtraction overflow\""}],"overloadedDeclarations":[128,155],"referencedDeclaration":155,"type":"function (uint256,uint256,string memory) pure returns (uint256)","value":"sub"},"id":121,"name":"Identifier","src":"1413:3:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":114,"type":"uint256","value":"a"},"id":122,"name":"Identifier","src":"1417:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":116,"type":"uint256","value":"b"},"id":123,"name":"Identifier","src":"1420:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a207375627472616374696f6e206f766572666c6f77","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: subtraction overflow\"","value":"SafeMath: subtraction overflow"},"id":124,"name":"Literal","src":"1423:32:0"}],"id":125,"name":"FunctionCall","src":"1413:43:0"}],"id":126,"name":"Return","src":"1406:50:0"}],"id":127,"name":"Block","src":"1396:67:0"}],"id":128,"name":"FunctionDefinition","src":"1329:134:0"},{"attributes":{"documentation":"@dev Returns the subtraction of two unsigned integers, reverting with custom message on\noverflow (when the result is negative).\n     * Counterpart to Solidity's `-` operator.\n     * Requirements:\n     * - Subtraction cannot overflow.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"sub","overrides":null,"scope":272,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":155,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":129,"name":"ElementaryTypeName","src":"1767:7:0"}],"id":130,"name":"VariableDeclaration","src":"1767:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":155,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":131,"name":"ElementaryTypeName","src":"1778:7:0"}],"id":132,"name":"VariableDeclaration","src":"1778:9:0"},{"attributes":{"constant":false,"name":"errorMessage","overrides":null,"scope":155,"stateVariable":false,"storageLocation":"memory","type":"string","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"string","type":"string"},"id":133,"name":"ElementaryTypeName","src":"1789:6:0"}],"id":134,"name":"VariableDeclaration","src":"1789:26:0"}],"id":135,"name":"ParameterList","src":"1766:50:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":155,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":136,"name":"ElementaryTypeName","src":"1840:7:0"}],"id":137,"name":"VariableDeclaration","src":"1840:7:0"}],"id":138,"name":"ParameterList","src":"1839:9:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"overloadedDeclarations":[290,291],"referencedDeclaration":291,"type":"function (bool,string memory) pure","value":"require"},"id":139,"name":"Identifier","src":"1859:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"<=","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":132,"type":"uint256","value":"b"},"id":140,"name":"Identifier","src":"1867:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":130,"type":"uint256","value":"a"},"id":141,"name":"Identifier","src":"1872:1:0"}],"id":142,"name":"BinaryOperation","src":"1867:6:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":134,"type":"string memory","value":"errorMessage"},"id":143,"name":"Identifier","src":"1875:12:0"}],"id":144,"name":"FunctionCall","src":"1859:29:0"}],"id":145,"name":"ExpressionStatement","src":"1859:29:0"},{"attributes":{"assignments":[147]},"children":[{"attributes":{"constant":false,"name":"c","overrides":null,"scope":154,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":146,"name":"ElementaryTypeName","src":"1898:7:0"}],"id":147,"name":"VariableDeclaration","src":"1898:9:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"-","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":130,"type":"uint256","value":"a"},"id":148,"name":"Identifier","src":"1910:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":132,"type":"uint256","value":"b"},"id":149,"name":"Identifier","src":"1914:1:0"}],"id":150,"name":"BinaryOperation","src":"1910:5:0"}],"id":151,"name":"VariableDeclarationStatement","src":"1898:17:0"},{"attributes":{"functionReturnParameters":138},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":147,"type":"uint256","value":"c"},"id":152,"name":"Identifier","src":"1933:1:0"}],"id":153,"name":"Return","src":"1926:8:0"}],"id":154,"name":"Block","src":"1849:92:0"}],"id":155,"name":"FunctionDefinition","src":"1754:187:0"},{"attributes":{"documentation":"@dev Returns the multiplication of two unsigned integers, reverting on\noverflow.\n     * Counterpart to Solidity's `*` operator.\n     * Requirements:\n     * - Multiplication cannot overflow.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"mul","overrides":null,"scope":272,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":189,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":156,"name":"ElementaryTypeName","src":"2201:7:0"}],"id":157,"name":"VariableDeclaration","src":"2201:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":189,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":158,"name":"ElementaryTypeName","src":"2212:7:0"}],"id":159,"name":"VariableDeclaration","src":"2212:9:0"}],"id":160,"name":"ParameterList","src":"2200:22:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":189,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":161,"name":"ElementaryTypeName","src":"2246:7:0"}],"id":162,"name":"VariableDeclaration","src":"2246:7:0"}],"id":163,"name":"ParameterList","src":"2245:9:0"},{"children":[{"attributes":{"falseBody":null},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"==","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":157,"type":"uint256","value":"a"},"id":164,"name":"Identifier","src":"2487:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":165,"name":"Literal","src":"2492:1:0"}],"id":166,"name":"BinaryOperation","src":"2487:6:0"},{"children":[{"attributes":{"functionReturnParameters":163},"children":[{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":167,"name":"Literal","src":"2516:1:0"}],"id":168,"name":"Return","src":"2509:8:0"}],"id":169,"name":"Block","src":"2495:33:0"}],"id":170,"name":"IfStatement","src":"2483:45:0"},{"attributes":{"assignments":[172]},"children":[{"attributes":{"constant":false,"name":"c","overrides":null,"scope":188,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":171,"name":"ElementaryTypeName","src":"2538:7:0"}],"id":172,"name":"VariableDeclaration","src":"2538:9:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"*","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":157,"type":"uint256","value":"a"},"id":173,"name":"Identifier","src":"2550:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":159,"type":"uint256","value":"b"},"id":174,"name":"Identifier","src":"2554:1:0"}],"id":175,"name":"BinaryOperation","src":"2550:5:0"}],"id":176,"name":"VariableDeclarationStatement","src":"2538:17:0"},{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9113bb53c2876a3805b2c9242029423fc540a728243ce887ab24c82cf119fba3","typeString":"literal_string \"SafeMath: multiplication overflow\""}],"overloadedDeclarations":[290,291],"referencedDeclaration":291,"type":"function (bool,string memory) pure","value":"require"},"id":177,"name":"Identifier","src":"2565:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"==","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"/","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":172,"type":"uint256","value":"c"},"id":178,"name":"Identifier","src":"2573:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":157,"type":"uint256","value":"a"},"id":179,"name":"Identifier","src":"2577:1:0"}],"id":180,"name":"BinaryOperation","src":"2573:5:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":159,"type":"uint256","value":"b"},"id":181,"name":"Identifier","src":"2582:1:0"}],"id":182,"name":"BinaryOperation","src":"2573:10:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: multiplication overflow\"","value":"SafeMath: multiplication overflow"},"id":183,"name":"Literal","src":"2585:35:0"}],"id":184,"name":"FunctionCall","src":"2565:56:0"}],"id":185,"name":"ExpressionStatement","src":"2565:56:0"},{"attributes":{"functionReturnParameters":163},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":172,"type":"uint256","value":"c"},"id":186,"name":"Identifier","src":"2639:1:0"}],"id":187,"name":"Return","src":"2632:8:0"}],"id":188,"name":"Block","src":"2255:392:0"}],"id":189,"name":"FunctionDefinition","src":"2188:459:0"},{"attributes":{"documentation":"@dev Returns the integer division of two unsigned integers. Reverts on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"div","overrides":null,"scope":272,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":205,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":190,"name":"ElementaryTypeName","src":"3122:7:0"}],"id":191,"name":"VariableDeclaration","src":"3122:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":205,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":192,"name":"ElementaryTypeName","src":"3133:7:0"}],"id":193,"name":"VariableDeclaration","src":"3133:9:0"}],"id":194,"name":"ParameterList","src":"3121:22:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":205,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":195,"name":"ElementaryTypeName","src":"3167:7:0"}],"id":196,"name":"VariableDeclaration","src":"3167:7:0"}],"id":197,"name":"ParameterList","src":"3166:9:0"},{"children":[{"attributes":{"functionReturnParameters":197},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"uint256","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_5b7cc70dda4dc2143e5adb63bd5d1f349504f461dbdfd9bc76fac1f8ca6d019f","typeString":"literal_string \"SafeMath: division by zero\""}],"overloadedDeclarations":[205,232],"referencedDeclaration":232,"type":"function (uint256,uint256,string memory) pure returns (uint256)","value":"div"},"id":198,"name":"Identifier","src":"3193:3:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":191,"type":"uint256","value":"a"},"id":199,"name":"Identifier","src":"3197:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":193,"type":"uint256","value":"b"},"id":200,"name":"Identifier","src":"3200:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206469766973696f6e206279207a65726f","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: division by zero\"","value":"SafeMath: division by zero"},"id":201,"name":"Literal","src":"3203:28:0"}],"id":202,"name":"FunctionCall","src":"3193:39:0"}],"id":203,"name":"Return","src":"3186:46:0"}],"id":204,"name":"Block","src":"3176:63:0"}],"id":205,"name":"FunctionDefinition","src":"3109:130:0"},{"attributes":{"documentation":"@dev Returns the integer division of two unsigned integers. Reverts with custom message on\ndivision by zero. The result is rounded towards zero.\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n`revert` opcode (which leaves remaining gas untouched) while Solidity\nuses an invalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"div","overrides":null,"scope":272,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":232,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":206,"name":"ElementaryTypeName","src":"3734:7:0"}],"id":207,"name":"VariableDeclaration","src":"3734:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":232,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":208,"name":"ElementaryTypeName","src":"3745:7:0"}],"id":209,"name":"VariableDeclaration","src":"3745:9:0"},{"attributes":{"constant":false,"name":"errorMessage","overrides":null,"scope":232,"stateVariable":false,"storageLocation":"memory","type":"string","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"string","type":"string"},"id":210,"name":"ElementaryTypeName","src":"3756:6:0"}],"id":211,"name":"VariableDeclaration","src":"3756:26:0"}],"id":212,"name":"ParameterList","src":"3733:50:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":232,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":213,"name":"ElementaryTypeName","src":"3807:7:0"}],"id":214,"name":"VariableDeclaration","src":"3807:7:0"}],"id":215,"name":"ParameterList","src":"3806:9:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"overloadedDeclarations":[290,291],"referencedDeclaration":291,"type":"function (bool,string memory) pure","value":"require"},"id":216,"name":"Identifier","src":"3826:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":">","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":209,"type":"uint256","value":"b"},"id":217,"name":"Identifier","src":"3834:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":218,"name":"Literal","src":"3838:1:0"}],"id":219,"name":"BinaryOperation","src":"3834:5:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":211,"type":"string memory","value":"errorMessage"},"id":220,"name":"Identifier","src":"3841:12:0"}],"id":221,"name":"FunctionCall","src":"3826:28:0"}],"id":222,"name":"ExpressionStatement","src":"3826:28:0"},{"attributes":{"assignments":[224]},"children":[{"attributes":{"constant":false,"name":"c","overrides":null,"scope":231,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":223,"name":"ElementaryTypeName","src":"3864:7:0"}],"id":224,"name":"VariableDeclaration","src":"3864:9:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"/","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":207,"type":"uint256","value":"a"},"id":225,"name":"Identifier","src":"3876:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":209,"type":"uint256","value":"b"},"id":226,"name":"Identifier","src":"3880:1:0"}],"id":227,"name":"BinaryOperation","src":"3876:5:0"}],"id":228,"name":"VariableDeclarationStatement","src":"3864:17:0"},{"attributes":{"functionReturnParameters":215},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":224,"type":"uint256","value":"c"},"id":229,"name":"Identifier","src":"3985:1:0"}],"id":230,"name":"Return","src":"3978:8:0"}],"id":231,"name":"Block","src":"3816:177:0"}],"id":232,"name":"FunctionDefinition","src":"3721:272:0"},{"attributes":{"documentation":"@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"mod","overrides":null,"scope":272,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":248,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":233,"name":"ElementaryTypeName","src":"4457:7:0"}],"id":234,"name":"VariableDeclaration","src":"4457:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":248,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":235,"name":"ElementaryTypeName","src":"4468:7:0"}],"id":236,"name":"VariableDeclaration","src":"4468:9:0"}],"id":237,"name":"ParameterList","src":"4456:22:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":248,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":238,"name":"ElementaryTypeName","src":"4502:7:0"}],"id":239,"name":"VariableDeclaration","src":"4502:7:0"}],"id":240,"name":"ParameterList","src":"4501:9:0"},{"children":[{"attributes":{"functionReturnParameters":240},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"uint256","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_726e51f7b81fce0a68f5f214f445e275313b20b1633f08ce954ee39abf8d7832","typeString":"literal_string \"SafeMath: modulo by zero\""}],"overloadedDeclarations":[248,271],"referencedDeclaration":271,"type":"function (uint256,uint256,string memory) pure returns (uint256)","value":"mod"},"id":241,"name":"Identifier","src":"4528:3:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":234,"type":"uint256","value":"a"},"id":242,"name":"Identifier","src":"4532:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":236,"type":"uint256","value":"b"},"id":243,"name":"Identifier","src":"4535:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"536166654d6174683a206d6f64756c6f206279207a65726f","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"string","type":"literal_string \"SafeMath: modulo by zero\"","value":"SafeMath: modulo by zero"},"id":244,"name":"Literal","src":"4538:26:0"}],"id":245,"name":"FunctionCall","src":"4528:37:0"}],"id":246,"name":"Return","src":"4521:44:0"}],"id":247,"name":"Block","src":"4511:61:0"}],"id":248,"name":"FunctionDefinition","src":"4444:128:0"},{"attributes":{"documentation":"@dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\nReverts with custom message when dividing by zero.\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\nopcode (which leaves remaining gas untouched) while Solidity uses an\ninvalid opcode to revert (consuming all remaining gas).\n     * Requirements:\n     * - The divisor cannot be zero.","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"mod","overrides":null,"scope":272,"stateMutability":"pure","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"a","overrides":null,"scope":271,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":249,"name":"ElementaryTypeName","src":"5056:7:0"}],"id":250,"name":"VariableDeclaration","src":"5056:9:0"},{"attributes":{"constant":false,"name":"b","overrides":null,"scope":271,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":251,"name":"ElementaryTypeName","src":"5067:7:0"}],"id":252,"name":"VariableDeclaration","src":"5067:9:0"},{"attributes":{"constant":false,"name":"errorMessage","overrides":null,"scope":271,"stateVariable":false,"storageLocation":"memory","type":"string","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"string","type":"string"},"id":253,"name":"ElementaryTypeName","src":"5078:6:0"}],"id":254,"name":"VariableDeclaration","src":"5078:26:0"}],"id":255,"name":"ParameterList","src":"5055:50:0"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":271,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":256,"name":"ElementaryTypeName","src":"5129:7:0"}],"id":257,"name":"VariableDeclaration","src":"5129:7:0"}],"id":258,"name":"ParameterList","src":"5128:9:0"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"overloadedDeclarations":[290,291],"referencedDeclaration":291,"type":"function (bool,string memory) pure","value":"require"},"id":259,"name":"Identifier","src":"5148:7:0"},{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"!=","type":"bool"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":252,"type":"uint256","value":"b"},"id":260,"name":"Identifier","src":"5156:1:0"},{"attributes":{"argumentTypes":null,"hexvalue":"30","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 0","value":"0"},"id":261,"name":"Literal","src":"5161:1:0"}],"id":262,"name":"BinaryOperation","src":"5156:6:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":254,"type":"string memory","value":"errorMessage"},"id":263,"name":"Identifier","src":"5164:12:0"}],"id":264,"name":"FunctionCall","src":"5148:29:0"}],"id":265,"name":"ExpressionStatement","src":"5148:29:0"},{"attributes":{"functionReturnParameters":258},"children":[{"attributes":{"argumentTypes":null,"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"%","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":250,"type":"uint256","value":"a"},"id":266,"name":"Identifier","src":"5194:1:0"},{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":252,"type":"uint256","value":"b"},"id":267,"name":"Identifier","src":"5198:1:0"}],"id":268,"name":"BinaryOperation","src":"5194:5:0"}],"id":269,"name":"Return","src":"5187:12:0"}],"id":270,"name":"Block","src":"5138:68:0"}],"id":271,"name":"FunctionDefinition","src":"5043:163:0"}],"id":272,"name":"ContractDefinition","src":"630:4578:0"}],"id":273,"name":"SourceUnit","src":"33:5176:0"}},"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-SWAPP_Protocol-project1/openzeppelin-contracts-3.3.0/contracts/mocks/CountersImpl.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-SWAPP_Protocol-project1/openzeppelin-contracts-3.3.0/contracts/mocks/CountersImpl.sol","exportedSymbols":{"CountersImpl":[36]}},"children":[{"attributes":{"literals":["solidity",">=","0.6",".0","<","0.8",".0"]},"id":1,"name":"PragmaDirective","src":"33:31:1"},{"attributes":{"SourceUnit":86,"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-SWAPP_Protocol-project1/openzeppelin-contracts-3.3.0/contracts/utils/Counters.sol","file":"../utils/Counters.sol","scope":37,"symbolAliases":[null],"unitAlias":""},"id":2,"name":"ImportDirective","src":"66:31:1"},{"attributes":{"abstract":false,"baseContracts":[null],"contractDependencies":[null],"contractKind":"contract","documentation":null,"fullyImplemented":true,"linearizedBaseContracts":[36],"name":"CountersImpl","scope":37},"children":[{"children":[{"attributes":{"contractScope":null,"name":"Counters","referencedDeclaration":85,"type":"library Counters"},"id":3,"name":"UserDefinedTypeName","src":"133:8:1"},{"attributes":{"contractScope":null,"name":"Counters.Counter","referencedDeclaration":45,"type":"struct Counters.Counter"},"id":4,"name":"UserDefinedTypeName","src":"146:16:1"}],"id":5,"name":"UsingForDirective","src":"127:36:1"},{"attributes":{"constant":false,"name":"_counter","overrides":null,"scope":36,"stateVariable":true,"storageLocation":"default","type":"struct Counters.Counter","value":null,"visibility":"private"},"children":[{"attributes":{"contractScope":null,"name":"Counters.Counter","referencedDeclaration":45,"type":"struct Counters.Counter"},"id":6,"name":"UserDefinedTypeName","src":"169:16:1"}],"id":7,"name":"VariableDeclaration","src":"169:33:1"},{"attributes":{"documentation":null,"functionSelector":"9fa6a6e3","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"current","overrides":null,"scope":36,"stateMutability":"view","virtual":false,"visibility":"public"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":8,"name":"ParameterList","src":"225:2:1"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":17,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":9,"name":"ElementaryTypeName","src":"249:7:1"}],"id":10,"name":"VariableDeclaration","src":"249:7:1"}],"id":11,"name":"ParameterList","src":"248:9:1"},{"children":[{"attributes":{"functionReturnParameters":11},"children":[{"attributes":{"argumentTypes":null,"arguments":[null],"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"uint256","type_conversion":false},"children":[{"attributes":{"argumentTypes":[null],"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"current","referencedDeclaration":56,"type":"function (struct Counters.Counter storage pointer) view returns (uint256)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":7,"type":"struct Counters.Counter storage ref","value":"_counter"},"id":12,"name":"Identifier","src":"275:8:1"}],"id":13,"name":"MemberAccess","src":"275:16:1"}],"id":14,"name":"FunctionCall","src":"275:18:1"}],"id":15,"name":"Return","src":"268:25:1"}],"id":16,"name":"Block","src":"258:42:1"}],"id":17,"name":"FunctionDefinition","src":"209:91:1"},{"attributes":{"documentation":null,"functionSelector":"d09de08a","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"increment","overrides":null,"scope":36,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":18,"name":"ParameterList","src":"324:2:1"},{"attributes":{"parameters":[null]},"children":[],"id":19,"name":"ParameterList","src":"334:0:1"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"arguments":[null],"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[null],"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"increment","referencedDeclaration":68,"type":"function (struct Counters.Counter storage pointer)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":7,"type":"struct Counters.Counter storage ref","value":"_counter"},"id":20,"name":"Identifier","src":"344:8:1"}],"id":22,"name":"MemberAccess","src":"344:18:1"}],"id":23,"name":"FunctionCall","src":"344:20:1"}],"id":24,"name":"ExpressionStatement","src":"344:20:1"}],"id":25,"name":"Block","src":"334:37:1"}],"id":26,"name":"FunctionDefinition","src":"306:65:1"},{"attributes":{"documentation":null,"functionSelector":"2baeceb7","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"decrement","overrides":null,"scope":36,"stateMutability":"nonpayable","virtual":false,"visibility":"public"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":27,"name":"ParameterList","src":"395:2:1"},{"attributes":{"parameters":[null]},"children":[],"id":28,"name":"ParameterList","src":"405:0:1"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"arguments":[null],"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[null],"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"decrement","referencedDeclaration":84,"type":"function (struct Counters.Counter storage pointer)"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":7,"type":"struct Counters.Counter storage ref","value":"_counter"},"id":29,"name":"Identifier","src":"415:8:1"}],"id":31,"name":"MemberAccess","src":"415:18:1"}],"id":32,"name":"FunctionCall","src":"415:20:1"}],"id":33,"name":"ExpressionStatement","src":"415:20:1"}],"id":34,"name":"Block","src":"405:37:1"}],"id":35,"name":"FunctionDefinition","src":"377:65:1"}],"id":36,"name":"ContractDefinition","src":"99:345:1"}],"id":37,"name":"SourceUnit","src":"33:412:1"}},"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-SWAPP_Protocol-project1/openzeppelin-contracts-3.3.0/contracts/utils/Counters.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-SWAPP_Protocol-project1/openzeppelin-contracts-3.3.0/contracts/utils/Counters.sol","exportedSymbols":{"Counters":[85]}},"children":[{"attributes":{"literals":["solidity",">=","0.6",".0","<","0.8",".0"]},"id":38,"name":"PragmaDirective","src":"33:31:2"},{"attributes":{"SourceUnit":273,"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Chainsulting-SWAPP_Protocol-project1/openzeppelin-contracts-3.3.0/contracts/math/SafeMath.sol","file":"../math/SafeMath.sol","scope":86,"symbolAliases":[null],"unitAlias":""},"id":39,"name":"ImportDirective","src":"66:30:2"},{"attributes":{"abstract":false,"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":"@title Counters\n@author Matt Condon (@shrugs)\n@dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\nof elements in a mapping, issuing ERC721 ids, or counting request ids.\n * Include with `using Counters for Counters.Counter;`\nSince it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\noverflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\ndirectly accessed.","fullyImplemented":true,"linearizedBaseContracts":[85],"name":"Counters","scope":86},"children":[{"children":[{"attributes":{"contractScope":null,"name":"SafeMath","referencedDeclaration":272,"type":"library SafeMath"},"id":40,"name":"UserDefinedTypeName","src":"699:8:2"},{"attributes":{"name":"uint256","type":"uint256"},"id":41,"name":"ElementaryTypeName","src":"712:7:2"}],"id":42,"name":"UsingForDirective","src":"693:27:2"},{"attributes":{"canonicalName":"Counters.Counter","name":"Counter","scope":85,"visibility":"public"},"children":[{"attributes":{"constant":false,"name":"_value","overrides":null,"scope":45,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":43,"name":"ElementaryTypeName","src":"1065:7:2"}],"id":44,"name":"VariableDeclaration","src":"1065:14:2"}],"id":45,"name":"StructDefinition","src":"726:374:2"},{"attributes":{"documentation":null,"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"current","overrides":null,"scope":85,"stateMutability":"view","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"counter","overrides":null,"scope":56,"stateVariable":false,"storageLocation":"storage","type":"struct Counters.Counter","value":null,"visibility":"internal"},"children":[{"attributes":{"contractScope":null,"name":"Counter","referencedDeclaration":45,"type":"struct Counters.Counter"},"id":46,"name":"UserDefinedTypeName","src":"1123:7:2"}],"id":47,"name":"VariableDeclaration","src":"1123:23:2"}],"id":48,"name":"ParameterList","src":"1122:25:2"},{"children":[{"attributes":{"constant":false,"name":"","overrides":null,"scope":56,"stateVariable":false,"storageLocation":"default","type":"uint256","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"uint256","type":"uint256"},"id":49,"name":"ElementaryTypeName","src":"1171:7:2"}],"id":50,"name":"VariableDeclaration","src":"1171:7:2"}],"id":51,"name":"ParameterList","src":"1170:9:2"},{"children":[{"attributes":{"functionReturnParameters":51},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"_value","referencedDeclaration":44,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":47,"type":"struct Counters.Counter storage pointer","value":"counter"},"id":52,"name":"Identifier","src":"1197:7:2"}],"id":53,"name":"MemberAccess","src":"1197:14:2"}],"id":54,"name":"Return","src":"1190:21:2"}],"id":55,"name":"Block","src":"1180:38:2"}],"id":56,"name":"FunctionDefinition","src":"1106:112:2"},{"attributes":{"documentation":null,"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"increment","overrides":null,"scope":85,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"counter","overrides":null,"scope":68,"stateVariable":false,"storageLocation":"storage","type":"struct Counters.Counter","value":null,"visibility":"internal"},"children":[{"attributes":{"contractScope":null,"name":"Counter","referencedDeclaration":45,"type":"struct Counters.Counter"},"id":57,"name":"UserDefinedTypeName","src":"1243:7:2"}],"id":58,"name":"VariableDeclaration","src":"1243:23:2"}],"id":59,"name":"ParameterList","src":"1242:25:2"},{"attributes":{"parameters":[null]},"children":[],"id":60,"name":"ParameterList","src":"1277:0:2"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"+=","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"member_name":"_value","referencedDeclaration":44,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":58,"type":"struct Counters.Counter storage pointer","value":"counter"},"id":61,"name":"Identifier","src":"1376:7:2"}],"id":63,"name":"MemberAccess","src":"1376:14:2"},{"attributes":{"argumentTypes":null,"hexvalue":"31","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 1","value":"1"},"id":64,"name":"Literal","src":"1394:1:2"}],"id":65,"name":"Assignment","src":"1376:19:2"}],"id":66,"name":"ExpressionStatement","src":"1376:19:2"}],"id":67,"name":"Block","src":"1277:125:2"}],"id":68,"name":"FunctionDefinition","src":"1224:178:2"},{"attributes":{"documentation":null,"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"decrement","overrides":null,"scope":85,"stateMutability":"nonpayable","virtual":false,"visibility":"internal"},"children":[{"children":[{"attributes":{"constant":false,"name":"counter","overrides":null,"scope":84,"stateVariable":false,"storageLocation":"storage","type":"struct Counters.Counter","value":null,"visibility":"internal"},"children":[{"attributes":{"contractScope":null,"name":"Counter","referencedDeclaration":45,"type":"struct Counters.Counter"},"id":69,"name":"UserDefinedTypeName","src":"1427:7:2"}],"id":70,"name":"VariableDeclaration","src":"1427:23:2"}],"id":71,"name":"ParameterList","src":"1426:25:2"},{"attributes":{"parameters":[null]},"children":[],"id":72,"name":"ParameterList","src":"1461:0:2"},{"children":[{"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"operator":"=","type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"member_name":"_value","referencedDeclaration":44,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":70,"type":"struct Counters.Counter storage pointer","value":"counter"},"id":73,"name":"Identifier","src":"1471:7:2"}],"id":75,"name":"MemberAccess","src":"1471:14:2"},{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"tryCall":false,"type":"uint256","type_conversion":false},"children":[{"attributes":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"member_name":"sub","referencedDeclaration":128,"type":"function (uint256,uint256) pure returns (uint256)"},"children":[{"attributes":{"argumentTypes":null,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"member_name":"_value","referencedDeclaration":44,"type":"uint256"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":70,"type":"struct Counters.Counter storage pointer","value":"counter"},"id":76,"name":"Identifier","src":"1488:7:2"}],"id":77,"name":"MemberAccess","src":"1488:14:2"}],"id":78,"name":"MemberAccess","src":"1488:18:2"},{"attributes":{"argumentTypes":null,"hexvalue":"31","isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"subdenomination":null,"token":"number","type":"int_const 1","value":"1"},"id":79,"name":"Literal","src":"1507:1:2"}],"id":80,"name":"FunctionCall","src":"1488:21:2"}],"id":81,"name":"Assignment","src":"1471:38:2"}],"id":82,"name":"ExpressionStatement","src":"1471:38:2"}],"id":83,"name":"Block","src":"1461:55:2"}],"id":84,"name":"FunctionDefinition","src":"1408:108:2"}],"id":85,"name":"ContractDefinition","src":"670:848:2"}],"id":86,"name":"SourceUnit","src":"33:1486:2"}}},"version":"0.6.0+commit.26b70077.Linux.g++"}
