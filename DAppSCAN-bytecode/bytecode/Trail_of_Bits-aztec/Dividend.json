{"contracts":{"/home/sdb/yemx6/solc-DApp/labeledCode/Trail_of_Bits-aztec/AZTEC-c3f49df54849cd2e91a9ba4937d895179e7c283d/packages/protocol/contracts/ACE/validators/dividend/Dividend.sol:Dividend":{"abi":"[{\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"}]","bin":"608060405234801561001057600080fd5b5061080a806100206000396000f3fe608060405234801561001057600080fd5b50610019610023565b606060405261029c565b60443560805260643560a052610184356101040180357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101243506816101443506826101643506621000008211156100835761019060005260206000fd5b6210000081111561009a5761019060005260206000fd5b6024356102a052816102c052806102e0526100b58587610521565b608085026103000160005b60038110156102675760c081026020890101600060208201358760018511600181146100f3576000811461011057610115565b8a8b8a60c08803358e03098c8a60c0800189033509089350610115565b843593505b50610121828486610472565b89600051068a81850993508a81840992508a818b099150602060002060005260406080860160e0376040808601602037818b0361012052836060528260c05260406101a0606060e060075afa60406101206060602060075afa8116905060406101606060608060075afa811690506040610160608061012060065afa81169050604088608061016060065afa8116905060008714156101fa57602051610260526040516102805260e0516101e052610100517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703610200525b600087111561023d578260605260406102206060602060075afa811690506040610260608061022060065afa8116905060406101e060806101a060065afa811690505b8015156102505761019060005260206000fd5b6040880197505050505050506001810190506100c0565b5061027260846102a1565b846102a082036102a0200684811415156102925761019460005260206000fd5b5050505050505050565b61046d565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781356020830135604084013560608501357f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81147f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83147f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c285147f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed87148415861588158a15171717171717171561037f5761019060005260206000fd5b6101e051602052610200516040527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6080527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26060527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c0527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a0526102605160e05261028051610100528361014052826101205281610180528061016052602080610180602060085afa60205115811517156104645761019060005260206000fd5b50505050505050565b61051c565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408301356060840135608085013560a086013584838409856003878789898a090908148582830986600388868a888909090814166001891189888b06141660018b118b898d061416161615156105115761019060005260206000fd5b505050505050505050565b61055d565b60005b8281101561054d57606060c0820283010160808160808402610300013750600181019050610524565b5060808202610300206000525050565b610565610567565b005b6101843561010401803560016101a435610124016101c435610124016101e4356101440160016101a05260606101c05260c0610200526000610240526000806102605261012435610280526102a0856020820152602086026102e00160005b878110156106915760c0810260208b0101600160005260806040820160203760c08352600160208401528735604084015260a06000206060840152604060808401527f800000000000000000000000000000000000000000000000000000000000000060016060830135160260408201351760a08401527f8000000000000000000000000000000000000000000000000000000000000000600160a0830135160260808201351760c08401528383036020830260408601015260e083019250506001810190506105c6565b50602082820303825281810360c00161022052809150868803602083015260208789030260400181019050865b888110156107af5760c0810260208b01016020898303028601358060408803013560016000526080604084016020378060c00185526001602086015260208b850302890135604086015260a060002060608601528060400160808601527f8000000000000000000000000000000000000000000000000000000000000000600160405116026020511760a08601527f8000000000000000000000000000000000000000000000000000000000000000600160805116026060511760c08601528060208903830160e087013785850360208c8603026040880101526020855101850194505050506001810190506106be565b5060208282030382526102a081038060a0016101e0528061010001610180526020610160528061014001610160f3fea165627a7a7230582065f04ac8a8bc630d2985e969147cc50c69de055420d8de83876b393ab2e2b1b40029","bin-runtime":"608060405234801561001057600080fd5b50610019610023565b606060405261029c565b60443560805260643560a052610184356101040180357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001806101243506816101443506826101643506621000008211156100835761019060005260206000fd5b6210000081111561009a5761019060005260206000fd5b6024356102a052816102c052806102e0526100b58587610521565b608085026103000160005b60038110156102675760c081026020890101600060208201358760018511600181146100f3576000811461011057610115565b8a8b8a60c08803358e03098c8a60c0800189033509089350610115565b843593505b50610121828486610472565b89600051068a81850993508a81840992508a818b099150602060002060005260406080860160e0376040808601602037818b0361012052836060528260c05260406101a0606060e060075afa60406101206060602060075afa8116905060406101606060608060075afa811690506040610160608061012060065afa81169050604088608061016060065afa8116905060008714156101fa57602051610260526040516102805260e0516101e052610100517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703610200525b600087111561023d578260605260406102206060602060075afa811690506040610260608061022060065afa8116905060406101e060806101a060065afa811690505b8015156102505761019060005260206000fd5b6040880197505050505050506001810190506100c0565b5061027260846102a1565b846102a082036102a0200684811415156102925761019460005260206000fd5b5050505050505050565b61046d565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4781356020830135604084013560608501357f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b81147f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa83147f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c285147f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed87148415861588158a15171717171717171561037f5761019060005260206000fd5b6101e051602052610200516040527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6080527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26060527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa60c0527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b60a0526102605160e05261028051610100528361014052826101205281610180528061016052602080610180602060085afa60205115811517156104645761019060005260206000fd5b50505050505050565b61051c565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760408301356060840135608085013560a086013584838409856003878789898a090908148582830986600388868a888909090814166001891189888b06141660018b118b898d061416161615156105115761019060005260206000fd5b505050505050505050565b61055d565b60005b8281101561054d57606060c0820283010160808160808402610300013750600181019050610524565b5060808202610300206000525050565b610565610567565b005b6101843561010401803560016101a435610124016101c435610124016101e4356101440160016101a05260606101c05260c0610200526000610240526000806102605261012435610280526102a0856020820152602086026102e00160005b878110156106915760c0810260208b0101600160005260806040820160203760c08352600160208401528735604084015260a06000206060840152604060808401527f800000000000000000000000000000000000000000000000000000000000000060016060830135160260408201351760a08401527f8000000000000000000000000000000000000000000000000000000000000000600160a0830135160260808201351760c08401528383036020830260408601015260e083019250506001810190506105c6565b50602082820303825281810360c00161022052809150868803602083015260208789030260400181019050865b888110156107af5760c0810260208b01016020898303028601358060408803013560016000526080604084016020378060c00185526001602086015260208b850302890135604086015260a060002060608601528060400160808601527f8000000000000000000000000000000000000000000000000000000000000000600160405116026020511760a08601527f8000000000000000000000000000000000000000000000000000000000000000600160805116026060511760c08601528060208903830160e087013785850360208c8603026040880101526020855101850194505050506001810190506106be565b5060208282030382526102a081038060a0016101e0528061010001610180526020610160528061014001610160f3fea165627a7a7230582065f04ac8a8bc630d2985e969147cc50c69de055420d8de83876b393ab2e2b1b40029","srcmap":"743:18337:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;743:18337:0;;;;;;;","srcmap-runtime":"743:18337:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;743:18337:0;1504:18;;;;1791:4;1785;1778:18;2754:10213;;;2980:4;2967:18;2961:4;2954:32;3029:4;3016:18;3010:4;3003:32;3089:5;3076:19;3069:5;3065:31;3135:5;3122:19;3175:66;3300:9;3292:5;3279:19;3275:35;3363:9;3355:5;3342:19;3338:35;3425:9;3417:5;3404:19;3400:35;3504:7;3500:2;3497:15;3494:2;;;3548:3;3542:4;3535:17;3586:4;3580;3573:18;3494:2;3677:7;3673:2;3670:15;3667:2;;;3721:3;3715:4;3708:17;3759:4;3753;3746:18;3667:2;4200:4;4187:18;4180:5;4173:33;4237:2;4230:5;4223:17;4271:2;4264:5;4257:17;4292:25;4315:1;4308:5;4292:25;;;4361:4;4358:1;4354:12;4347:5;4343:24;4839:1;4824:7522;4849:1;4846;4843:8;4824:7522;;;5040:4;5037:1;5033:12;5026:4;5019:5;5015:16;5011:35;;6372:4;6361:9;6357:20;6344:34;6408:9;6452:1;6449;6446:8;6480:1;6475:746;;;;7248:1;7243:247;;;;6439:1051;;6475:746;7189:9;7126;7082:2;7033:4;7022:9;7018:20;7005:34;6994:9;6990:50;6942:194;6881:9;6837:2;6788:4;6782;6778:15;6767:9;6763:31;6750:45;6702:189;6658:541;6653:546;;6475:746;;7243:247;7458:9;7445:23;7440:28;;6439:1051;;7572:35;7605:1;7602;7591:9;7572:35;;;7732:9;7725:4;7719:11;7715:27;7829:9;7826:1;7823;7816:23;7811:28;;7884:9;7881:1;7878;7871:23;7866:28;;7947:9;7944:1;7933:9;7926:31;7921:36;;8054:4;8048;8038:21;8032:4;8025:35;8725:4;8718;8707:9;8703:20;8697:4;8684:46;8792:4;8785;8774:9;8770:20;8764:4;8751:46;8847:1;8836:9;8832:17;8825:5;8818:32;8884:1;8878:4;8871:15;8920:1;8914:4;8907:15;9499:4;9492:5;9486:4;9480;9477:1;9472:3;9461:43;9601:4;9594:5;9588:4;9582;9579:1;9574:3;9563:43;9555:6;9551:56;9541:66;;9703:4;9696:5;9690:4;9684;9681:1;9676:3;9665:43;9657:6;9653:56;9643:66;;9999:4;9992:5;9986:4;9979:5;9976:1;9971:3;9960:44;9952:6;9948:57;9938:67;;10420:4;10417:1;10411:4;10404:5;10401:1;10396:3;10385:40;10377:6;10373:53;10363:63;;10872:1;10869;10866:8;10863:2;;;10930:4;10924:11;10917:5;10910:26;10981:4;10975:11;10968:5;10961:26;11032:4;11026:11;11019:5;11012:26;11212:5;11206:12;11138:66;11134:85;11099:5;11063:186;10863:2;11559:1;11556;11553:8;11550:2;;;11610:1;11604:4;11597:15;11697:4;11690:5;11684:4;11678;11675:1;11670:3;11659:43;11651:6;11647:56;11637:66;;11881:4;11874:5;11868:4;11861:5;11858:1;11853:3;11842:44;11834:6;11830:57;11820:67;;12063:4;12056:5;12050:4;12043:5;12040:1;12035:3;12024:44;12016:6;12012:57;12002:67;;11550:2;12209:6;12202:14;12199:2;;;12232:3;12226:4;12219:17;12250:4;12244;12237:18;12199:2;12290:4;12287:1;12283:12;12278:17;;4874:7472;;;;;;4866:4;4863:1;4859:12;4854:17;;4824:7522;;;4828:14;12369:21;12385:4;12369:21;;;12756:9;12747:5;12744:1;12740:13;12733:5;12723:31;12719:47;12808:9;12798:8;12795:23;12788:31;12785:2;;;12892:3;12886:4;12879:17;12930:4;12924;12917:18;12785:2;2782:10185;;;;;;;;;;13194:2490;;;13260:66;13370:2;13357:16;13425:4;13421:2;13417:13;13404:27;13483:4;13479:2;13475:13;13462:27;13541:4;13537:2;13533:13;13520:27;14136:65;14128:6;14125:77;14035:66;14027:6;14024:78;13934:66;13926:6;13923:78;13833:66;13825:6;13822:78;13792:6;13785:14;13755:6;13748:14;13718:6;13711:14;13682:6;13675:14;13651:75;13648:115;13645:155;13642:259;13639:363;13636:467;13633:570;13630:2;;;14255:3;14249:4;14242:17;14293:4;14287;14280:18;13630:2;14668:5;14662:12;14656:4;14649:26;14734:5;14728:12;14722:4;14715:26;14794:66;14788:4;14781:80;14891:66;14885:4;14878:80;14988:66;14982:4;14975:80;15085:65;15079:4;15072:79;15187:5;15181:12;15175:4;15168:26;15254:5;15248:12;15241:5;15234:27;15315:6;15308:5;15301:21;15353:6;15346:5;15339:21;15391:6;15384:5;15377:21;15429:6;15422:5;15415:21;15507:4;15501;15494:5;15488:4;15485:1;15480:3;15469:43;15566:4;15560:11;15553:19;15543:7;15536:15;15533:40;15530:2;;;15609:3;15603:4;15596:17;15647:4;15641;15634:18;15530:2;13223:2461;;;;;;;;;16023:2024;;;16098:66;16200;16320:4;16314;16310:15;16297:29;16380:4;16374;16370:15;16357:29;16440:4;16434;16430:15;16417:29;16500:4;16494;16490:15;16477:29;17828:11;17820:6;17812;17805:35;17759:11;17720:1;17670:11;17662:6;17648:11;17640:6;17632;17625:35;17618:64;17574:197;17520:350;17448:11;17440:6;17432;17425:35;17379:11;17340:1;17290:11;17282:6;17268:11;17260:6;17252;17245:35;17238:64;17194:197;17140:350;17107:789;16988:1;16985;16982:8;16914:1;16902:9;16899:1;16895:17;16892:24;16855:200;16749:1;16746;16743:8;16675:1;16663:9;16660:1;16656:17;16653:24;16616:209;16583:498;16554:1364;16526:1410;16523:2;;;17972:3;17966:4;17959:17;18010:4;18004;17997:18;16523:2;16063:1984;;;;;;;;;;;18679:338;;;18747:1;18732:210;18757:1;18754;18751:8;18732:210;;;18847:4;18839;18836:1;18832:12;18825:5;18821:24;18817:35;18919:4;18912:5;18904:4;18901:1;18897:12;18890:5;18886:24;18873:51;18782:160;18774:4;18771:1;18767:12;18762:17;;18732:210;;;18736:14;18996:4;18993:1;18989:12;18982:5;18972:30;18966:4;18959:44;18714:303;;;;19037:34;:32;:34::i;:::-;743:18337;1495:9189:1;1644:5;1631:19;1624:5;1620:31;1686:5;1673:19;1714:1;1771:5;1758:19;1751:5;1747:31;1872:5;1859:19;1852:5;1848:31;1969:5;1956:19;1949:5;1945:31;3938:4;3931:5;3924:19;4017:4;4010:5;4003:19;4151:4;4144:5;4137:19;4290:4;4283:5;4276:19;4511:1;4539:7;4532:5;4525:22;4621:5;4608:19;4601:5;4594:34;4658:5;4759:1;4752:4;4742:8;4738:19;4731:30;4928:4;4925:1;4921:12;4914:5;4910:24;4963:1;4948:2088;4973:1;4970;4967:8;4948:2088;;;5062:4;5059:1;5055:12;5048:4;5041:5;5037:16;5033:35;5147:4;5141;5134:18;5237:4;5230;5219:9;5215:20;5209:4;5196:46;5335:4;5332:1;5325:15;5436:4;5429;5426:1;5422:12;5415:26;5542:11;5529:25;5522:4;5519:1;5515:12;5508:47;5659:4;5653;5643:21;5636:4;5633:1;5629:12;5622:43;5787:4;5780;5777:1;5773:12;5766:26;6139:66;6104:4;6096;6085:9;6081:20;6068:34;6064:45;6031:200;5999:4;5988:9;5984:20;5971:34;5943:310;5916:4;5913:1;5909:12;5881:390;6618:66;6583:4;6575;6564:9;6560:20;6547:34;6543:45;6510:200;6478:4;6467:9;6463:20;6450:34;6422:310;6395:4;6392:1;6388:12;6360:390;6905:8;6902:1;6898:16;6890:4;6887:1;6883:12;6876:4;6866:8;6862:19;6858:38;6851:64;7017:4;7014:1;7010:12;7005:17;;4998:2038;4990:4;4987:1;4983:12;4978:17;;4948:2088;;;4952:14;7223:4;7212:8;7209:1;7205:16;7201:27;7191:8;7184:45;7273:8;7270:1;7266:16;7260:4;7256:27;7249:5;7242:42;7356:1;7344:13;;7405:1;7402;7398:9;7391:4;7381:8;7377:19;7370:38;7490:4;7486:1;7483;7479:9;7475:20;7469:4;7465:31;7462:1;7458:39;7453:44;;7554:1;7539:2474;7564:1;7561;7558:8;7539:2474;;;7687:4;7684:1;7680:12;7673:4;7666:5;7662:16;7658:35;7816:4;7812:1;7809;7805:9;7801:20;7791:8;7787:35;7774:49;7940:13;7933:4;7923:8;7919:19;7915:39;7902:53;7986:4;7980;7973:18;8125:4;8118;8107:9;8103:20;8097:4;8084:46;8232:14;8226:4;8222:25;8219:1;8212:36;8344:4;8337;8334:1;8330:12;8323:26;8494:4;8490:1;8487;8483:9;8479:20;8465:12;8461:39;8448:53;8441:4;8438:1;8434:12;8427:75;8591:4;8585;8575:21;8568:4;8565:1;8561:12;8554:43;8705:14;8699:4;8695:25;8688:4;8685:1;8681:12;8674:47;9022:66;8987:4;8980;8974:11;8970:22;8937:177;8906:4;8900:11;8872:264;8845:4;8842:1;8838:12;8810:344;9431:66;9400:4;9393;9387:11;9383:22;9354:165;9327:4;9321:11;9297:240;9274:4;9271:1;9267:12;9243:312;9689:14;9681:4;9671:8;9667:19;9652:13;9648:39;9641:4;9638:1;9634:12;9621:83;9867:8;9864:1;9860:16;9852:4;9848:1;9845;9841:9;9837:20;9830:4;9820:8;9816:19;9812:46;9805:72;9993:4;9989:1;9983:8;9979:19;9976:1;9972:27;9967:32;;7589:2424;;;7581:4;7578:1;7574:12;7569:17;;7539:2474;;;7543:14;10135:4;10124:8;10121:1;10117:16;10113:27;10103:8;10096:45;10235:5;10232:1;10228:13;10448:11;10442:4;10438:22;10431:5;10424:37;10499:11;10492:5;10488:23;10481:5;10474:38;10581:4;10574:5;10567:19;10624:11;10617:5;10613:23;10606:5;10599:38"},"/home/sdb/yemx6/solc-DApp/labeledCode/Trail_of_Bits-aztec/AZTEC-c3f49df54849cd2e91a9ba4937d895179e7c283d/packages/protocol/contracts/ACE/validators/dividend/DividendABIEncoder.sol:DividendABIEncoder":{"abi":"[]","bin":"604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a723058207099b1c17d3e7b460fe2cb9ce5f1cc9c0de36216aa9b73e56ac197ac7a6fdc780029","bin-runtime":"73000000000000000000000000000000000000000030146080604052600080fdfea165627a7a723058207099b1c17d3e7b460fe2cb9ce5f1cc9c0de36216aa9b73e56ac197ac7a6fdc780029","srcmap":"689:9997:1:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24","srcmap-runtime":"689:9997:1:-;;;;;;;;"},"/home/sdb/yemx6/solc-DApp/labeledCode/Trail_of_Bits-aztec/AZTEC-c3f49df54849cd2e91a9ba4937d895179e7c283d/packages/protocol/contracts/interfaces/DividendInterface.sol:DividendInterface":{"abi":"[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes\"},{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"uint256[6]\"}],\"name\":\"validateDividend\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}]","bin":"6101b0610030600b82828239805160001a6073146000811461002057610022565bfe5b5030600052607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610610058576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a2ed4de41461005d575b600080fd5b6100ff600480360361010081101561007457600080fd5b810190808035906020019064010000000081111561009157600080fd5b8201836020820111156100a357600080fd5b803590602001918460018302840111640100000000831117156100c557600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908060c00190919291929050505061017a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013f578082015181840152602081019050610124565b50505050905090810190601f16801561016c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606094935050505056fea165627a7a72305820fc7d4018126b99cd62470e4243c5bec5c828bc377351632cc6a580b3f88dc04f0029","bin-runtime":"7300000000000000000000000000000000000000003014608060405260043610610058576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063a2ed4de41461005d575b600080fd5b6100ff600480360361010081101561007457600080fd5b810190808035906020019064010000000081111561009157600080fd5b8201836020820111156100a357600080fd5b803590602001918460018302840111640100000000831117156100c557600080fd5b9091929391929390803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908060c00190919291929050505061017a565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561013f578082015181840152602081019050610124565b50505050905090810190601f16801561016c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b606094935050505056fea165627a7a72305820fc7d4018126b99cd62470e4243c5bec5c828bc377351632cc6a580b3f88dc04f0029","srcmap":"33:200:2:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24","srcmap-runtime":"33:200:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;65:166;;;;;;13:3:-1;8;5:12;2:2;;;30:1;27;20:12;2:2;65:166:2;;;;;;;;;;21:11:-1;8;5:28;2:2;;;46:1;43;36:12;2:2;65:166:2;;35:9:-1;28:4;12:14;8:25;5:40;2:2;;;58:1;55;48:12;2:2;65:166:2;;;;;;100:9:-1;95:1;81:12;77:20;67:8;63:35;60:50;39:11;25:12;22:29;11:107;8:2;;;131:1;128;121:12;8:2;65:166:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;99:1;94:3;90:11;84:18;80:1;75:3;71:11;64:39;52:2;49:1;45:10;40:15;;8:100;;;12:14;65:166:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;211:12;65:166;;;;;;:::o"}},"sourceList":["/home/sdb/yemx6/solc-DApp/labeledCode/Trail_of_Bits-aztec/AZTEC-c3f49df54849cd2e91a9ba4937d895179e7c283d/packages/protocol/contracts/ACE/validators/dividend/Dividend.sol","/home/sdb/yemx6/solc-DApp/labeledCode/Trail_of_Bits-aztec/AZTEC-c3f49df54849cd2e91a9ba4937d895179e7c283d/packages/protocol/contracts/ACE/validators/dividend/DividendABIEncoder.sol","/home/sdb/yemx6/solc-DApp/labeledCode/Trail_of_Bits-aztec/AZTEC-c3f49df54849cd2e91a9ba4937d895179e7c283d/packages/protocol/contracts/interfaces/DividendInterface.sol"],"sources":{"/home/sdb/yemx6/solc-DApp/labeledCode/Trail_of_Bits-aztec/AZTEC-c3f49df54849cd2e91a9ba4937d895179e7c283d/packages/protocol/contracts/ACE/validators/dividend/Dividend.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Trail_of_Bits-aztec/AZTEC-c3f49df54849cd2e91a9ba4937d895179e7c283d/packages/protocol/contracts/ACE/validators/dividend/Dividend.sol","exportedSymbols":{"Dividend":[14]}},"children":[{"attributes":{"literals":["solidity",">=","0.5",".0","<","0.6",".0"]},"id":1,"name":"PragmaDirective","src":"0:31:0"},{"attributes":{"SourceUnit":23,"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Trail_of_Bits-aztec/AZTEC-c3f49df54849cd2e91a9ba4937d895179e7c283d/packages/protocol/contracts/ACE/validators/dividend/DividendABIEncoder.sol","file":"./DividendABIEncoder.sol","scope":15,"symbolAliases":[null],"unitAlias":""},"id":2,"name":"ImportDirective","src":"33:34:0"},{"attributes":{"SourceUnit":40,"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Trail_of_Bits-aztec/AZTEC-c3f49df54849cd2e91a9ba4937d895179e7c283d/packages/protocol/contracts/interfaces/DividendInterface.sol","file":"../../../interfaces/DividendInterface.sol","scope":15,"symbolAliases":[null],"unitAlias":""},"id":3,"name":"ImportDirective","src":"68:51:0"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"contract","documentation":"@title Library to validate AZTEC dividend proofs\n@author AZTEC\n@dev Don't include this as an internal library. This contract uses a static memory table\nto cache elliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`. External calls to OptimizedAZTEC\ncan be treated as pure functions as this contract contains no storage and makes no external calls\n(other than to precompiles).\nCopyright Spilsbury Holdings Ltd 2019. All rights reserved.*","fullyImplemented":true,"linearizedBaseContracts":[14],"name":"Dividend","scope":15},"children":[{"attributes":{"documentation":"@dev This will take any dividend calculation proof data and attempt to verify it in zero-knowledge\nIf the proof is not valid, the transaction throws.\n@notice See DividendInterface for how method calls should be constructed.\nDividend is written in YUL to enable manual memory management and for other efficiency savings.*","implemented":true,"isConstructor":false,"kind":"fallback","modifiers":[null],"name":"","scope":14,"stateMutability":"nonpayable","superFunction":null,"visibility":"external"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":4,"name":"ParameterList","src":"1180:2:0"},{"attributes":{"parameters":[null]},"children":[],"id":5,"name":"ParameterList","src":"1192:0:0"},{"children":[{"attributes":{"externalReferences":[null],"operations":"{\n    validateDividend()\n    mstore(0x40, 0x60)\n    function validateDividend()\n    {\n        mstore(0x80, calldataload(0x44))\n        mstore(0xa0, calldataload(0x64))\n        let notes := add(0x104, calldataload(0x184))\n        let n := calldataload(notes)\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let challenge := mod(calldataload(0x124), gen_order)\n        let za := mod(calldataload(0x144), gen_order)\n        let zb := mod(calldataload(0x164), gen_order)\n        if gt(za, 1048576)\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        if gt(zb, 1048576)\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        mstore(0x2a0, calldataload(0x24))\n        mstore(0x2c0, za)\n        mstore(0x2e0, zb)\n        hashCommitments(notes, n)\n        let b := add(0x300, mul(n, 0x80))\n        for {\n            let i := 0\n        }\n        lt(i, 3)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n            let k\n            let a := calldataload(add(noteIndex, 0x20))\n            let c := challenge\n            switch gt(i, 1)\n            case 1 {\n                k := addmod(mulmod(calldataload(sub(noteIndex, add(0xc0, 0xc0))), zb, gen_order), mulmod(sub(gen_order, calldataload(sub(noteIndex, 0xc0))), za, gen_order), gen_order)\n            }\n            case 0 {\n                k := calldataload(noteIndex)\n            }\n            validateCommitment(noteIndex, k, a)\n            let x := mod(mload(0x00), gen_order)\n            k := mulmod(k, x, gen_order)\n            a := mulmod(a, x, gen_order)\n            c := mulmod(challenge, x, gen_order)\n            mstore(0x00, keccak256(0x00, 0x20))\n            calldatacopy(0xe0, add(noteIndex, 0x80), 0x40)\n            calldatacopy(0x20, add(noteIndex, 0x40), 0x40)\n            mstore(0x120, sub(gen_order, c))\n            mstore(0x60, k)\n            mstore(0xc0, a)\n            let result := staticcall(gas(), 7, 0xe0, 0x60, 0x1a0, 0x40)\n            result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x120, 0x40))\n            result := and(result, staticcall(gas(), 7, 0x80, 0x60, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x120, 0x80, 0x160, 0x40))\n            result := and(result, staticcall(gas(), 6, 0x160, 0x80, b, 0x40))\n            if eq(i, 0)\n            {\n                mstore(0x260, mload(0x20))\n                mstore(0x280, mload(0x40))\n                mstore(0x1e0, mload(0xe0))\n                mstore(0x200, sub(0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47, mload(0x100)))\n            }\n            if gt(i, 0)\n            {\n                mstore(0x60, c)\n                result := and(result, staticcall(gas(), 7, 0x20, 0x60, 0x220, 0x40))\n                result := and(result, staticcall(gas(), 6, 0x220, 0x80, 0x260, 0x40))\n                result := and(result, staticcall(gas(), 6, 0x1a0, 0x80, 0x1e0, 0x40))\n            }\n            if iszero(result)\n            {\n                mstore(0x00, 400)\n                revert(0x00, 0x20)\n            }\n            b := add(b, 0x40)\n        }\n        validatePairing(0x84)\n        let expected := mod(keccak256(0x2a0, sub(b, 0x2a0)), gen_order)\n        if iszero(eq(expected, challenge))\n        {\n            mstore(0x00, 404)\n            revert(0x00, 0x20)\n        }\n    }\n    function validatePairing(t2)\n    {\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let t2_x_1 := calldataload(t2)\n        let t2_x_2 := calldataload(add(t2, 0x20))\n        let t2_y_1 := calldataload(add(t2, 0x40))\n        let t2_y_2 := calldataload(add(t2, 0x60))\n        if or(or(or(or(or(or(or(iszero(t2_x_1), iszero(t2_x_2)), iszero(t2_y_1)), iszero(t2_y_2)), eq(t2_x_1, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)), eq(t2_x_2, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)), eq(t2_y_1, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)), eq(t2_y_2, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n        mstore(0x20, mload(0x1e0))\n        mstore(0x40, mload(0x200))\n        mstore(0x80, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)\n        mstore(0x60, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)\n        mstore(0xc0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)\n        mstore(0xa0, 0x90689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)\n        mstore(0xe0, mload(0x260))\n        mstore(0x100, mload(0x280))\n        mstore(0x140, t2_x_1)\n        mstore(0x120, t2_x_2)\n        mstore(0x180, t2_y_1)\n        mstore(0x160, t2_y_2)\n        let success := staticcall(gas(), 8, 0x20, 0x180, 0x20, 0x20)\n        if or(iszero(success), iszero(mload(0x20)))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function validateCommitment(note, k, a)\n    {\n        let gen_order := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001\n        let field_order := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\n        let gammaX := calldataload(add(note, 0x40))\n        let gammaY := calldataload(add(note, 0x60))\n        let sigmaX := calldataload(add(note, 0x80))\n        let sigmaY := calldataload(add(note, 0xa0))\n        if iszero(and(and(and(eq(mod(a, gen_order), a), gt(a, 1)), and(eq(mod(k, gen_order), k), gt(k, 1))), and(eq(addmod(mulmod(mulmod(sigmaX, sigmaX, field_order), sigmaX, field_order), 3, field_order), mulmod(sigmaY, sigmaY, field_order)), eq(addmod(mulmod(mulmod(gammaX, gammaX, field_order), gammaX, field_order), 3, field_order), mulmod(gammaY, gammaY, field_order)))))\n        {\n            mstore(0x00, 400)\n            revert(0x00, 0x20)\n        }\n    }\n    function hashCommitments(notes, n)\n    {\n        for {\n            let i := 0\n        }\n        lt(i, n)\n        {\n            i := add(i, 0x01)\n        }\n        {\n            let index := add(add(notes, mul(i, 0xc0)), 0x60)\n            calldatacopy(add(0x300, mul(i, 0x80)), index, 0x80)\n        }\n        mstore(0x00, keccak256(0x300, mul(n, 0x80)))\n    }\n}"},"children":[],"id":6,"name":"InlineAssembly","src":"1202:17853:0"},{"children":[{"attributes":{"argumentTypes":null,"arguments":[null],"isConstant":false,"isLValue":false,"isPure":false,"isStructConstructorCall":false,"lValueRequested":false,"names":[null],"type":"tuple()","type_conversion":false},"children":[{"attributes":{"argumentTypes":[null],"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"member_name":"encodeAndExit","referencedDeclaration":21,"type":"function () pure"},"children":[{"attributes":{"argumentTypes":null,"overloadedDeclarations":[null],"referencedDeclaration":22,"type":"type(library DividendABIEncoder)","value":"DividendABIEncoder"},"id":7,"name":"Identifier","src":"19037:18:0"}],"id":9,"name":"MemberAccess","src":"19037:32:0"}],"id":10,"name":"FunctionCall","src":"19037:34:0"}],"id":11,"name":"ExpressionStatement","src":"19037:34:0"}],"id":12,"name":"Block","src":"1192:17886:0"}],"id":13,"name":"FunctionDefinition","src":"1172:17906:0"}],"id":14,"name":"ContractDefinition","src":"743:18337:0"}],"id":15,"name":"SourceUnit","src":"0:19081:0"}},"/home/sdb/yemx6/solc-DApp/labeledCode/Trail_of_Bits-aztec/AZTEC-c3f49df54849cd2e91a9ba4937d895179e7c283d/packages/protocol/contracts/ACE/validators/dividend/DividendABIEncoder.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Trail_of_Bits-aztec/AZTEC-c3f49df54849cd2e91a9ba4937d895179e7c283d/packages/protocol/contracts/ACE/validators/dividend/DividendABIEncoder.sol","exportedSymbols":{"DividendABIEncoder":[22]}},"children":[{"attributes":{"literals":["solidity",">=","0.5",".0","<","0.6",".0"]},"id":16,"name":"PragmaDirective","src":"0:31:1"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":"@title Library to ABI encode the output of a dividend proof verification operation\n@author AZTEC\n@dev Don't include this as an internal library. This contract uses a static memory table to cache\nelliptic curve primitives and hashes.\nCalling this internally from another function will lead to memory mutation and undefined behaviour.\nThe intended use case is to call this externally via `staticcall`.\nExternal calls to OptimizedAZTEC can be treated as pure functions as this contract contains no\nstorage and makes no external calls (other than to precompiles)\nCopyright Spilsbury Holdings Ltd 2019. All rights reserved.*","fullyImplemented":true,"linearizedBaseContracts":[22],"name":"DividendABIEncoder","scope":23},"children":[{"attributes":{"documentation":"New calldata map\n0x04:0x24      = calldata location of proofData byte array  // proof data byte array\n0x24:0x44      = message sender // address\n0x44:0x64      = h_x     // crs\n0x64:0x84      = h_y     // crs\n0x84:0xa4      = t2_x0   // crs\n0xa4:0xc4      = t2_x1   // crs\n0xc4:0xe4      = t2_y0   // crs\n0xe4:0x104     = t2_y1   // crs\n0x104:0x124    = length of proofData byte array\n0x124:0x144    = challenge\n0x144:0x164    = za\n0x164:0x184    = zb\n0x184:0x1a4    = offset in byte array to notes\n0x1a4:0x1c4    = offset in byte array to inputOwners\n0x1c4:0x1e4    = offset in byte array to outputOwners\n0x1e4:0x204    = offset in byte array to metadata","implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"encodeAndExit","scope":22,"stateMutability":"pure","superFunction":null,"visibility":"internal"},"children":[{"attributes":{"parameters":[null]},"children":[],"id":17,"name":"ParameterList","src":"1517:2:1"},{"attributes":{"parameters":[null]},"children":[],"id":18,"name":"ParameterList","src":"1534:0:1"},{"children":[{"attributes":{"externalReferences":[null],"operations":"{\n    let notes := add(0x104, calldataload(0x184))\n    let n := calldataload(notes)\n    let m := 1\n    let inputOwners := add(0x124, calldataload(0x1a4))\n    let outputOwners := add(0x124, calldataload(0x1c4))\n    let metadata := add(0x144, calldataload(0x1e4))\n    mstore(0x1a0, 0x01)\n    mstore(0x1c0, 0x60)\n    mstore(0x200, 0xc0)\n    mstore(0x240, 0x00)\n    let kPublic := 0\n    mstore(0x260, kPublic)\n    mstore(0x280, calldataload(0x124))\n    let inputPtr := 0x2a0\n    mstore(add(inputPtr, 0x20), m)\n    let s := add(0x2e0, mul(m, 0x20))\n    for {\n        let i := 0\n    }\n    lt(i, m)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        mstore(0x00, 0x01)\n        calldatacopy(0x20, add(noteIndex, 0x40), 0x80)\n        mstore(s, 0xc0)\n        mstore(add(s, 0x20), 0x01)\n        mstore(add(s, 0x40), calldataload(inputOwners))\n        mstore(add(s, 0x60), keccak256(0x00, 0xa0))\n        mstore(add(s, 0x80), 0x40)\n        mstore(add(s, 0xa0), or(calldataload(add(noteIndex, 0x40)), mul(and(calldataload(add(noteIndex, 0x60)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xc0), or(calldataload(add(noteIndex, 0x80)), mul(and(calldataload(add(noteIndex, 0xa0)), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(add(inputPtr, 0x40), mul(i, 0x20)), sub(s, inputPtr))\n        s := add(s, 0xe0)\n    }\n    mstore(inputPtr, sub(sub(s, inputPtr), 0x20))\n    mstore(0x220, add(0xc0, sub(s, inputPtr)))\n    inputPtr := s\n    mstore(add(inputPtr, 0x20), sub(n, m))\n    s := add(s, add(0x40, mul(sub(n, m), 0x20)))\n    for {\n        let i := m\n    }\n    lt(i, n)\n    {\n        i := add(i, 0x01)\n    }\n    {\n        let noteIndex := add(add(notes, 0x20), mul(i, 0xc0))\n        let metadataIndex := calldataload(add(metadata, mul(sub(i, m), 0x20)))\n        let metadataLength := calldataload(add(sub(metadata, 0x40), metadataIndex))\n        mstore(0x00, 0x01)\n        calldatacopy(0x20, add(noteIndex, 0x40), 0x80)\n        mstore(s, add(0xc0, metadataLength))\n        mstore(add(s, 0x20), 0x01)\n        mstore(add(s, 0x40), calldataload(add(outputOwners, mul(sub(i, m), 0x20))))\n        mstore(add(s, 0x60), keccak256(0x00, 0xa0))\n        mstore(add(s, 0x80), add(0x40, metadataLength))\n        mstore(add(s, 0xa0), or(mload(0x20), mul(and(mload(0x40), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        mstore(add(s, 0xc0), or(mload(0x60), mul(and(mload(0x80), 0x01), 0x8000000000000000000000000000000000000000000000000000000000000000)))\n        calldatacopy(add(s, 0xe0), add(metadataIndex, sub(metadata, 0x20)), metadataLength)\n        mstore(add(add(inputPtr, 0x40), mul(sub(i, m), 0x20)), sub(s, inputPtr))\n        s := add(s, add(mload(s), 0x20))\n    }\n    mstore(inputPtr, sub(sub(s, inputPtr), 0x20))\n    let notesLength := sub(s, 0x2a0)\n    mstore(0x1e0, add(0xa0, notesLength))\n    mstore(0x180, add(0x100, notesLength))\n    mstore(0x160, 0x20)\n    return(0x160, add(0x140, notesLength))\n}"},"children":[],"id":19,"name":"InlineAssembly","src":"1544:9140:1"}],"id":20,"name":"Block","src":"1534:9150:1"}],"id":21,"name":"FunctionDefinition","src":"1495:9189:1"}],"id":22,"name":"ContractDefinition","src":"689:9997:1"}],"id":23,"name":"SourceUnit","src":"0:10687:1"}},"/home/sdb/yemx6/solc-DApp/labeledCode/Trail_of_Bits-aztec/AZTEC-c3f49df54849cd2e91a9ba4937d895179e7c283d/packages/protocol/contracts/interfaces/DividendInterface.sol":{"AST":{"attributes":{"absolutePath":"/home/sdb/yemx6/solc-DApp/labeledCode/Trail_of_Bits-aztec/AZTEC-c3f49df54849cd2e91a9ba4937d895179e7c283d/packages/protocol/contracts/interfaces/DividendInterface.sol","exportedSymbols":{"DividendInterface":[39]}},"children":[{"attributes":{"literals":["solidity",">=","0.5",".0","<","0.6",".0"]},"id":24,"name":"PragmaDirective","src":"0:31:2"},{"attributes":{"baseContracts":[null],"contractDependencies":[null],"contractKind":"library","documentation":null,"fullyImplemented":true,"linearizedBaseContracts":[39],"name":"DividendInterface","scope":40},"children":[{"attributes":{"documentation":null,"implemented":true,"isConstructor":false,"kind":"function","modifiers":[null],"name":"validateDividend","scope":39,"stateMutability":"pure","superFunction":null,"visibility":"external"},"children":[{"children":[{"attributes":{"constant":false,"name":"","scope":38,"stateVariable":false,"storageLocation":"calldata","type":"bytes","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes","type":"bytes"},"id":25,"name":"ElementaryTypeName","src":"100:5:2"}],"id":26,"name":"VariableDeclaration","src":"100:14:2"},{"attributes":{"constant":false,"name":"","scope":38,"stateVariable":false,"storageLocation":"default","type":"address","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"address","stateMutability":"nonpayable","type":"address"},"id":27,"name":"ElementaryTypeName","src":"124:7:2"}],"id":28,"name":"VariableDeclaration","src":"124:7:2"},{"attributes":{"constant":false,"name":"","scope":38,"stateVariable":false,"storageLocation":"calldata","type":"uint256[6]","value":null,"visibility":"internal"},"children":[{"attributes":{"type":"uint256[6]"},"children":[{"attributes":{"name":"uint","type":"uint256"},"id":29,"name":"ElementaryTypeName","src":"141:4:2"},{"attributes":{"argumentTypes":null,"hexvalue":"36","isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"subdenomination":null,"token":"number","type":null,"value":"6"},"id":30,"name":"Literal","src":"146:1:2"}],"id":31,"name":"ArrayTypeName","src":"141:7:2"}],"id":32,"name":"VariableDeclaration","src":"141:16:2"}],"id":33,"name":"ParameterList","src":"90:73:2"},{"children":[{"attributes":{"constant":false,"name":"","scope":38,"stateVariable":false,"storageLocation":"memory","type":"bytes","value":null,"visibility":"internal"},"children":[{"attributes":{"name":"bytes","type":"bytes"},"id":34,"name":"ElementaryTypeName","src":"211:5:2"}],"id":35,"name":"VariableDeclaration","src":"211:12:2"}],"id":36,"name":"ParameterList","src":"210:14:2"},{"attributes":{"statements":[null]},"children":[],"id":37,"name":"Block","src":"229:2:2"}],"id":38,"name":"FunctionDefinition","src":"65:166:2"}],"id":39,"name":"ContractDefinition","src":"33:200:2"}],"id":40,"name":"SourceUnit","src":"0:234:2"}}},"version":"0.5.0+commit.1d4f565a.Linux.g++"}
